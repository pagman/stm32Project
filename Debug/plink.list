
plink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003418  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080034d8  080034d8  000134d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003568  08003568  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003568  08003568  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003568  08003568  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003568  08003568  00013568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800356c  0800356c  0001356c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  080035e0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080035e0  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091f8  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017e6  00000000  00000000  00029290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000660  00000000  00000000  0002aa78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005c8  00000000  00000000  0002b0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ed56  00000000  00000000  0002b6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d1d  00000000  00000000  0003a3f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00059e1f  00000000  00000000  00043113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009cf32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018a8  00000000  00000000  0009cf88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080034c0 	.word	0x080034c0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080034c0 	.word	0x080034c0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b5b0      	push	{r4, r5, r7, lr}
 8000246:	b08e      	sub	sp, #56	; 0x38
 8000248:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024a:	f000 fa09 	bl	8000660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024e:	f000 f83d 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000252:	f000 f8c3 	bl	80003dc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000256:	f000 f891 	bl	800037c <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int count = 0;
 800025a:	2300      	movs	r3, #0
 800025c:	637b      	str	r3, [r7, #52]	; 0x34
  char hello[] = "hello world";
 800025e:	2328      	movs	r3, #40	; 0x28
 8000260:	18fb      	adds	r3, r7, r3
 8000262:	4a16      	ldr	r2, [pc, #88]	; (80002bc <main+0x78>)
 8000264:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000266:	c313      	stmia	r3!, {r0, r1, r4}
  char buffer [10] = "hello\r\n";
 8000268:	201c      	movs	r0, #28
 800026a:	1839      	adds	r1, r7, r0
 800026c:	4a14      	ldr	r2, [pc, #80]	; (80002c0 <main+0x7c>)
 800026e:	000b      	movs	r3, r1
 8000270:	ca30      	ldmia	r2!, {r4, r5}
 8000272:	c330      	stmia	r3!, {r4, r5}
 8000274:	2300      	movs	r3, #0
 8000276:	810b      	strh	r3, [r1, #8]
  uint8_t numarray[10];
  static char msg[16];
  uint8_t Rx_data[10];
  sprintf(buffer,"Hello %d\r\n",count);//  creating a buffer of 10 bytes
 8000278:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800027a:	4912      	ldr	r1, [pc, #72]	; (80002c4 <main+0x80>)
 800027c:	183b      	adds	r3, r7, r0
 800027e:	0018      	movs	r0, r3
 8000280:	f002 fcf8 	bl	8002c74 <siprintf>
  while (1)
  {
    /* USER CODE END WHILE */
	  count++;
 8000284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000286:	3301      	adds	r3, #1
 8000288:	637b      	str	r3, [r7, #52]	; 0x34

	  HAL_UART_Transmit(&huart1,(uint8_t*)buffer,strlen((const char*)buffer),10);
 800028a:	241c      	movs	r4, #28
 800028c:	193b      	adds	r3, r7, r4
 800028e:	0018      	movs	r0, r3
 8000290:	f7ff ff3a 	bl	8000108 <strlen>
 8000294:	0003      	movs	r3, r0
 8000296:	b29a      	uxth	r2, r3
 8000298:	1939      	adds	r1, r7, r4
 800029a:	480b      	ldr	r0, [pc, #44]	; (80002c8 <main+0x84>)
 800029c:	230a      	movs	r3, #10
 800029e:	f001 fad1 	bl	8001844 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80002a2:	23fa      	movs	r3, #250	; 0xfa
 80002a4:	009b      	lsls	r3, r3, #2
 80002a6:	0018      	movs	r0, r3
 80002a8:	f000 fa3e 	bl	8000728 <HAL_Delay>
	  HAL_UART_Receive_IT(&huart1, buffer, 10);
 80002ac:	1939      	adds	r1, r7, r4
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <main+0x84>)
 80002b0:	220a      	movs	r2, #10
 80002b2:	0018      	movs	r0, r3
 80002b4:	f001 fb66 	bl	8001984 <HAL_UART_Receive_IT>
  {
 80002b8:	e7e4      	b.n	8000284 <main+0x40>
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	080034e4 	.word	0x080034e4
 80002c0:	080034f0 	.word	0x080034f0
 80002c4:	080034d8 	.word	0x080034d8
 80002c8:	20000098 	.word	0x20000098

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b590      	push	{r4, r7, lr}
 80002ce:	b095      	sub	sp, #84	; 0x54
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	2420      	movs	r4, #32
 80002d4:	193b      	adds	r3, r7, r4
 80002d6:	0018      	movs	r0, r3
 80002d8:	2330      	movs	r3, #48	; 0x30
 80002da:	001a      	movs	r2, r3
 80002dc:	2100      	movs	r1, #0
 80002de:	f002 fcc1 	bl	8002c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e2:	2310      	movs	r3, #16
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	0018      	movs	r0, r3
 80002e8:	2310      	movs	r3, #16
 80002ea:	001a      	movs	r2, r3
 80002ec:	2100      	movs	r1, #0
 80002ee:	f002 fcb9 	bl	8002c64 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f2:	003b      	movs	r3, r7
 80002f4:	0018      	movs	r0, r3
 80002f6:	2310      	movs	r3, #16
 80002f8:	001a      	movs	r2, r3
 80002fa:	2100      	movs	r1, #0
 80002fc:	f002 fcb2 	bl	8002c64 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000300:	0021      	movs	r1, r4
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2202      	movs	r2, #2
 8000306:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2201      	movs	r2, #1
 800030c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2210      	movs	r2, #16
 8000312:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2200      	movs	r2, #0
 8000318:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031a:	187b      	adds	r3, r7, r1
 800031c:	0018      	movs	r0, r3
 800031e:	f000 fd11 	bl	8000d44 <HAL_RCC_OscConfig>
 8000322:	1e03      	subs	r3, r0, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000326:	f000 f891 	bl	800044c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032a:	2110      	movs	r1, #16
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2207      	movs	r2, #7
 8000330:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000332:	187b      	adds	r3, r7, r1
 8000334:	2200      	movs	r2, #0
 8000336:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033e:	187b      	adds	r3, r7, r1
 8000340:	2200      	movs	r2, #0
 8000342:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000344:	187b      	adds	r3, r7, r1
 8000346:	2100      	movs	r1, #0
 8000348:	0018      	movs	r0, r3
 800034a:	f001 f815 	bl	8001378 <HAL_RCC_ClockConfig>
 800034e:	1e03      	subs	r3, r0, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000352:	f000 f87b 	bl	800044c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000356:	003b      	movs	r3, r7
 8000358:	2201      	movs	r2, #1
 800035a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800035c:	003b      	movs	r3, r7
 800035e:	2200      	movs	r2, #0
 8000360:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000362:	003b      	movs	r3, r7
 8000364:	0018      	movs	r0, r3
 8000366:	f001 f94b 	bl	8001600 <HAL_RCCEx_PeriphCLKConfig>
 800036a:	1e03      	subs	r3, r0, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800036e:	f000 f86d 	bl	800044c <Error_Handler>
  }
}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	46bd      	mov	sp, r7
 8000376:	b015      	add	sp, #84	; 0x54
 8000378:	bd90      	pop	{r4, r7, pc}
	...

0800037c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000380:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <MX_USART1_UART_Init+0x58>)
 8000382:	4a15      	ldr	r2, [pc, #84]	; (80003d8 <MX_USART1_UART_Init+0x5c>)
 8000384:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000386:	4b13      	ldr	r3, [pc, #76]	; (80003d4 <MX_USART1_UART_Init+0x58>)
 8000388:	2296      	movs	r2, #150	; 0x96
 800038a:	0192      	lsls	r2, r2, #6
 800038c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800038e:	4b11      	ldr	r3, [pc, #68]	; (80003d4 <MX_USART1_UART_Init+0x58>)
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000394:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <MX_USART1_UART_Init+0x58>)
 8000396:	2200      	movs	r2, #0
 8000398:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800039a:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <MX_USART1_UART_Init+0x58>)
 800039c:	2200      	movs	r2, #0
 800039e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <MX_USART1_UART_Init+0x58>)
 80003a2:	220c      	movs	r2, #12
 80003a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003a6:	4b0b      	ldr	r3, [pc, #44]	; (80003d4 <MX_USART1_UART_Init+0x58>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003ac:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <MX_USART1_UART_Init+0x58>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003b2:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <MX_USART1_UART_Init+0x58>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003b8:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <MX_USART1_UART_Init+0x58>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003be:	4b05      	ldr	r3, [pc, #20]	; (80003d4 <MX_USART1_UART_Init+0x58>)
 80003c0:	0018      	movs	r0, r3
 80003c2:	f001 f9eb 	bl	800179c <HAL_UART_Init>
 80003c6:	1e03      	subs	r3, r0, #0
 80003c8:	d001      	beq.n	80003ce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80003ca:	f000 f83f 	bl	800044c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	20000098 	.word	0x20000098
 80003d8:	40013800 	.word	0x40013800

080003dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b086      	sub	sp, #24
 80003e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	0018      	movs	r0, r3
 80003e6:	2314      	movs	r3, #20
 80003e8:	001a      	movs	r2, r3
 80003ea:	2100      	movs	r1, #0
 80003ec:	f002 fc3a 	bl	8002c64 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f0:	4b15      	ldr	r3, [pc, #84]	; (8000448 <MX_GPIO_Init+0x6c>)
 80003f2:	695a      	ldr	r2, [r3, #20]
 80003f4:	4b14      	ldr	r3, [pc, #80]	; (8000448 <MX_GPIO_Init+0x6c>)
 80003f6:	2180      	movs	r1, #128	; 0x80
 80003f8:	0289      	lsls	r1, r1, #10
 80003fa:	430a      	orrs	r2, r1
 80003fc:	615a      	str	r2, [r3, #20]
 80003fe:	4b12      	ldr	r3, [pc, #72]	; (8000448 <MX_GPIO_Init+0x6c>)
 8000400:	695a      	ldr	r2, [r3, #20]
 8000402:	2380      	movs	r3, #128	; 0x80
 8000404:	029b      	lsls	r3, r3, #10
 8000406:	4013      	ands	r3, r2
 8000408:	603b      	str	r3, [r7, #0]
 800040a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800040c:	2390      	movs	r3, #144	; 0x90
 800040e:	05db      	lsls	r3, r3, #23
 8000410:	2200      	movs	r2, #0
 8000412:	2110      	movs	r1, #16
 8000414:	0018      	movs	r0, r3
 8000416:	f000 fc77 	bl	8000d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2210      	movs	r2, #16
 800041e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	2201      	movs	r2, #1
 8000424:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	2200      	movs	r2, #0
 8000430:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000432:	1d3a      	adds	r2, r7, #4
 8000434:	2390      	movs	r3, #144	; 0x90
 8000436:	05db      	lsls	r3, r3, #23
 8000438:	0011      	movs	r1, r2
 800043a:	0018      	movs	r0, r3
 800043c:	f000 faf4 	bl	8000a28 <HAL_GPIO_Init>

}
 8000440:	46c0      	nop			; (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	b006      	add	sp, #24
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40021000 	.word	0x40021000

0800044c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000450:	b672      	cpsid	i
}
 8000452:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000454:	e7fe      	b.n	8000454 <Error_Handler+0x8>
	...

08000458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800045e:	4b0f      	ldr	r3, [pc, #60]	; (800049c <HAL_MspInit+0x44>)
 8000460:	699a      	ldr	r2, [r3, #24]
 8000462:	4b0e      	ldr	r3, [pc, #56]	; (800049c <HAL_MspInit+0x44>)
 8000464:	2101      	movs	r1, #1
 8000466:	430a      	orrs	r2, r1
 8000468:	619a      	str	r2, [r3, #24]
 800046a:	4b0c      	ldr	r3, [pc, #48]	; (800049c <HAL_MspInit+0x44>)
 800046c:	699b      	ldr	r3, [r3, #24]
 800046e:	2201      	movs	r2, #1
 8000470:	4013      	ands	r3, r2
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000476:	4b09      	ldr	r3, [pc, #36]	; (800049c <HAL_MspInit+0x44>)
 8000478:	69da      	ldr	r2, [r3, #28]
 800047a:	4b08      	ldr	r3, [pc, #32]	; (800049c <HAL_MspInit+0x44>)
 800047c:	2180      	movs	r1, #128	; 0x80
 800047e:	0549      	lsls	r1, r1, #21
 8000480:	430a      	orrs	r2, r1
 8000482:	61da      	str	r2, [r3, #28]
 8000484:	4b05      	ldr	r3, [pc, #20]	; (800049c <HAL_MspInit+0x44>)
 8000486:	69da      	ldr	r2, [r3, #28]
 8000488:	2380      	movs	r3, #128	; 0x80
 800048a:	055b      	lsls	r3, r3, #21
 800048c:	4013      	ands	r3, r2
 800048e:	603b      	str	r3, [r7, #0]
 8000490:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	46bd      	mov	sp, r7
 8000496:	b002      	add	sp, #8
 8000498:	bd80      	pop	{r7, pc}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	40021000 	.word	0x40021000

080004a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004a0:	b590      	push	{r4, r7, lr}
 80004a2:	b08b      	sub	sp, #44	; 0x2c
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a8:	2414      	movs	r4, #20
 80004aa:	193b      	adds	r3, r7, r4
 80004ac:	0018      	movs	r0, r3
 80004ae:	2314      	movs	r3, #20
 80004b0:	001a      	movs	r2, r3
 80004b2:	2100      	movs	r1, #0
 80004b4:	f002 fbd6 	bl	8002c64 <memset>
  if(huart->Instance==USART1)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a21      	ldr	r2, [pc, #132]	; (8000544 <HAL_UART_MspInit+0xa4>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d13b      	bne.n	800053a <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004c2:	4b21      	ldr	r3, [pc, #132]	; (8000548 <HAL_UART_MspInit+0xa8>)
 80004c4:	699a      	ldr	r2, [r3, #24]
 80004c6:	4b20      	ldr	r3, [pc, #128]	; (8000548 <HAL_UART_MspInit+0xa8>)
 80004c8:	2180      	movs	r1, #128	; 0x80
 80004ca:	01c9      	lsls	r1, r1, #7
 80004cc:	430a      	orrs	r2, r1
 80004ce:	619a      	str	r2, [r3, #24]
 80004d0:	4b1d      	ldr	r3, [pc, #116]	; (8000548 <HAL_UART_MspInit+0xa8>)
 80004d2:	699a      	ldr	r2, [r3, #24]
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	01db      	lsls	r3, r3, #7
 80004d8:	4013      	ands	r3, r2
 80004da:	613b      	str	r3, [r7, #16]
 80004dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004de:	4b1a      	ldr	r3, [pc, #104]	; (8000548 <HAL_UART_MspInit+0xa8>)
 80004e0:	695a      	ldr	r2, [r3, #20]
 80004e2:	4b19      	ldr	r3, [pc, #100]	; (8000548 <HAL_UART_MspInit+0xa8>)
 80004e4:	2180      	movs	r1, #128	; 0x80
 80004e6:	0289      	lsls	r1, r1, #10
 80004e8:	430a      	orrs	r2, r1
 80004ea:	615a      	str	r2, [r3, #20]
 80004ec:	4b16      	ldr	r3, [pc, #88]	; (8000548 <HAL_UART_MspInit+0xa8>)
 80004ee:	695a      	ldr	r2, [r3, #20]
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	029b      	lsls	r3, r3, #10
 80004f4:	4013      	ands	r3, r2
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80004fa:	193b      	adds	r3, r7, r4
 80004fc:	22c0      	movs	r2, #192	; 0xc0
 80004fe:	00d2      	lsls	r2, r2, #3
 8000500:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000502:	0021      	movs	r1, r4
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2202      	movs	r2, #2
 8000508:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2203      	movs	r2, #3
 8000514:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000516:	187b      	adds	r3, r7, r1
 8000518:	2201      	movs	r2, #1
 800051a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051c:	187a      	adds	r2, r7, r1
 800051e:	2390      	movs	r3, #144	; 0x90
 8000520:	05db      	lsls	r3, r3, #23
 8000522:	0011      	movs	r1, r2
 8000524:	0018      	movs	r0, r3
 8000526:	f000 fa7f 	bl	8000a28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800052a:	2200      	movs	r2, #0
 800052c:	2100      	movs	r1, #0
 800052e:	201b      	movs	r0, #27
 8000530:	f000 f9ca 	bl	80008c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000534:	201b      	movs	r0, #27
 8000536:	f000 f9dc 	bl	80008f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	b00b      	add	sp, #44	; 0x2c
 8000540:	bd90      	pop	{r4, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	40013800 	.word	0x40013800
 8000548:	40021000 	.word	0x40021000

0800054c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000550:	e7fe      	b.n	8000550 <NMI_Handler+0x4>

08000552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000556:	e7fe      	b.n	8000556 <HardFault_Handler+0x4>

08000558 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}

08000562 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000562:	b580      	push	{r7, lr}
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000570:	f000 f8be 	bl	80006f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000574:	46c0      	nop			; (mov r8, r8)
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
	...

0800057c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000580:	4b03      	ldr	r3, [pc, #12]	; (8000590 <USART1_IRQHandler+0x14>)
 8000582:	0018      	movs	r0, r3
 8000584:	f001 fa56 	bl	8001a34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000588:	46c0      	nop			; (mov r8, r8)
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	20000098 	.word	0x20000098

08000594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800059c:	4a14      	ldr	r2, [pc, #80]	; (80005f0 <_sbrk+0x5c>)
 800059e:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <_sbrk+0x60>)
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005a8:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <_sbrk+0x64>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d102      	bne.n	80005b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005b0:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <_sbrk+0x64>)
 80005b2:	4a12      	ldr	r2, [pc, #72]	; (80005fc <_sbrk+0x68>)
 80005b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005b6:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <_sbrk+0x64>)
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	18d3      	adds	r3, r2, r3
 80005be:	693a      	ldr	r2, [r7, #16]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d207      	bcs.n	80005d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005c4:	f002 fb24 	bl	8002c10 <__errno>
 80005c8:	0003      	movs	r3, r0
 80005ca:	220c      	movs	r2, #12
 80005cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ce:	2301      	movs	r3, #1
 80005d0:	425b      	negs	r3, r3
 80005d2:	e009      	b.n	80005e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <_sbrk+0x64>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005da:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <_sbrk+0x64>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	18d2      	adds	r2, r2, r3
 80005e2:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <_sbrk+0x64>)
 80005e4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80005e6:	68fb      	ldr	r3, [r7, #12]
}
 80005e8:	0018      	movs	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	b006      	add	sp, #24
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20001000 	.word	0x20001000
 80005f4:	00000400 	.word	0x00000400
 80005f8:	2000008c 	.word	0x2000008c
 80005fc:	20000138 	.word	0x20000138

08000600 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000604:	46c0      	nop			; (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800060e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000610:	f7ff fff6 	bl	8000600 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000614:	480c      	ldr	r0, [pc, #48]	; (8000648 <LoopForever+0x6>)
  ldr r1, =_edata
 8000616:	490d      	ldr	r1, [pc, #52]	; (800064c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000618:	4a0d      	ldr	r2, [pc, #52]	; (8000650 <LoopForever+0xe>)
  movs r3, #0
 800061a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800061c:	e002      	b.n	8000624 <LoopCopyDataInit>

0800061e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000622:	3304      	adds	r3, #4

08000624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000628:	d3f9      	bcc.n	800061e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800062a:	4a0a      	ldr	r2, [pc, #40]	; (8000654 <LoopForever+0x12>)
  ldr r4, =_ebss
 800062c:	4c0a      	ldr	r4, [pc, #40]	; (8000658 <LoopForever+0x16>)
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000630:	e001      	b.n	8000636 <LoopFillZerobss>

08000632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000634:	3204      	adds	r2, #4

08000636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000638:	d3fb      	bcc.n	8000632 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800063a:	f002 faef 	bl	8002c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063e:	f7ff fe01 	bl	8000244 <main>

08000642 <LoopForever>:

LoopForever:
    b LoopForever
 8000642:	e7fe      	b.n	8000642 <LoopForever>
  ldr   r0, =_estack
 8000644:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800064c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000650:	08003570 	.word	0x08003570
  ldr r2, =_sbss
 8000654:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000658:	20000134 	.word	0x20000134

0800065c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800065c:	e7fe      	b.n	800065c <ADC1_IRQHandler>
	...

08000660 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <HAL_Init+0x24>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_Init+0x24>)
 800066a:	2110      	movs	r1, #16
 800066c:	430a      	orrs	r2, r1
 800066e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000670:	2003      	movs	r0, #3
 8000672:	f000 f809 	bl	8000688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000676:	f7ff feef 	bl	8000458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800067a:	2300      	movs	r3, #0
}
 800067c:	0018      	movs	r0, r3
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	40022000 	.word	0x40022000

08000688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <HAL_InitTick+0x5c>)
 8000692:	681c      	ldr	r4, [r3, #0]
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <HAL_InitTick+0x60>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	0019      	movs	r1, r3
 800069a:	23fa      	movs	r3, #250	; 0xfa
 800069c:	0098      	lsls	r0, r3, #2
 800069e:	f7ff fd45 	bl	800012c <__udivsi3>
 80006a2:	0003      	movs	r3, r0
 80006a4:	0019      	movs	r1, r3
 80006a6:	0020      	movs	r0, r4
 80006a8:	f7ff fd40 	bl	800012c <__udivsi3>
 80006ac:	0003      	movs	r3, r0
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 f92f 	bl	8000912 <HAL_SYSTICK_Config>
 80006b4:	1e03      	subs	r3, r0, #0
 80006b6:	d001      	beq.n	80006bc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80006b8:	2301      	movs	r3, #1
 80006ba:	e00f      	b.n	80006dc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b03      	cmp	r3, #3
 80006c0:	d80b      	bhi.n	80006da <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c2:	6879      	ldr	r1, [r7, #4]
 80006c4:	2301      	movs	r3, #1
 80006c6:	425b      	negs	r3, r3
 80006c8:	2200      	movs	r2, #0
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 f8fc 	bl	80008c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HAL_InitTick+0x64>)
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80006d6:	2300      	movs	r3, #0
 80006d8:	e000      	b.n	80006dc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80006da:	2301      	movs	r3, #1
}
 80006dc:	0018      	movs	r0, r3
 80006de:	46bd      	mov	sp, r7
 80006e0:	b003      	add	sp, #12
 80006e2:	bd90      	pop	{r4, r7, pc}
 80006e4:	20000000 	.word	0x20000000
 80006e8:	20000008 	.word	0x20000008
 80006ec:	20000004 	.word	0x20000004

080006f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <HAL_IncTick+0x1c>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	001a      	movs	r2, r3
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <HAL_IncTick+0x20>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	18d2      	adds	r2, r2, r3
 8000700:	4b03      	ldr	r3, [pc, #12]	; (8000710 <HAL_IncTick+0x20>)
 8000702:	601a      	str	r2, [r3, #0]
}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	20000008 	.word	0x20000008
 8000710:	20000120 	.word	0x20000120

08000714 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  return uwTick;
 8000718:	4b02      	ldr	r3, [pc, #8]	; (8000724 <HAL_GetTick+0x10>)
 800071a:	681b      	ldr	r3, [r3, #0]
}
 800071c:	0018      	movs	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	20000120 	.word	0x20000120

08000728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000730:	f7ff fff0 	bl	8000714 <HAL_GetTick>
 8000734:	0003      	movs	r3, r0
 8000736:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	3301      	adds	r3, #1
 8000740:	d005      	beq.n	800074e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000742:	4b0a      	ldr	r3, [pc, #40]	; (800076c <HAL_Delay+0x44>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	001a      	movs	r2, r3
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	189b      	adds	r3, r3, r2
 800074c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	f7ff ffe0 	bl	8000714 <HAL_GetTick>
 8000754:	0002      	movs	r2, r0
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	68fa      	ldr	r2, [r7, #12]
 800075c:	429a      	cmp	r2, r3
 800075e:	d8f7      	bhi.n	8000750 <HAL_Delay+0x28>
  {
  }
}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	46bd      	mov	sp, r7
 8000766:	b004      	add	sp, #16
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	20000008 	.word	0x20000008

08000770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	0002      	movs	r2, r0
 8000778:	1dfb      	adds	r3, r7, #7
 800077a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800077c:	1dfb      	adds	r3, r7, #7
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b7f      	cmp	r3, #127	; 0x7f
 8000782:	d809      	bhi.n	8000798 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000784:	1dfb      	adds	r3, r7, #7
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	001a      	movs	r2, r3
 800078a:	231f      	movs	r3, #31
 800078c:	401a      	ands	r2, r3
 800078e:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <__NVIC_EnableIRQ+0x30>)
 8000790:	2101      	movs	r1, #1
 8000792:	4091      	lsls	r1, r2
 8000794:	000a      	movs	r2, r1
 8000796:	601a      	str	r2, [r3, #0]
  }
}
 8000798:	46c0      	nop			; (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	b002      	add	sp, #8
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	e000e100 	.word	0xe000e100

080007a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	0002      	movs	r2, r0
 80007ac:	6039      	str	r1, [r7, #0]
 80007ae:	1dfb      	adds	r3, r7, #7
 80007b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007b2:	1dfb      	adds	r3, r7, #7
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b7f      	cmp	r3, #127	; 0x7f
 80007b8:	d828      	bhi.n	800080c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ba:	4a2f      	ldr	r2, [pc, #188]	; (8000878 <__NVIC_SetPriority+0xd4>)
 80007bc:	1dfb      	adds	r3, r7, #7
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	b25b      	sxtb	r3, r3
 80007c2:	089b      	lsrs	r3, r3, #2
 80007c4:	33c0      	adds	r3, #192	; 0xc0
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	589b      	ldr	r3, [r3, r2]
 80007ca:	1dfa      	adds	r2, r7, #7
 80007cc:	7812      	ldrb	r2, [r2, #0]
 80007ce:	0011      	movs	r1, r2
 80007d0:	2203      	movs	r2, #3
 80007d2:	400a      	ands	r2, r1
 80007d4:	00d2      	lsls	r2, r2, #3
 80007d6:	21ff      	movs	r1, #255	; 0xff
 80007d8:	4091      	lsls	r1, r2
 80007da:	000a      	movs	r2, r1
 80007dc:	43d2      	mvns	r2, r2
 80007de:	401a      	ands	r2, r3
 80007e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	019b      	lsls	r3, r3, #6
 80007e6:	22ff      	movs	r2, #255	; 0xff
 80007e8:	401a      	ands	r2, r3
 80007ea:	1dfb      	adds	r3, r7, #7
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	0018      	movs	r0, r3
 80007f0:	2303      	movs	r3, #3
 80007f2:	4003      	ands	r3, r0
 80007f4:	00db      	lsls	r3, r3, #3
 80007f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007f8:	481f      	ldr	r0, [pc, #124]	; (8000878 <__NVIC_SetPriority+0xd4>)
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b25b      	sxtb	r3, r3
 8000800:	089b      	lsrs	r3, r3, #2
 8000802:	430a      	orrs	r2, r1
 8000804:	33c0      	adds	r3, #192	; 0xc0
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800080a:	e031      	b.n	8000870 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800080c:	4a1b      	ldr	r2, [pc, #108]	; (800087c <__NVIC_SetPriority+0xd8>)
 800080e:	1dfb      	adds	r3, r7, #7
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	0019      	movs	r1, r3
 8000814:	230f      	movs	r3, #15
 8000816:	400b      	ands	r3, r1
 8000818:	3b08      	subs	r3, #8
 800081a:	089b      	lsrs	r3, r3, #2
 800081c:	3306      	adds	r3, #6
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	18d3      	adds	r3, r2, r3
 8000822:	3304      	adds	r3, #4
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	1dfa      	adds	r2, r7, #7
 8000828:	7812      	ldrb	r2, [r2, #0]
 800082a:	0011      	movs	r1, r2
 800082c:	2203      	movs	r2, #3
 800082e:	400a      	ands	r2, r1
 8000830:	00d2      	lsls	r2, r2, #3
 8000832:	21ff      	movs	r1, #255	; 0xff
 8000834:	4091      	lsls	r1, r2
 8000836:	000a      	movs	r2, r1
 8000838:	43d2      	mvns	r2, r2
 800083a:	401a      	ands	r2, r3
 800083c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	019b      	lsls	r3, r3, #6
 8000842:	22ff      	movs	r2, #255	; 0xff
 8000844:	401a      	ands	r2, r3
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	0018      	movs	r0, r3
 800084c:	2303      	movs	r3, #3
 800084e:	4003      	ands	r3, r0
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000854:	4809      	ldr	r0, [pc, #36]	; (800087c <__NVIC_SetPriority+0xd8>)
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	001c      	movs	r4, r3
 800085c:	230f      	movs	r3, #15
 800085e:	4023      	ands	r3, r4
 8000860:	3b08      	subs	r3, #8
 8000862:	089b      	lsrs	r3, r3, #2
 8000864:	430a      	orrs	r2, r1
 8000866:	3306      	adds	r3, #6
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	18c3      	adds	r3, r0, r3
 800086c:	3304      	adds	r3, #4
 800086e:	601a      	str	r2, [r3, #0]
}
 8000870:	46c0      	nop			; (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	b003      	add	sp, #12
 8000876:	bd90      	pop	{r4, r7, pc}
 8000878:	e000e100 	.word	0xe000e100
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	1e5a      	subs	r2, r3, #1
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	045b      	lsls	r3, r3, #17
 8000890:	429a      	cmp	r2, r3
 8000892:	d301      	bcc.n	8000898 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000894:	2301      	movs	r3, #1
 8000896:	e010      	b.n	80008ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000898:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <SysTick_Config+0x44>)
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	3a01      	subs	r2, #1
 800089e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008a0:	2301      	movs	r3, #1
 80008a2:	425b      	negs	r3, r3
 80008a4:	2103      	movs	r1, #3
 80008a6:	0018      	movs	r0, r3
 80008a8:	f7ff ff7c 	bl	80007a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008ac:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <SysTick_Config+0x44>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008b2:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <SysTick_Config+0x44>)
 80008b4:	2207      	movs	r2, #7
 80008b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	0018      	movs	r0, r3
 80008bc:	46bd      	mov	sp, r7
 80008be:	b002      	add	sp, #8
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	e000e010 	.word	0xe000e010

080008c8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60b9      	str	r1, [r7, #8]
 80008d0:	607a      	str	r2, [r7, #4]
 80008d2:	210f      	movs	r1, #15
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	1c02      	adds	r2, r0, #0
 80008d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008da:	68ba      	ldr	r2, [r7, #8]
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	b25b      	sxtb	r3, r3
 80008e2:	0011      	movs	r1, r2
 80008e4:	0018      	movs	r0, r3
 80008e6:	f7ff ff5d 	bl	80007a4 <__NVIC_SetPriority>
}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b004      	add	sp, #16
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b082      	sub	sp, #8
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	0002      	movs	r2, r0
 80008fa:	1dfb      	adds	r3, r7, #7
 80008fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008fe:	1dfb      	adds	r3, r7, #7
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	b25b      	sxtb	r3, r3
 8000904:	0018      	movs	r0, r3
 8000906:	f7ff ff33 	bl	8000770 <__NVIC_EnableIRQ>
}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	46bd      	mov	sp, r7
 800090e:	b002      	add	sp, #8
 8000910:	bd80      	pop	{r7, pc}

08000912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	0018      	movs	r0, r3
 800091e:	f7ff ffaf 	bl	8000880 <SysTick_Config>
 8000922:	0003      	movs	r3, r0
}
 8000924:	0018      	movs	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	b002      	add	sp, #8
 800092a:	bd80      	pop	{r7, pc}

0800092c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2221      	movs	r2, #33	; 0x21
 8000938:	5c9b      	ldrb	r3, [r3, r2]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2b02      	cmp	r3, #2
 800093e:	d008      	beq.n	8000952 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2204      	movs	r2, #4
 8000944:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2220      	movs	r2, #32
 800094a:	2100      	movs	r1, #0
 800094c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800094e:	2301      	movs	r3, #1
 8000950:	e020      	b.n	8000994 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	210e      	movs	r1, #14
 800095e:	438a      	bics	r2, r1
 8000960:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2101      	movs	r1, #1
 800096e:	438a      	bics	r2, r1
 8000970:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800097a:	2101      	movs	r1, #1
 800097c:	4091      	lsls	r1, r2
 800097e:	000a      	movs	r2, r1
 8000980:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2221      	movs	r2, #33	; 0x21
 8000986:	2101      	movs	r1, #1
 8000988:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2220      	movs	r2, #32
 800098e:	2100      	movs	r1, #0
 8000990:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000992:	2300      	movs	r3, #0
}
 8000994:	0018      	movs	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	b002      	add	sp, #8
 800099a:	bd80      	pop	{r7, pc}

0800099c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009a4:	210f      	movs	r1, #15
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2221      	movs	r2, #33	; 0x21
 80009b0:	5c9b      	ldrb	r3, [r3, r2]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d006      	beq.n	80009c6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2204      	movs	r2, #4
 80009bc:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2201      	movs	r2, #1
 80009c2:	701a      	strb	r2, [r3, #0]
 80009c4:	e028      	b.n	8000a18 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	210e      	movs	r1, #14
 80009d2:	438a      	bics	r2, r1
 80009d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2101      	movs	r1, #1
 80009e2:	438a      	bics	r2, r1
 80009e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009ee:	2101      	movs	r1, #1
 80009f0:	4091      	lsls	r1, r2
 80009f2:	000a      	movs	r2, r1
 80009f4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2221      	movs	r2, #33	; 0x21
 80009fa:	2101      	movs	r1, #1
 80009fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2220      	movs	r2, #32
 8000a02:	2100      	movs	r1, #0
 8000a04:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d004      	beq.n	8000a18 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	0010      	movs	r0, r2
 8000a16:	4798      	blx	r3
    }
  }
  return status;
 8000a18:	230f      	movs	r3, #15
 8000a1a:	18fb      	adds	r3, r7, r3
 8000a1c:	781b      	ldrb	r3, [r3, #0]
}
 8000a1e:	0018      	movs	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	b004      	add	sp, #16
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a36:	e14f      	b.n	8000cd8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	697a      	ldr	r2, [r7, #20]
 8000a40:	4091      	lsls	r1, r2
 8000a42:	000a      	movs	r2, r1
 8000a44:	4013      	ands	r3, r2
 8000a46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d100      	bne.n	8000a50 <HAL_GPIO_Init+0x28>
 8000a4e:	e140      	b.n	8000cd2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	2203      	movs	r2, #3
 8000a56:	4013      	ands	r3, r2
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d005      	beq.n	8000a68 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	2203      	movs	r2, #3
 8000a62:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d130      	bne.n	8000aca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	2203      	movs	r2, #3
 8000a74:	409a      	lsls	r2, r3
 8000a76:	0013      	movs	r3, r2
 8000a78:	43da      	mvns	r2, r3
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	68da      	ldr	r2, [r3, #12]
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	409a      	lsls	r2, r3
 8000a8a:	0013      	movs	r3, r2
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	409a      	lsls	r2, r3
 8000aa4:	0013      	movs	r3, r2
 8000aa6:	43da      	mvns	r2, r3
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	091b      	lsrs	r3, r3, #4
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	409a      	lsls	r2, r3
 8000abc:	0013      	movs	r3, r2
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	2203      	movs	r2, #3
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	2b03      	cmp	r3, #3
 8000ad4:	d017      	beq.n	8000b06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	2203      	movs	r2, #3
 8000ae2:	409a      	lsls	r2, r3
 8000ae4:	0013      	movs	r3, r2
 8000ae6:	43da      	mvns	r2, r3
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	4013      	ands	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	689a      	ldr	r2, [r3, #8]
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	409a      	lsls	r2, r3
 8000af8:	0013      	movs	r3, r2
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	2203      	movs	r2, #3
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	d123      	bne.n	8000b5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	08da      	lsrs	r2, r3, #3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	3208      	adds	r2, #8
 8000b1a:	0092      	lsls	r2, r2, #2
 8000b1c:	58d3      	ldr	r3, [r2, r3]
 8000b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	2207      	movs	r2, #7
 8000b24:	4013      	ands	r3, r2
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	220f      	movs	r2, #15
 8000b2a:	409a      	lsls	r2, r3
 8000b2c:	0013      	movs	r3, r2
 8000b2e:	43da      	mvns	r2, r3
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	4013      	ands	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	691a      	ldr	r2, [r3, #16]
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	2107      	movs	r1, #7
 8000b3e:	400b      	ands	r3, r1
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	409a      	lsls	r2, r3
 8000b44:	0013      	movs	r3, r2
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	08da      	lsrs	r2, r3, #3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3208      	adds	r2, #8
 8000b54:	0092      	lsls	r2, r2, #2
 8000b56:	6939      	ldr	r1, [r7, #16]
 8000b58:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	2203      	movs	r2, #3
 8000b66:	409a      	lsls	r2, r3
 8000b68:	0013      	movs	r3, r2
 8000b6a:	43da      	mvns	r2, r3
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	2203      	movs	r2, #3
 8000b78:	401a      	ands	r2, r3
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	409a      	lsls	r2, r3
 8000b80:	0013      	movs	r3, r2
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685a      	ldr	r2, [r3, #4]
 8000b92:	23c0      	movs	r3, #192	; 0xc0
 8000b94:	029b      	lsls	r3, r3, #10
 8000b96:	4013      	ands	r3, r2
 8000b98:	d100      	bne.n	8000b9c <HAL_GPIO_Init+0x174>
 8000b9a:	e09a      	b.n	8000cd2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9c:	4b54      	ldr	r3, [pc, #336]	; (8000cf0 <HAL_GPIO_Init+0x2c8>)
 8000b9e:	699a      	ldr	r2, [r3, #24]
 8000ba0:	4b53      	ldr	r3, [pc, #332]	; (8000cf0 <HAL_GPIO_Init+0x2c8>)
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	619a      	str	r2, [r3, #24]
 8000ba8:	4b51      	ldr	r3, [pc, #324]	; (8000cf0 <HAL_GPIO_Init+0x2c8>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	2201      	movs	r2, #1
 8000bae:	4013      	ands	r3, r2
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bb4:	4a4f      	ldr	r2, [pc, #316]	; (8000cf4 <HAL_GPIO_Init+0x2cc>)
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	089b      	lsrs	r3, r3, #2
 8000bba:	3302      	adds	r3, #2
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	589b      	ldr	r3, [r3, r2]
 8000bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	220f      	movs	r2, #15
 8000bcc:	409a      	lsls	r2, r3
 8000bce:	0013      	movs	r3, r2
 8000bd0:	43da      	mvns	r2, r3
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	2390      	movs	r3, #144	; 0x90
 8000bdc:	05db      	lsls	r3, r3, #23
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d013      	beq.n	8000c0a <HAL_GPIO_Init+0x1e2>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a44      	ldr	r2, [pc, #272]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d00d      	beq.n	8000c06 <HAL_GPIO_Init+0x1de>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a43      	ldr	r2, [pc, #268]	; (8000cfc <HAL_GPIO_Init+0x2d4>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d007      	beq.n	8000c02 <HAL_GPIO_Init+0x1da>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a42      	ldr	r2, [pc, #264]	; (8000d00 <HAL_GPIO_Init+0x2d8>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d101      	bne.n	8000bfe <HAL_GPIO_Init+0x1d6>
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	e006      	b.n	8000c0c <HAL_GPIO_Init+0x1e4>
 8000bfe:	2305      	movs	r3, #5
 8000c00:	e004      	b.n	8000c0c <HAL_GPIO_Init+0x1e4>
 8000c02:	2302      	movs	r3, #2
 8000c04:	e002      	b.n	8000c0c <HAL_GPIO_Init+0x1e4>
 8000c06:	2301      	movs	r3, #1
 8000c08:	e000      	b.n	8000c0c <HAL_GPIO_Init+0x1e4>
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	697a      	ldr	r2, [r7, #20]
 8000c0e:	2103      	movs	r1, #3
 8000c10:	400a      	ands	r2, r1
 8000c12:	0092      	lsls	r2, r2, #2
 8000c14:	4093      	lsls	r3, r2
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c1c:	4935      	ldr	r1, [pc, #212]	; (8000cf4 <HAL_GPIO_Init+0x2cc>)
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	089b      	lsrs	r3, r3, #2
 8000c22:	3302      	adds	r3, #2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c2a:	4b36      	ldr	r3, [pc, #216]	; (8000d04 <HAL_GPIO_Init+0x2dc>)
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	43da      	mvns	r2, r3
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	4013      	ands	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685a      	ldr	r2, [r3, #4]
 8000c3e:	2380      	movs	r3, #128	; 0x80
 8000c40:	035b      	lsls	r3, r3, #13
 8000c42:	4013      	ands	r3, r2
 8000c44:	d003      	beq.n	8000c4e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c4e:	4b2d      	ldr	r3, [pc, #180]	; (8000d04 <HAL_GPIO_Init+0x2dc>)
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c54:	4b2b      	ldr	r3, [pc, #172]	; (8000d04 <HAL_GPIO_Init+0x2dc>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	43da      	mvns	r2, r3
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	039b      	lsls	r3, r3, #14
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	d003      	beq.n	8000c78 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c78:	4b22      	ldr	r3, [pc, #136]	; (8000d04 <HAL_GPIO_Init+0x2dc>)
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000c7e:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <HAL_GPIO_Init+0x2dc>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	43da      	mvns	r2, r3
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685a      	ldr	r2, [r3, #4]
 8000c92:	2380      	movs	r3, #128	; 0x80
 8000c94:	029b      	lsls	r3, r3, #10
 8000c96:	4013      	ands	r3, r2
 8000c98:	d003      	beq.n	8000ca2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <HAL_GPIO_Init+0x2dc>)
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000ca8:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <HAL_GPIO_Init+0x2dc>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	43da      	mvns	r2, r3
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	2380      	movs	r3, #128	; 0x80
 8000cbe:	025b      	lsls	r3, r3, #9
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	d003      	beq.n	8000ccc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ccc:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <HAL_GPIO_Init+0x2dc>)
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	40da      	lsrs	r2, r3
 8000ce0:	1e13      	subs	r3, r2, #0
 8000ce2:	d000      	beq.n	8000ce6 <HAL_GPIO_Init+0x2be>
 8000ce4:	e6a8      	b.n	8000a38 <HAL_GPIO_Init+0x10>
  } 
}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	46c0      	nop			; (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	b006      	add	sp, #24
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40010000 	.word	0x40010000
 8000cf8:	48000400 	.word	0x48000400
 8000cfc:	48000800 	.word	0x48000800
 8000d00:	48000c00 	.word	0x48000c00
 8000d04:	40010400 	.word	0x40010400

08000d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	0008      	movs	r0, r1
 8000d12:	0011      	movs	r1, r2
 8000d14:	1cbb      	adds	r3, r7, #2
 8000d16:	1c02      	adds	r2, r0, #0
 8000d18:	801a      	strh	r2, [r3, #0]
 8000d1a:	1c7b      	adds	r3, r7, #1
 8000d1c:	1c0a      	adds	r2, r1, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d20:	1c7b      	adds	r3, r7, #1
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d004      	beq.n	8000d32 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d28:	1cbb      	adds	r3, r7, #2
 8000d2a:	881a      	ldrh	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d30:	e003      	b.n	8000d3a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d32:	1cbb      	adds	r3, r7, #2
 8000d34:	881a      	ldrh	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b002      	add	sp, #8
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e301      	b.n	800135a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	d100      	bne.n	8000d62 <HAL_RCC_OscConfig+0x1e>
 8000d60:	e08d      	b.n	8000e7e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d62:	4bc3      	ldr	r3, [pc, #780]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	220c      	movs	r2, #12
 8000d68:	4013      	ands	r3, r2
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	d00e      	beq.n	8000d8c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d6e:	4bc0      	ldr	r3, [pc, #768]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	220c      	movs	r2, #12
 8000d74:	4013      	ands	r3, r2
 8000d76:	2b08      	cmp	r3, #8
 8000d78:	d116      	bne.n	8000da8 <HAL_RCC_OscConfig+0x64>
 8000d7a:	4bbd      	ldr	r3, [pc, #756]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	2380      	movs	r3, #128	; 0x80
 8000d80:	025b      	lsls	r3, r3, #9
 8000d82:	401a      	ands	r2, r3
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	025b      	lsls	r3, r3, #9
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d10d      	bne.n	8000da8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d8c:	4bb8      	ldr	r3, [pc, #736]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	029b      	lsls	r3, r3, #10
 8000d94:	4013      	ands	r3, r2
 8000d96:	d100      	bne.n	8000d9a <HAL_RCC_OscConfig+0x56>
 8000d98:	e070      	b.n	8000e7c <HAL_RCC_OscConfig+0x138>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d000      	beq.n	8000da4 <HAL_RCC_OscConfig+0x60>
 8000da2:	e06b      	b.n	8000e7c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e2d8      	b.n	800135a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d107      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x7c>
 8000db0:	4baf      	ldr	r3, [pc, #700]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4bae      	ldr	r3, [pc, #696]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000db6:	2180      	movs	r1, #128	; 0x80
 8000db8:	0249      	lsls	r1, r1, #9
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	e02f      	b.n	8000e20 <HAL_RCC_OscConfig+0xdc>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d10c      	bne.n	8000de2 <HAL_RCC_OscConfig+0x9e>
 8000dc8:	4ba9      	ldr	r3, [pc, #676]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4ba8      	ldr	r3, [pc, #672]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000dce:	49a9      	ldr	r1, [pc, #676]	; (8001074 <HAL_RCC_OscConfig+0x330>)
 8000dd0:	400a      	ands	r2, r1
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	4ba6      	ldr	r3, [pc, #664]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4ba5      	ldr	r3, [pc, #660]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000dda:	49a7      	ldr	r1, [pc, #668]	; (8001078 <HAL_RCC_OscConfig+0x334>)
 8000ddc:	400a      	ands	r2, r1
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	e01e      	b.n	8000e20 <HAL_RCC_OscConfig+0xdc>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b05      	cmp	r3, #5
 8000de8:	d10e      	bne.n	8000e08 <HAL_RCC_OscConfig+0xc4>
 8000dea:	4ba1      	ldr	r3, [pc, #644]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	4ba0      	ldr	r3, [pc, #640]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000df0:	2180      	movs	r1, #128	; 0x80
 8000df2:	02c9      	lsls	r1, r1, #11
 8000df4:	430a      	orrs	r2, r1
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	4b9d      	ldr	r3, [pc, #628]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b9c      	ldr	r3, [pc, #624]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000dfe:	2180      	movs	r1, #128	; 0x80
 8000e00:	0249      	lsls	r1, r1, #9
 8000e02:	430a      	orrs	r2, r1
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	e00b      	b.n	8000e20 <HAL_RCC_OscConfig+0xdc>
 8000e08:	4b99      	ldr	r3, [pc, #612]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b98      	ldr	r3, [pc, #608]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000e0e:	4999      	ldr	r1, [pc, #612]	; (8001074 <HAL_RCC_OscConfig+0x330>)
 8000e10:	400a      	ands	r2, r1
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	4b96      	ldr	r3, [pc, #600]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b95      	ldr	r3, [pc, #596]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000e1a:	4997      	ldr	r1, [pc, #604]	; (8001078 <HAL_RCC_OscConfig+0x334>)
 8000e1c:	400a      	ands	r2, r1
 8000e1e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d014      	beq.n	8000e52 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e28:	f7ff fc74 	bl	8000714 <HAL_GetTick>
 8000e2c:	0003      	movs	r3, r0
 8000e2e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e30:	e008      	b.n	8000e44 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e32:	f7ff fc6f 	bl	8000714 <HAL_GetTick>
 8000e36:	0002      	movs	r2, r0
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	2b64      	cmp	r3, #100	; 0x64
 8000e3e:	d901      	bls.n	8000e44 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000e40:	2303      	movs	r3, #3
 8000e42:	e28a      	b.n	800135a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e44:	4b8a      	ldr	r3, [pc, #552]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	2380      	movs	r3, #128	; 0x80
 8000e4a:	029b      	lsls	r3, r3, #10
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	d0f0      	beq.n	8000e32 <HAL_RCC_OscConfig+0xee>
 8000e50:	e015      	b.n	8000e7e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e52:	f7ff fc5f 	bl	8000714 <HAL_GetTick>
 8000e56:	0003      	movs	r3, r0
 8000e58:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e5a:	e008      	b.n	8000e6e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e5c:	f7ff fc5a 	bl	8000714 <HAL_GetTick>
 8000e60:	0002      	movs	r2, r0
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b64      	cmp	r3, #100	; 0x64
 8000e68:	d901      	bls.n	8000e6e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e275      	b.n	800135a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e6e:	4b80      	ldr	r3, [pc, #512]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	2380      	movs	r3, #128	; 0x80
 8000e74:	029b      	lsls	r3, r3, #10
 8000e76:	4013      	ands	r3, r2
 8000e78:	d1f0      	bne.n	8000e5c <HAL_RCC_OscConfig+0x118>
 8000e7a:	e000      	b.n	8000e7e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e7c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2202      	movs	r2, #2
 8000e84:	4013      	ands	r3, r2
 8000e86:	d100      	bne.n	8000e8a <HAL_RCC_OscConfig+0x146>
 8000e88:	e069      	b.n	8000f5e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e8a:	4b79      	ldr	r3, [pc, #484]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	220c      	movs	r2, #12
 8000e90:	4013      	ands	r3, r2
 8000e92:	d00b      	beq.n	8000eac <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e94:	4b76      	ldr	r3, [pc, #472]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	220c      	movs	r2, #12
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	2b08      	cmp	r3, #8
 8000e9e:	d11c      	bne.n	8000eda <HAL_RCC_OscConfig+0x196>
 8000ea0:	4b73      	ldr	r3, [pc, #460]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	2380      	movs	r3, #128	; 0x80
 8000ea6:	025b      	lsls	r3, r3, #9
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	d116      	bne.n	8000eda <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eac:	4b70      	ldr	r3, [pc, #448]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	d005      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x17e>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d001      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e24b      	b.n	800135a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec2:	4b6b      	ldr	r3, [pc, #428]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	22f8      	movs	r2, #248	; 0xf8
 8000ec8:	4393      	bics	r3, r2
 8000eca:	0019      	movs	r1, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	691b      	ldr	r3, [r3, #16]
 8000ed0:	00da      	lsls	r2, r3, #3
 8000ed2:	4b67      	ldr	r3, [pc, #412]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ed8:	e041      	b.n	8000f5e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d024      	beq.n	8000f2c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ee2:	4b63      	ldr	r3, [pc, #396]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	4b62      	ldr	r3, [pc, #392]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000ee8:	2101      	movs	r1, #1
 8000eea:	430a      	orrs	r2, r1
 8000eec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eee:	f7ff fc11 	bl	8000714 <HAL_GetTick>
 8000ef2:	0003      	movs	r3, r0
 8000ef4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef6:	e008      	b.n	8000f0a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ef8:	f7ff fc0c 	bl	8000714 <HAL_GetTick>
 8000efc:	0002      	movs	r2, r0
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d901      	bls.n	8000f0a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e227      	b.n	800135a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f0a:	4b59      	ldr	r3, [pc, #356]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2202      	movs	r2, #2
 8000f10:	4013      	ands	r3, r2
 8000f12:	d0f1      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f14:	4b56      	ldr	r3, [pc, #344]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	22f8      	movs	r2, #248	; 0xf8
 8000f1a:	4393      	bics	r3, r2
 8000f1c:	0019      	movs	r1, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	691b      	ldr	r3, [r3, #16]
 8000f22:	00da      	lsls	r2, r3, #3
 8000f24:	4b52      	ldr	r3, [pc, #328]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000f26:	430a      	orrs	r2, r1
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	e018      	b.n	8000f5e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f2c:	4b50      	ldr	r3, [pc, #320]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b4f      	ldr	r3, [pc, #316]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000f32:	2101      	movs	r1, #1
 8000f34:	438a      	bics	r2, r1
 8000f36:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f38:	f7ff fbec 	bl	8000714 <HAL_GetTick>
 8000f3c:	0003      	movs	r3, r0
 8000f3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f40:	e008      	b.n	8000f54 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f42:	f7ff fbe7 	bl	8000714 <HAL_GetTick>
 8000f46:	0002      	movs	r2, r0
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e202      	b.n	800135a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f54:	4b46      	ldr	r3, [pc, #280]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2202      	movs	r2, #2
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	d1f1      	bne.n	8000f42 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2208      	movs	r2, #8
 8000f64:	4013      	ands	r3, r2
 8000f66:	d036      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	69db      	ldr	r3, [r3, #28]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d019      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f70:	4b3f      	ldr	r3, [pc, #252]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000f72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f74:	4b3e      	ldr	r3, [pc, #248]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000f76:	2101      	movs	r1, #1
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f7c:	f7ff fbca 	bl	8000714 <HAL_GetTick>
 8000f80:	0003      	movs	r3, r0
 8000f82:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f84:	e008      	b.n	8000f98 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f86:	f7ff fbc5 	bl	8000714 <HAL_GetTick>
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d901      	bls.n	8000f98 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000f94:	2303      	movs	r3, #3
 8000f96:	e1e0      	b.n	800135a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f98:	4b35      	ldr	r3, [pc, #212]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	d0f1      	beq.n	8000f86 <HAL_RCC_OscConfig+0x242>
 8000fa2:	e018      	b.n	8000fd6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fa4:	4b32      	ldr	r3, [pc, #200]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000fa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fa8:	4b31      	ldr	r3, [pc, #196]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000faa:	2101      	movs	r1, #1
 8000fac:	438a      	bics	r2, r1
 8000fae:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb0:	f7ff fbb0 	bl	8000714 <HAL_GetTick>
 8000fb4:	0003      	movs	r3, r0
 8000fb6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fb8:	e008      	b.n	8000fcc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fba:	f7ff fbab 	bl	8000714 <HAL_GetTick>
 8000fbe:	0002      	movs	r2, r0
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d901      	bls.n	8000fcc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e1c6      	b.n	800135a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fcc:	4b28      	ldr	r3, [pc, #160]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	d1f1      	bne.n	8000fba <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2204      	movs	r2, #4
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d100      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x29e>
 8000fe0:	e0b4      	b.n	800114c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fe2:	201f      	movs	r0, #31
 8000fe4:	183b      	adds	r3, r7, r0
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fea:	4b21      	ldr	r3, [pc, #132]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000fec:	69da      	ldr	r2, [r3, #28]
 8000fee:	2380      	movs	r3, #128	; 0x80
 8000ff0:	055b      	lsls	r3, r3, #21
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	d110      	bne.n	8001018 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000ff8:	69da      	ldr	r2, [r3, #28]
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8000ffc:	2180      	movs	r1, #128	; 0x80
 8000ffe:	0549      	lsls	r1, r1, #21
 8001000:	430a      	orrs	r2, r1
 8001002:	61da      	str	r2, [r3, #28]
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8001006:	69da      	ldr	r2, [r3, #28]
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	055b      	lsls	r3, r3, #21
 800100c:	4013      	ands	r3, r2
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001012:	183b      	adds	r3, r7, r0
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <HAL_RCC_OscConfig+0x338>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	4013      	ands	r3, r2
 8001022:	d11a      	bne.n	800105a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <HAL_RCC_OscConfig+0x338>)
 800102a:	2180      	movs	r1, #128	; 0x80
 800102c:	0049      	lsls	r1, r1, #1
 800102e:	430a      	orrs	r2, r1
 8001030:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001032:	f7ff fb6f 	bl	8000714 <HAL_GetTick>
 8001036:	0003      	movs	r3, r0
 8001038:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800103c:	f7ff fb6a 	bl	8000714 <HAL_GetTick>
 8001040:	0002      	movs	r2, r0
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b64      	cmp	r3, #100	; 0x64
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e185      	b.n	800135a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	2380      	movs	r3, #128	; 0x80
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	4013      	ands	r3, r2
 8001058:	d0f0      	beq.n	800103c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d10e      	bne.n	8001080 <HAL_RCC_OscConfig+0x33c>
 8001062:	4b03      	ldr	r3, [pc, #12]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8001064:	6a1a      	ldr	r2, [r3, #32]
 8001066:	4b02      	ldr	r3, [pc, #8]	; (8001070 <HAL_RCC_OscConfig+0x32c>)
 8001068:	2101      	movs	r1, #1
 800106a:	430a      	orrs	r2, r1
 800106c:	621a      	str	r2, [r3, #32]
 800106e:	e035      	b.n	80010dc <HAL_RCC_OscConfig+0x398>
 8001070:	40021000 	.word	0x40021000
 8001074:	fffeffff 	.word	0xfffeffff
 8001078:	fffbffff 	.word	0xfffbffff
 800107c:	40007000 	.word	0x40007000
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d10c      	bne.n	80010a2 <HAL_RCC_OscConfig+0x35e>
 8001088:	4bb6      	ldr	r3, [pc, #728]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 800108a:	6a1a      	ldr	r2, [r3, #32]
 800108c:	4bb5      	ldr	r3, [pc, #724]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 800108e:	2101      	movs	r1, #1
 8001090:	438a      	bics	r2, r1
 8001092:	621a      	str	r2, [r3, #32]
 8001094:	4bb3      	ldr	r3, [pc, #716]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 8001096:	6a1a      	ldr	r2, [r3, #32]
 8001098:	4bb2      	ldr	r3, [pc, #712]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 800109a:	2104      	movs	r1, #4
 800109c:	438a      	bics	r2, r1
 800109e:	621a      	str	r2, [r3, #32]
 80010a0:	e01c      	b.n	80010dc <HAL_RCC_OscConfig+0x398>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	2b05      	cmp	r3, #5
 80010a8:	d10c      	bne.n	80010c4 <HAL_RCC_OscConfig+0x380>
 80010aa:	4bae      	ldr	r3, [pc, #696]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 80010ac:	6a1a      	ldr	r2, [r3, #32]
 80010ae:	4bad      	ldr	r3, [pc, #692]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 80010b0:	2104      	movs	r1, #4
 80010b2:	430a      	orrs	r2, r1
 80010b4:	621a      	str	r2, [r3, #32]
 80010b6:	4bab      	ldr	r3, [pc, #684]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 80010b8:	6a1a      	ldr	r2, [r3, #32]
 80010ba:	4baa      	ldr	r3, [pc, #680]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 80010bc:	2101      	movs	r1, #1
 80010be:	430a      	orrs	r2, r1
 80010c0:	621a      	str	r2, [r3, #32]
 80010c2:	e00b      	b.n	80010dc <HAL_RCC_OscConfig+0x398>
 80010c4:	4ba7      	ldr	r3, [pc, #668]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 80010c6:	6a1a      	ldr	r2, [r3, #32]
 80010c8:	4ba6      	ldr	r3, [pc, #664]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 80010ca:	2101      	movs	r1, #1
 80010cc:	438a      	bics	r2, r1
 80010ce:	621a      	str	r2, [r3, #32]
 80010d0:	4ba4      	ldr	r3, [pc, #656]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 80010d2:	6a1a      	ldr	r2, [r3, #32]
 80010d4:	4ba3      	ldr	r3, [pc, #652]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 80010d6:	2104      	movs	r1, #4
 80010d8:	438a      	bics	r2, r1
 80010da:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d014      	beq.n	800110e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e4:	f7ff fb16 	bl	8000714 <HAL_GetTick>
 80010e8:	0003      	movs	r3, r0
 80010ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ec:	e009      	b.n	8001102 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010ee:	f7ff fb11 	bl	8000714 <HAL_GetTick>
 80010f2:	0002      	movs	r2, r0
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	4a9b      	ldr	r2, [pc, #620]	; (8001368 <HAL_RCC_OscConfig+0x624>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e12b      	b.n	800135a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001102:	4b98      	ldr	r3, [pc, #608]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 8001104:	6a1b      	ldr	r3, [r3, #32]
 8001106:	2202      	movs	r2, #2
 8001108:	4013      	ands	r3, r2
 800110a:	d0f0      	beq.n	80010ee <HAL_RCC_OscConfig+0x3aa>
 800110c:	e013      	b.n	8001136 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110e:	f7ff fb01 	bl	8000714 <HAL_GetTick>
 8001112:	0003      	movs	r3, r0
 8001114:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001116:	e009      	b.n	800112c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001118:	f7ff fafc 	bl	8000714 <HAL_GetTick>
 800111c:	0002      	movs	r2, r0
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	4a91      	ldr	r2, [pc, #580]	; (8001368 <HAL_RCC_OscConfig+0x624>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e116      	b.n	800135a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800112c:	4b8d      	ldr	r3, [pc, #564]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 800112e:	6a1b      	ldr	r3, [r3, #32]
 8001130:	2202      	movs	r2, #2
 8001132:	4013      	ands	r3, r2
 8001134:	d1f0      	bne.n	8001118 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001136:	231f      	movs	r3, #31
 8001138:	18fb      	adds	r3, r7, r3
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d105      	bne.n	800114c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001140:	4b88      	ldr	r3, [pc, #544]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 8001142:	69da      	ldr	r2, [r3, #28]
 8001144:	4b87      	ldr	r3, [pc, #540]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 8001146:	4989      	ldr	r1, [pc, #548]	; (800136c <HAL_RCC_OscConfig+0x628>)
 8001148:	400a      	ands	r2, r1
 800114a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2210      	movs	r2, #16
 8001152:	4013      	ands	r3, r2
 8001154:	d063      	beq.n	800121e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d12a      	bne.n	80011b4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800115e:	4b81      	ldr	r3, [pc, #516]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 8001160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001162:	4b80      	ldr	r3, [pc, #512]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 8001164:	2104      	movs	r1, #4
 8001166:	430a      	orrs	r2, r1
 8001168:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800116a:	4b7e      	ldr	r3, [pc, #504]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 800116c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800116e:	4b7d      	ldr	r3, [pc, #500]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 8001170:	2101      	movs	r1, #1
 8001172:	430a      	orrs	r2, r1
 8001174:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001176:	f7ff facd 	bl	8000714 <HAL_GetTick>
 800117a:	0003      	movs	r3, r0
 800117c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001180:	f7ff fac8 	bl	8000714 <HAL_GetTick>
 8001184:	0002      	movs	r2, r0
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e0e3      	b.n	800135a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001192:	4b74      	ldr	r3, [pc, #464]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 8001194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001196:	2202      	movs	r2, #2
 8001198:	4013      	ands	r3, r2
 800119a:	d0f1      	beq.n	8001180 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800119c:	4b71      	ldr	r3, [pc, #452]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 800119e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011a0:	22f8      	movs	r2, #248	; 0xf8
 80011a2:	4393      	bics	r3, r2
 80011a4:	0019      	movs	r1, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	00da      	lsls	r2, r3, #3
 80011ac:	4b6d      	ldr	r3, [pc, #436]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 80011ae:	430a      	orrs	r2, r1
 80011b0:	635a      	str	r2, [r3, #52]	; 0x34
 80011b2:	e034      	b.n	800121e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	3305      	adds	r3, #5
 80011ba:	d111      	bne.n	80011e0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80011bc:	4b69      	ldr	r3, [pc, #420]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 80011be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011c0:	4b68      	ldr	r3, [pc, #416]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 80011c2:	2104      	movs	r1, #4
 80011c4:	438a      	bics	r2, r1
 80011c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011c8:	4b66      	ldr	r3, [pc, #408]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 80011ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011cc:	22f8      	movs	r2, #248	; 0xf8
 80011ce:	4393      	bics	r3, r2
 80011d0:	0019      	movs	r1, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	00da      	lsls	r2, r3, #3
 80011d8:	4b62      	ldr	r3, [pc, #392]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 80011da:	430a      	orrs	r2, r1
 80011dc:	635a      	str	r2, [r3, #52]	; 0x34
 80011de:	e01e      	b.n	800121e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011e0:	4b60      	ldr	r3, [pc, #384]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 80011e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011e4:	4b5f      	ldr	r3, [pc, #380]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 80011e6:	2104      	movs	r1, #4
 80011e8:	430a      	orrs	r2, r1
 80011ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80011ec:	4b5d      	ldr	r3, [pc, #372]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 80011ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011f0:	4b5c      	ldr	r3, [pc, #368]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 80011f2:	2101      	movs	r1, #1
 80011f4:	438a      	bics	r2, r1
 80011f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f8:	f7ff fa8c 	bl	8000714 <HAL_GetTick>
 80011fc:	0003      	movs	r3, r0
 80011fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001202:	f7ff fa87 	bl	8000714 <HAL_GetTick>
 8001206:	0002      	movs	r2, r0
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e0a2      	b.n	800135a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001214:	4b53      	ldr	r3, [pc, #332]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 8001216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001218:	2202      	movs	r2, #2
 800121a:	4013      	ands	r3, r2
 800121c:	d1f1      	bne.n	8001202 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d100      	bne.n	8001228 <HAL_RCC_OscConfig+0x4e4>
 8001226:	e097      	b.n	8001358 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001228:	4b4e      	ldr	r3, [pc, #312]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	220c      	movs	r2, #12
 800122e:	4013      	ands	r3, r2
 8001230:	2b08      	cmp	r3, #8
 8001232:	d100      	bne.n	8001236 <HAL_RCC_OscConfig+0x4f2>
 8001234:	e06b      	b.n	800130e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a1b      	ldr	r3, [r3, #32]
 800123a:	2b02      	cmp	r3, #2
 800123c:	d14c      	bne.n	80012d8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800123e:	4b49      	ldr	r3, [pc, #292]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	4b48      	ldr	r3, [pc, #288]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 8001244:	494a      	ldr	r1, [pc, #296]	; (8001370 <HAL_RCC_OscConfig+0x62c>)
 8001246:	400a      	ands	r2, r1
 8001248:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124a:	f7ff fa63 	bl	8000714 <HAL_GetTick>
 800124e:	0003      	movs	r3, r0
 8001250:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001254:	f7ff fa5e 	bl	8000714 <HAL_GetTick>
 8001258:	0002      	movs	r2, r0
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e079      	b.n	800135a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001266:	4b3f      	ldr	r3, [pc, #252]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	2380      	movs	r3, #128	; 0x80
 800126c:	049b      	lsls	r3, r3, #18
 800126e:	4013      	ands	r3, r2
 8001270:	d1f0      	bne.n	8001254 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001272:	4b3c      	ldr	r3, [pc, #240]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 8001274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001276:	220f      	movs	r2, #15
 8001278:	4393      	bics	r3, r2
 800127a:	0019      	movs	r1, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001280:	4b38      	ldr	r3, [pc, #224]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 8001282:	430a      	orrs	r2, r1
 8001284:	62da      	str	r2, [r3, #44]	; 0x2c
 8001286:	4b37      	ldr	r3, [pc, #220]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	4a3a      	ldr	r2, [pc, #232]	; (8001374 <HAL_RCC_OscConfig+0x630>)
 800128c:	4013      	ands	r3, r2
 800128e:	0019      	movs	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001298:	431a      	orrs	r2, r3
 800129a:	4b32      	ldr	r3, [pc, #200]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 800129c:	430a      	orrs	r2, r1
 800129e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012a0:	4b30      	ldr	r3, [pc, #192]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b2f      	ldr	r3, [pc, #188]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 80012a6:	2180      	movs	r1, #128	; 0x80
 80012a8:	0449      	lsls	r1, r1, #17
 80012aa:	430a      	orrs	r2, r1
 80012ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ae:	f7ff fa31 	bl	8000714 <HAL_GetTick>
 80012b2:	0003      	movs	r3, r0
 80012b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b8:	f7ff fa2c 	bl	8000714 <HAL_GetTick>
 80012bc:	0002      	movs	r2, r0
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e047      	b.n	800135a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012ca:	4b26      	ldr	r3, [pc, #152]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	2380      	movs	r3, #128	; 0x80
 80012d0:	049b      	lsls	r3, r3, #18
 80012d2:	4013      	ands	r3, r2
 80012d4:	d0f0      	beq.n	80012b8 <HAL_RCC_OscConfig+0x574>
 80012d6:	e03f      	b.n	8001358 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012d8:	4b22      	ldr	r3, [pc, #136]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b21      	ldr	r3, [pc, #132]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 80012de:	4924      	ldr	r1, [pc, #144]	; (8001370 <HAL_RCC_OscConfig+0x62c>)
 80012e0:	400a      	ands	r2, r1
 80012e2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e4:	f7ff fa16 	bl	8000714 <HAL_GetTick>
 80012e8:	0003      	movs	r3, r0
 80012ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ee:	f7ff fa11 	bl	8000714 <HAL_GetTick>
 80012f2:	0002      	movs	r2, r0
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e02c      	b.n	800135a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	049b      	lsls	r3, r3, #18
 8001308:	4013      	ands	r3, r2
 800130a:	d1f0      	bne.n	80012ee <HAL_RCC_OscConfig+0x5aa>
 800130c:	e024      	b.n	8001358 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a1b      	ldr	r3, [r3, #32]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d101      	bne.n	800131a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e01f      	b.n	800135a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800131a:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001320:	4b10      	ldr	r3, [pc, #64]	; (8001364 <HAL_RCC_OscConfig+0x620>)
 8001322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001324:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	025b      	lsls	r3, r3, #9
 800132c:	401a      	ands	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001332:	429a      	cmp	r2, r3
 8001334:	d10e      	bne.n	8001354 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	220f      	movs	r2, #15
 800133a:	401a      	ands	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001340:	429a      	cmp	r2, r3
 8001342:	d107      	bne.n	8001354 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	23f0      	movs	r3, #240	; 0xf0
 8001348:	039b      	lsls	r3, r3, #14
 800134a:	401a      	ands	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001350:	429a      	cmp	r2, r3
 8001352:	d001      	beq.n	8001358 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e000      	b.n	800135a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	0018      	movs	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	b008      	add	sp, #32
 8001360:	bd80      	pop	{r7, pc}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	40021000 	.word	0x40021000
 8001368:	00001388 	.word	0x00001388
 800136c:	efffffff 	.word	0xefffffff
 8001370:	feffffff 	.word	0xfeffffff
 8001374:	ffc2ffff 	.word	0xffc2ffff

08001378 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d101      	bne.n	800138c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e0b3      	b.n	80014f4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800138c:	4b5b      	ldr	r3, [pc, #364]	; (80014fc <HAL_RCC_ClockConfig+0x184>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2201      	movs	r2, #1
 8001392:	4013      	ands	r3, r2
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	d911      	bls.n	80013be <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139a:	4b58      	ldr	r3, [pc, #352]	; (80014fc <HAL_RCC_ClockConfig+0x184>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2201      	movs	r2, #1
 80013a0:	4393      	bics	r3, r2
 80013a2:	0019      	movs	r1, r3
 80013a4:	4b55      	ldr	r3, [pc, #340]	; (80014fc <HAL_RCC_ClockConfig+0x184>)
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ac:	4b53      	ldr	r3, [pc, #332]	; (80014fc <HAL_RCC_ClockConfig+0x184>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2201      	movs	r2, #1
 80013b2:	4013      	ands	r3, r2
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d001      	beq.n	80013be <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e09a      	b.n	80014f4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2202      	movs	r2, #2
 80013c4:	4013      	ands	r3, r2
 80013c6:	d015      	beq.n	80013f4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2204      	movs	r2, #4
 80013ce:	4013      	ands	r3, r2
 80013d0:	d006      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013d2:	4b4b      	ldr	r3, [pc, #300]	; (8001500 <HAL_RCC_ClockConfig+0x188>)
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	4b4a      	ldr	r3, [pc, #296]	; (8001500 <HAL_RCC_ClockConfig+0x188>)
 80013d8:	21e0      	movs	r1, #224	; 0xe0
 80013da:	00c9      	lsls	r1, r1, #3
 80013dc:	430a      	orrs	r2, r1
 80013de:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013e0:	4b47      	ldr	r3, [pc, #284]	; (8001500 <HAL_RCC_ClockConfig+0x188>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	22f0      	movs	r2, #240	; 0xf0
 80013e6:	4393      	bics	r3, r2
 80013e8:	0019      	movs	r1, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	4b44      	ldr	r3, [pc, #272]	; (8001500 <HAL_RCC_ClockConfig+0x188>)
 80013f0:	430a      	orrs	r2, r1
 80013f2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2201      	movs	r2, #1
 80013fa:	4013      	ands	r3, r2
 80013fc:	d040      	beq.n	8001480 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d107      	bne.n	8001416 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001406:	4b3e      	ldr	r3, [pc, #248]	; (8001500 <HAL_RCC_ClockConfig+0x188>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	029b      	lsls	r3, r3, #10
 800140e:	4013      	ands	r3, r2
 8001410:	d114      	bne.n	800143c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e06e      	b.n	80014f4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b02      	cmp	r3, #2
 800141c:	d107      	bne.n	800142e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800141e:	4b38      	ldr	r3, [pc, #224]	; (8001500 <HAL_RCC_ClockConfig+0x188>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	2380      	movs	r3, #128	; 0x80
 8001424:	049b      	lsls	r3, r3, #18
 8001426:	4013      	ands	r3, r2
 8001428:	d108      	bne.n	800143c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e062      	b.n	80014f4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800142e:	4b34      	ldr	r3, [pc, #208]	; (8001500 <HAL_RCC_ClockConfig+0x188>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2202      	movs	r2, #2
 8001434:	4013      	ands	r3, r2
 8001436:	d101      	bne.n	800143c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e05b      	b.n	80014f4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800143c:	4b30      	ldr	r3, [pc, #192]	; (8001500 <HAL_RCC_ClockConfig+0x188>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2203      	movs	r2, #3
 8001442:	4393      	bics	r3, r2
 8001444:	0019      	movs	r1, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	4b2d      	ldr	r3, [pc, #180]	; (8001500 <HAL_RCC_ClockConfig+0x188>)
 800144c:	430a      	orrs	r2, r1
 800144e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001450:	f7ff f960 	bl	8000714 <HAL_GetTick>
 8001454:	0003      	movs	r3, r0
 8001456:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001458:	e009      	b.n	800146e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800145a:	f7ff f95b 	bl	8000714 <HAL_GetTick>
 800145e:	0002      	movs	r2, r0
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	4a27      	ldr	r2, [pc, #156]	; (8001504 <HAL_RCC_ClockConfig+0x18c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d901      	bls.n	800146e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e042      	b.n	80014f4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146e:	4b24      	ldr	r3, [pc, #144]	; (8001500 <HAL_RCC_ClockConfig+0x188>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	220c      	movs	r2, #12
 8001474:	401a      	ands	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	429a      	cmp	r2, r3
 800147e:	d1ec      	bne.n	800145a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001480:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <HAL_RCC_ClockConfig+0x184>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2201      	movs	r2, #1
 8001486:	4013      	ands	r3, r2
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	429a      	cmp	r2, r3
 800148c:	d211      	bcs.n	80014b2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800148e:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <HAL_RCC_ClockConfig+0x184>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2201      	movs	r2, #1
 8001494:	4393      	bics	r3, r2
 8001496:	0019      	movs	r1, r3
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <HAL_RCC_ClockConfig+0x184>)
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	430a      	orrs	r2, r1
 800149e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a0:	4b16      	ldr	r3, [pc, #88]	; (80014fc <HAL_RCC_ClockConfig+0x184>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2201      	movs	r2, #1
 80014a6:	4013      	ands	r3, r2
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d001      	beq.n	80014b2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e020      	b.n	80014f4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2204      	movs	r2, #4
 80014b8:	4013      	ands	r3, r2
 80014ba:	d009      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80014bc:	4b10      	ldr	r3, [pc, #64]	; (8001500 <HAL_RCC_ClockConfig+0x188>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	4a11      	ldr	r2, [pc, #68]	; (8001508 <HAL_RCC_ClockConfig+0x190>)
 80014c2:	4013      	ands	r3, r2
 80014c4:	0019      	movs	r1, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68da      	ldr	r2, [r3, #12]
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <HAL_RCC_ClockConfig+0x188>)
 80014cc:	430a      	orrs	r2, r1
 80014ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80014d0:	f000 f820 	bl	8001514 <HAL_RCC_GetSysClockFreq>
 80014d4:	0001      	movs	r1, r0
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <HAL_RCC_ClockConfig+0x188>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	091b      	lsrs	r3, r3, #4
 80014dc:	220f      	movs	r2, #15
 80014de:	4013      	ands	r3, r2
 80014e0:	4a0a      	ldr	r2, [pc, #40]	; (800150c <HAL_RCC_ClockConfig+0x194>)
 80014e2:	5cd3      	ldrb	r3, [r2, r3]
 80014e4:	000a      	movs	r2, r1
 80014e6:	40da      	lsrs	r2, r3
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_RCC_ClockConfig+0x198>)
 80014ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80014ec:	2003      	movs	r0, #3
 80014ee:	f7ff f8cb 	bl	8000688 <HAL_InitTick>
  
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	0018      	movs	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b004      	add	sp, #16
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40022000 	.word	0x40022000
 8001500:	40021000 	.word	0x40021000
 8001504:	00001388 	.word	0x00001388
 8001508:	fffff8ff 	.word	0xfffff8ff
 800150c:	080034fc 	.word	0x080034fc
 8001510:	20000000 	.word	0x20000000

08001514 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800152e:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	220c      	movs	r2, #12
 8001538:	4013      	ands	r3, r2
 800153a:	2b04      	cmp	r3, #4
 800153c:	d002      	beq.n	8001544 <HAL_RCC_GetSysClockFreq+0x30>
 800153e:	2b08      	cmp	r3, #8
 8001540:	d003      	beq.n	800154a <HAL_RCC_GetSysClockFreq+0x36>
 8001542:	e02c      	b.n	800159e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001546:	613b      	str	r3, [r7, #16]
      break;
 8001548:	e02c      	b.n	80015a4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	0c9b      	lsrs	r3, r3, #18
 800154e:	220f      	movs	r2, #15
 8001550:	4013      	ands	r3, r2
 8001552:	4a19      	ldr	r2, [pc, #100]	; (80015b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001554:	5cd3      	ldrb	r3, [r2, r3]
 8001556:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155c:	220f      	movs	r2, #15
 800155e:	4013      	ands	r3, r2
 8001560:	4a16      	ldr	r2, [pc, #88]	; (80015bc <HAL_RCC_GetSysClockFreq+0xa8>)
 8001562:	5cd3      	ldrb	r3, [r2, r3]
 8001564:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	2380      	movs	r3, #128	; 0x80
 800156a:	025b      	lsls	r3, r3, #9
 800156c:	4013      	ands	r3, r2
 800156e:	d009      	beq.n	8001584 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001570:	68b9      	ldr	r1, [r7, #8]
 8001572:	4810      	ldr	r0, [pc, #64]	; (80015b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001574:	f7fe fdda 	bl	800012c <__udivsi3>
 8001578:	0003      	movs	r3, r0
 800157a:	001a      	movs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4353      	muls	r3, r2
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	e009      	b.n	8001598 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	000a      	movs	r2, r1
 8001588:	0152      	lsls	r2, r2, #5
 800158a:	1a52      	subs	r2, r2, r1
 800158c:	0193      	lsls	r3, r2, #6
 800158e:	1a9b      	subs	r3, r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	185b      	adds	r3, r3, r1
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	613b      	str	r3, [r7, #16]
      break;
 800159c:	e002      	b.n	80015a4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800159e:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015a0:	613b      	str	r3, [r7, #16]
      break;
 80015a2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80015a4:	693b      	ldr	r3, [r7, #16]
}
 80015a6:	0018      	movs	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b006      	add	sp, #24
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	40021000 	.word	0x40021000
 80015b4:	007a1200 	.word	0x007a1200
 80015b8:	08003514 	.word	0x08003514
 80015bc:	08003524 	.word	0x08003524

080015c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015c4:	4b02      	ldr	r3, [pc, #8]	; (80015d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	0018      	movs	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	20000000 	.word	0x20000000

080015d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80015d8:	f7ff fff2 	bl	80015c0 <HAL_RCC_GetHCLKFreq>
 80015dc:	0001      	movs	r1, r0
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	0a1b      	lsrs	r3, r3, #8
 80015e4:	2207      	movs	r2, #7
 80015e6:	4013      	ands	r3, r2
 80015e8:	4a04      	ldr	r2, [pc, #16]	; (80015fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80015ea:	5cd3      	ldrb	r3, [r2, r3]
 80015ec:	40d9      	lsrs	r1, r3
 80015ee:	000b      	movs	r3, r1
}    
 80015f0:	0018      	movs	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	40021000 	.word	0x40021000
 80015fc:	0800350c 	.word	0x0800350c

08001600 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001608:	2300      	movs	r3, #0
 800160a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	025b      	lsls	r3, r3, #9
 8001618:	4013      	ands	r3, r2
 800161a:	d100      	bne.n	800161e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800161c:	e08e      	b.n	800173c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800161e:	2017      	movs	r0, #23
 8001620:	183b      	adds	r3, r7, r0
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001626:	4b57      	ldr	r3, [pc, #348]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001628:	69da      	ldr	r2, [r3, #28]
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	055b      	lsls	r3, r3, #21
 800162e:	4013      	ands	r3, r2
 8001630:	d110      	bne.n	8001654 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001632:	4b54      	ldr	r3, [pc, #336]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001634:	69da      	ldr	r2, [r3, #28]
 8001636:	4b53      	ldr	r3, [pc, #332]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001638:	2180      	movs	r1, #128	; 0x80
 800163a:	0549      	lsls	r1, r1, #21
 800163c:	430a      	orrs	r2, r1
 800163e:	61da      	str	r2, [r3, #28]
 8001640:	4b50      	ldr	r3, [pc, #320]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001642:	69da      	ldr	r2, [r3, #28]
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	055b      	lsls	r3, r3, #21
 8001648:	4013      	ands	r3, r2
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800164e:	183b      	adds	r3, r7, r0
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001654:	4b4c      	ldr	r3, [pc, #304]	; (8001788 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4013      	ands	r3, r2
 800165e:	d11a      	bne.n	8001696 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001660:	4b49      	ldr	r3, [pc, #292]	; (8001788 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b48      	ldr	r3, [pc, #288]	; (8001788 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001666:	2180      	movs	r1, #128	; 0x80
 8001668:	0049      	lsls	r1, r1, #1
 800166a:	430a      	orrs	r2, r1
 800166c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800166e:	f7ff f851 	bl	8000714 <HAL_GetTick>
 8001672:	0003      	movs	r3, r0
 8001674:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001676:	e008      	b.n	800168a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001678:	f7ff f84c 	bl	8000714 <HAL_GetTick>
 800167c:	0002      	movs	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	; 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e077      	b.n	800177a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168a:	4b3f      	ldr	r3, [pc, #252]	; (8001788 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4013      	ands	r3, r2
 8001694:	d0f0      	beq.n	8001678 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001696:	4b3b      	ldr	r3, [pc, #236]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001698:	6a1a      	ldr	r2, [r3, #32]
 800169a:	23c0      	movs	r3, #192	; 0xc0
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4013      	ands	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d034      	beq.n	8001712 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	23c0      	movs	r3, #192	; 0xc0
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4013      	ands	r3, r2
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d02c      	beq.n	8001712 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016b8:	4b32      	ldr	r3, [pc, #200]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	4a33      	ldr	r2, [pc, #204]	; (800178c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80016be:	4013      	ands	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80016c2:	4b30      	ldr	r3, [pc, #192]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016c4:	6a1a      	ldr	r2, [r3, #32]
 80016c6:	4b2f      	ldr	r3, [pc, #188]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016c8:	2180      	movs	r1, #128	; 0x80
 80016ca:	0249      	lsls	r1, r1, #9
 80016cc:	430a      	orrs	r2, r1
 80016ce:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016d0:	4b2c      	ldr	r3, [pc, #176]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016d2:	6a1a      	ldr	r2, [r3, #32]
 80016d4:	4b2b      	ldr	r3, [pc, #172]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016d6:	492e      	ldr	r1, [pc, #184]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80016d8:	400a      	ands	r2, r1
 80016da:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80016dc:	4b29      	ldr	r3, [pc, #164]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2201      	movs	r2, #1
 80016e6:	4013      	ands	r3, r2
 80016e8:	d013      	beq.n	8001712 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ea:	f7ff f813 	bl	8000714 <HAL_GetTick>
 80016ee:	0003      	movs	r3, r0
 80016f0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f2:	e009      	b.n	8001708 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f4:	f7ff f80e 	bl	8000714 <HAL_GetTick>
 80016f8:	0002      	movs	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	4a25      	ldr	r2, [pc, #148]	; (8001794 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d901      	bls.n	8001708 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e038      	b.n	800177a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001708:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	2202      	movs	r2, #2
 800170e:	4013      	ands	r3, r2
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001712:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	4a1d      	ldr	r2, [pc, #116]	; (800178c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001718:	4013      	ands	r3, r2
 800171a:	0019      	movs	r1, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001722:	430a      	orrs	r2, r1
 8001724:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001726:	2317      	movs	r3, #23
 8001728:	18fb      	adds	r3, r7, r3
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d105      	bne.n	800173c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001730:	4b14      	ldr	r3, [pc, #80]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001732:	69da      	ldr	r2, [r3, #28]
 8001734:	4b13      	ldr	r3, [pc, #76]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001736:	4918      	ldr	r1, [pc, #96]	; (8001798 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001738:	400a      	ands	r2, r1
 800173a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2201      	movs	r2, #1
 8001742:	4013      	ands	r3, r2
 8001744:	d009      	beq.n	800175a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001746:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	2203      	movs	r2, #3
 800174c:	4393      	bics	r3, r2
 800174e:	0019      	movs	r1, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001756:	430a      	orrs	r2, r1
 8001758:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2220      	movs	r2, #32
 8001760:	4013      	ands	r3, r2
 8001762:	d009      	beq.n	8001778 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001764:	4b07      	ldr	r3, [pc, #28]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	2210      	movs	r2, #16
 800176a:	4393      	bics	r3, r2
 800176c:	0019      	movs	r1, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	4b04      	ldr	r3, [pc, #16]	; (8001784 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001774:	430a      	orrs	r2, r1
 8001776:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	0018      	movs	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	b006      	add	sp, #24
 8001780:	bd80      	pop	{r7, pc}
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	40021000 	.word	0x40021000
 8001788:	40007000 	.word	0x40007000
 800178c:	fffffcff 	.word	0xfffffcff
 8001790:	fffeffff 	.word	0xfffeffff
 8001794:	00001388 	.word	0x00001388
 8001798:	efffffff 	.word	0xefffffff

0800179c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e044      	b.n	8001838 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d107      	bne.n	80017c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2278      	movs	r2, #120	; 0x78
 80017ba:	2100      	movs	r1, #0
 80017bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	0018      	movs	r0, r3
 80017c2:	f7fe fe6d 	bl	80004a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2224      	movs	r2, #36	; 0x24
 80017ca:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2101      	movs	r1, #1
 80017d8:	438a      	bics	r2, r1
 80017da:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	0018      	movs	r0, r3
 80017e0:	f000 fc14 	bl	800200c <UART_SetConfig>
 80017e4:	0003      	movs	r3, r0
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d101      	bne.n	80017ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e024      	b.n	8001838 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	0018      	movs	r0, r3
 80017fa:	f000 fd2f 	bl	800225c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	490d      	ldr	r1, [pc, #52]	; (8001840 <HAL_UART_Init+0xa4>)
 800180a:	400a      	ands	r2, r1
 800180c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2108      	movs	r1, #8
 800181a:	438a      	bics	r2, r1
 800181c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2101      	movs	r1, #1
 800182a:	430a      	orrs	r2, r1
 800182c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	0018      	movs	r0, r3
 8001832:	f000 fdc7 	bl	80023c4 <UART_CheckIdleState>
 8001836:	0003      	movs	r3, r0
}
 8001838:	0018      	movs	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	b002      	add	sp, #8
 800183e:	bd80      	pop	{r7, pc}
 8001840:	fffff7ff 	.word	0xfffff7ff

08001844 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af02      	add	r7, sp, #8
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	1dbb      	adds	r3, r7, #6
 8001852:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001858:	2b20      	cmp	r3, #32
 800185a:	d000      	beq.n	800185e <HAL_UART_Transmit+0x1a>
 800185c:	e08d      	b.n	800197a <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_UART_Transmit+0x28>
 8001864:	1dbb      	adds	r3, r7, #6
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e085      	b.n	800197c <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	015b      	lsls	r3, r3, #5
 8001878:	429a      	cmp	r2, r3
 800187a:	d109      	bne.n	8001890 <HAL_UART_Transmit+0x4c>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d105      	bne.n	8001890 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2201      	movs	r2, #1
 8001888:	4013      	ands	r3, r2
 800188a:	d001      	beq.n	8001890 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e075      	b.n	800197c <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2284      	movs	r2, #132	; 0x84
 8001894:	2100      	movs	r1, #0
 8001896:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2221      	movs	r2, #33	; 0x21
 800189c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800189e:	f7fe ff39 	bl	8000714 <HAL_GetTick>
 80018a2:	0003      	movs	r3, r0
 80018a4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	1dba      	adds	r2, r7, #6
 80018aa:	2150      	movs	r1, #80	; 0x50
 80018ac:	8812      	ldrh	r2, [r2, #0]
 80018ae:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	1dba      	adds	r2, r7, #6
 80018b4:	2152      	movs	r1, #82	; 0x52
 80018b6:	8812      	ldrh	r2, [r2, #0]
 80018b8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	689a      	ldr	r2, [r3, #8]
 80018be:	2380      	movs	r3, #128	; 0x80
 80018c0:	015b      	lsls	r3, r3, #5
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d108      	bne.n	80018d8 <HAL_UART_Transmit+0x94>
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d104      	bne.n	80018d8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	61bb      	str	r3, [r7, #24]
 80018d6:	e003      	b.n	80018e0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80018e0:	e030      	b.n	8001944 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	0013      	movs	r3, r2
 80018ec:	2200      	movs	r2, #0
 80018ee:	2180      	movs	r1, #128	; 0x80
 80018f0:	f000 fe10 	bl	8002514 <UART_WaitOnFlagUntilTimeout>
 80018f4:	1e03      	subs	r3, r0, #0
 80018f6:	d004      	beq.n	8001902 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2220      	movs	r2, #32
 80018fc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e03c      	b.n	800197c <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d10b      	bne.n	8001920 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	881a      	ldrh	r2, [r3, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	05d2      	lsls	r2, r2, #23
 8001912:	0dd2      	lsrs	r2, r2, #23
 8001914:	b292      	uxth	r2, r2
 8001916:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	3302      	adds	r3, #2
 800191c:	61bb      	str	r3, [r7, #24]
 800191e:	e008      	b.n	8001932 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	781a      	ldrb	r2, [r3, #0]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	b292      	uxth	r2, r2
 800192a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	3301      	adds	r3, #1
 8001930:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2252      	movs	r2, #82	; 0x52
 8001936:	5a9b      	ldrh	r3, [r3, r2]
 8001938:	b29b      	uxth	r3, r3
 800193a:	3b01      	subs	r3, #1
 800193c:	b299      	uxth	r1, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2252      	movs	r2, #82	; 0x52
 8001942:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2252      	movs	r2, #82	; 0x52
 8001948:	5a9b      	ldrh	r3, [r3, r2]
 800194a:	b29b      	uxth	r3, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1c8      	bne.n	80018e2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	0013      	movs	r3, r2
 800195a:	2200      	movs	r2, #0
 800195c:	2140      	movs	r1, #64	; 0x40
 800195e:	f000 fdd9 	bl	8002514 <UART_WaitOnFlagUntilTimeout>
 8001962:	1e03      	subs	r3, r0, #0
 8001964:	d004      	beq.n	8001970 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2220      	movs	r2, #32
 800196a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e005      	b.n	800197c <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2220      	movs	r2, #32
 8001974:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	e000      	b.n	800197c <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800197a:	2302      	movs	r3, #2
  }
}
 800197c:	0018      	movs	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	b008      	add	sp, #32
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	1dbb      	adds	r3, r7, #6
 8001990:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2280      	movs	r2, #128	; 0x80
 8001996:	589b      	ldr	r3, [r3, r2]
 8001998:	2b20      	cmp	r3, #32
 800199a:	d145      	bne.n	8001a28 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_UART_Receive_IT+0x26>
 80019a2:	1dbb      	adds	r3, r7, #6
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e03d      	b.n	8001a2a <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	2380      	movs	r3, #128	; 0x80
 80019b4:	015b      	lsls	r3, r3, #5
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d109      	bne.n	80019ce <HAL_UART_Receive_IT+0x4a>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d105      	bne.n	80019ce <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	2201      	movs	r2, #1
 80019c6:	4013      	ands	r3, r2
 80019c8:	d001      	beq.n	80019ce <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e02d      	b.n	8001a2a <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2200      	movs	r2, #0
 80019d2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	041b      	lsls	r3, r3, #16
 80019de:	4013      	ands	r3, r2
 80019e0:	d019      	beq.n	8001a16 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019e2:	f3ef 8310 	mrs	r3, PRIMASK
 80019e6:	613b      	str	r3, [r7, #16]
  return(result);
 80019e8:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80019ea:	61fb      	str	r3, [r7, #28]
 80019ec:	2301      	movs	r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f383 8810 	msr	PRIMASK, r3
}
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2180      	movs	r1, #128	; 0x80
 8001a04:	04c9      	lsls	r1, r1, #19
 8001a06:	430a      	orrs	r2, r1
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	f383 8810 	msr	PRIMASK, r3
}
 8001a14:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001a16:	1dbb      	adds	r3, r7, #6
 8001a18:	881a      	ldrh	r2, [r3, #0]
 8001a1a:	68b9      	ldr	r1, [r7, #8]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f000 fde2 	bl	80025e8 <UART_Start_Receive_IT>
 8001a24:	0003      	movs	r3, r0
 8001a26:	e000      	b.n	8001a2a <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8001a28:	2302      	movs	r3, #2
  }
}
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	b008      	add	sp, #32
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b0ab      	sub	sp, #172	; 0xac
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	22a4      	movs	r2, #164	; 0xa4
 8001a44:	18b9      	adds	r1, r7, r2
 8001a46:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	20a0      	movs	r0, #160	; 0xa0
 8001a50:	1839      	adds	r1, r7, r0
 8001a52:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	219c      	movs	r1, #156	; 0x9c
 8001a5c:	1879      	adds	r1, r7, r1
 8001a5e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001a60:	0011      	movs	r1, r2
 8001a62:	18bb      	adds	r3, r7, r2
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a99      	ldr	r2, [pc, #612]	; (8001ccc <HAL_UART_IRQHandler+0x298>)
 8001a68:	4013      	ands	r3, r2
 8001a6a:	2298      	movs	r2, #152	; 0x98
 8001a6c:	18bc      	adds	r4, r7, r2
 8001a6e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001a70:	18bb      	adds	r3, r7, r2
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d114      	bne.n	8001aa2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001a78:	187b      	adds	r3, r7, r1
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2220      	movs	r2, #32
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d00f      	beq.n	8001aa2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001a82:	183b      	adds	r3, r7, r0
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2220      	movs	r2, #32
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d00a      	beq.n	8001aa2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d100      	bne.n	8001a96 <HAL_UART_IRQHandler+0x62>
 8001a94:	e286      	b.n	8001fa4 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	0010      	movs	r0, r2
 8001a9e:	4798      	blx	r3
      }
      return;
 8001aa0:	e280      	b.n	8001fa4 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001aa2:	2398      	movs	r3, #152	; 0x98
 8001aa4:	18fb      	adds	r3, r7, r3
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d100      	bne.n	8001aae <HAL_UART_IRQHandler+0x7a>
 8001aac:	e114      	b.n	8001cd8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001aae:	239c      	movs	r3, #156	; 0x9c
 8001ab0:	18fb      	adds	r3, r7, r3
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d106      	bne.n	8001ac8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001aba:	23a0      	movs	r3, #160	; 0xa0
 8001abc:	18fb      	adds	r3, r7, r3
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a83      	ldr	r2, [pc, #524]	; (8001cd0 <HAL_UART_IRQHandler+0x29c>)
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d100      	bne.n	8001ac8 <HAL_UART_IRQHandler+0x94>
 8001ac6:	e107      	b.n	8001cd8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001ac8:	23a4      	movs	r3, #164	; 0xa4
 8001aca:	18fb      	adds	r3, r7, r3
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d012      	beq.n	8001afa <HAL_UART_IRQHandler+0xc6>
 8001ad4:	23a0      	movs	r3, #160	; 0xa0
 8001ad6:	18fb      	adds	r3, r7, r3
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d00b      	beq.n	8001afa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2284      	movs	r2, #132	; 0x84
 8001aee:	589b      	ldr	r3, [r3, r2]
 8001af0:	2201      	movs	r2, #1
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2184      	movs	r1, #132	; 0x84
 8001af8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001afa:	23a4      	movs	r3, #164	; 0xa4
 8001afc:	18fb      	adds	r3, r7, r3
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2202      	movs	r2, #2
 8001b02:	4013      	ands	r3, r2
 8001b04:	d011      	beq.n	8001b2a <HAL_UART_IRQHandler+0xf6>
 8001b06:	239c      	movs	r3, #156	; 0x9c
 8001b08:	18fb      	adds	r3, r7, r3
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d00b      	beq.n	8001b2a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2202      	movs	r2, #2
 8001b18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2284      	movs	r2, #132	; 0x84
 8001b1e:	589b      	ldr	r3, [r3, r2]
 8001b20:	2204      	movs	r2, #4
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2184      	movs	r1, #132	; 0x84
 8001b28:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001b2a:	23a4      	movs	r3, #164	; 0xa4
 8001b2c:	18fb      	adds	r3, r7, r3
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2204      	movs	r2, #4
 8001b32:	4013      	ands	r3, r2
 8001b34:	d011      	beq.n	8001b5a <HAL_UART_IRQHandler+0x126>
 8001b36:	239c      	movs	r3, #156	; 0x9c
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d00b      	beq.n	8001b5a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2204      	movs	r2, #4
 8001b48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2284      	movs	r2, #132	; 0x84
 8001b4e:	589b      	ldr	r3, [r3, r2]
 8001b50:	2202      	movs	r2, #2
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2184      	movs	r1, #132	; 0x84
 8001b58:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001b5a:	23a4      	movs	r3, #164	; 0xa4
 8001b5c:	18fb      	adds	r3, r7, r3
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2208      	movs	r2, #8
 8001b62:	4013      	ands	r3, r2
 8001b64:	d017      	beq.n	8001b96 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001b66:	23a0      	movs	r3, #160	; 0xa0
 8001b68:	18fb      	adds	r3, r7, r3
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2220      	movs	r2, #32
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d105      	bne.n	8001b7e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001b72:	239c      	movs	r3, #156	; 0x9c
 8001b74:	18fb      	adds	r3, r7, r3
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001b7c:	d00b      	beq.n	8001b96 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2208      	movs	r2, #8
 8001b84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2284      	movs	r2, #132	; 0x84
 8001b8a:	589b      	ldr	r3, [r3, r2]
 8001b8c:	2208      	movs	r2, #8
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2184      	movs	r1, #132	; 0x84
 8001b94:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001b96:	23a4      	movs	r3, #164	; 0xa4
 8001b98:	18fb      	adds	r3, r7, r3
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	2380      	movs	r3, #128	; 0x80
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d013      	beq.n	8001bcc <HAL_UART_IRQHandler+0x198>
 8001ba4:	23a0      	movs	r3, #160	; 0xa0
 8001ba6:	18fb      	adds	r3, r7, r3
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	2380      	movs	r3, #128	; 0x80
 8001bac:	04db      	lsls	r3, r3, #19
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d00c      	beq.n	8001bcc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2280      	movs	r2, #128	; 0x80
 8001bb8:	0112      	lsls	r2, r2, #4
 8001bba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2284      	movs	r2, #132	; 0x84
 8001bc0:	589b      	ldr	r3, [r3, r2]
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2184      	movs	r1, #132	; 0x84
 8001bca:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2284      	movs	r2, #132	; 0x84
 8001bd0:	589b      	ldr	r3, [r3, r2]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d100      	bne.n	8001bd8 <HAL_UART_IRQHandler+0x1a4>
 8001bd6:	e1e7      	b.n	8001fa8 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001bd8:	23a4      	movs	r3, #164	; 0xa4
 8001bda:	18fb      	adds	r3, r7, r3
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2220      	movs	r2, #32
 8001be0:	4013      	ands	r3, r2
 8001be2:	d00e      	beq.n	8001c02 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001be4:	23a0      	movs	r3, #160	; 0xa0
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2220      	movs	r2, #32
 8001bec:	4013      	ands	r3, r2
 8001bee:	d008      	beq.n	8001c02 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d004      	beq.n	8001c02 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	0010      	movs	r0, r2
 8001c00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2284      	movs	r2, #132	; 0x84
 8001c06:	589b      	ldr	r3, [r3, r2]
 8001c08:	2194      	movs	r1, #148	; 0x94
 8001c0a:	187a      	adds	r2, r7, r1
 8001c0c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2240      	movs	r2, #64	; 0x40
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b40      	cmp	r3, #64	; 0x40
 8001c1a:	d004      	beq.n	8001c26 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001c1c:	187b      	adds	r3, r7, r1
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2228      	movs	r2, #40	; 0x28
 8001c22:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001c24:	d047      	beq.n	8001cb6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f000 fd93 	bl	8002754 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	2240      	movs	r2, #64	; 0x40
 8001c36:	4013      	ands	r3, r2
 8001c38:	2b40      	cmp	r3, #64	; 0x40
 8001c3a:	d137      	bne.n	8001cac <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c3c:	f3ef 8310 	mrs	r3, PRIMASK
 8001c40:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8001c42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c44:	2090      	movs	r0, #144	; 0x90
 8001c46:	183a      	adds	r2, r7, r0
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c50:	f383 8810 	msr	PRIMASK, r3
}
 8001c54:	46c0      	nop			; (mov r8, r8)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2140      	movs	r1, #64	; 0x40
 8001c62:	438a      	bics	r2, r1
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	183b      	adds	r3, r7, r0
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c6e:	f383 8810 	msr	PRIMASK, r3
}
 8001c72:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d012      	beq.n	8001ca2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c80:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <HAL_UART_IRQHandler+0x2a0>)
 8001c82:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f7fe fe87 	bl	800099c <HAL_DMA_Abort_IT>
 8001c8e:	1e03      	subs	r3, r0, #0
 8001c90:	d01a      	beq.n	8001cc8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ca0:	e012      	b.n	8001cc8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f000 f99d 	bl	8001fe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001caa:	e00d      	b.n	8001cc8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f000 f998 	bl	8001fe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cb4:	e008      	b.n	8001cc8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f000 f993 	bl	8001fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2284      	movs	r2, #132	; 0x84
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001cc6:	e16f      	b.n	8001fa8 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cc8:	46c0      	nop			; (mov r8, r8)
    return;
 8001cca:	e16d      	b.n	8001fa8 <HAL_UART_IRQHandler+0x574>
 8001ccc:	0000080f 	.word	0x0000080f
 8001cd0:	04000120 	.word	0x04000120
 8001cd4:	0800281d 	.word	0x0800281d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d000      	beq.n	8001ce2 <HAL_UART_IRQHandler+0x2ae>
 8001ce0:	e139      	b.n	8001f56 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001ce2:	23a4      	movs	r3, #164	; 0xa4
 8001ce4:	18fb      	adds	r3, r7, r3
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2210      	movs	r2, #16
 8001cea:	4013      	ands	r3, r2
 8001cec:	d100      	bne.n	8001cf0 <HAL_UART_IRQHandler+0x2bc>
 8001cee:	e132      	b.n	8001f56 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001cf0:	23a0      	movs	r3, #160	; 0xa0
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2210      	movs	r2, #16
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d100      	bne.n	8001cfe <HAL_UART_IRQHandler+0x2ca>
 8001cfc:	e12b      	b.n	8001f56 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2210      	movs	r2, #16
 8001d04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2240      	movs	r2, #64	; 0x40
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b40      	cmp	r3, #64	; 0x40
 8001d12:	d000      	beq.n	8001d16 <HAL_UART_IRQHandler+0x2e2>
 8001d14:	e09f      	b.n	8001e56 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	217e      	movs	r1, #126	; 0x7e
 8001d20:	187b      	adds	r3, r7, r1
 8001d22:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8001d24:	187b      	adds	r3, r7, r1
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d100      	bne.n	8001d2e <HAL_UART_IRQHandler+0x2fa>
 8001d2c:	e13e      	b.n	8001fac <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2258      	movs	r2, #88	; 0x58
 8001d32:	5a9b      	ldrh	r3, [r3, r2]
 8001d34:	187a      	adds	r2, r7, r1
 8001d36:	8812      	ldrh	r2, [r2, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d300      	bcc.n	8001d3e <HAL_UART_IRQHandler+0x30a>
 8001d3c:	e136      	b.n	8001fac <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	187a      	adds	r2, r7, r1
 8001d42:	215a      	movs	r1, #90	; 0x5a
 8001d44:	8812      	ldrh	r2, [r2, #0]
 8001d46:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	2b20      	cmp	r3, #32
 8001d50:	d06f      	beq.n	8001e32 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d52:	f3ef 8310 	mrs	r3, PRIMASK
 8001d56:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8001d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d62:	f383 8810 	msr	PRIMASK, r3
}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4992      	ldr	r1, [pc, #584]	; (8001fbc <HAL_UART_IRQHandler+0x588>)
 8001d74:	400a      	ands	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d7a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d7e:	f383 8810 	msr	PRIMASK, r3
}
 8001d82:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d84:	f3ef 8310 	mrs	r3, PRIMASK
 8001d88:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8001d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d8c:	677b      	str	r3, [r7, #116]	; 0x74
 8001d8e:	2301      	movs	r3, #1
 8001d90:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d94:	f383 8810 	msr	PRIMASK, r3
}
 8001d98:	46c0      	nop			; (mov r8, r8)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2101      	movs	r1, #1
 8001da6:	438a      	bics	r2, r1
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dac:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001db0:	f383 8810 	msr	PRIMASK, r3
}
 8001db4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001db6:	f3ef 8310 	mrs	r3, PRIMASK
 8001dba:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8001dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001dbe:	673b      	str	r3, [r7, #112]	; 0x70
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dc6:	f383 8810 	msr	PRIMASK, r3
}
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2140      	movs	r1, #64	; 0x40
 8001dd8:	438a      	bics	r2, r1
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dde:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001de2:	f383 8810 	msr	PRIMASK, r3
}
 8001de6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2280      	movs	r2, #128	; 0x80
 8001dec:	2120      	movs	r1, #32
 8001dee:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001df6:	f3ef 8310 	mrs	r3, PRIMASK
 8001dfa:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8001dfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001dfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001e00:	2301      	movs	r3, #1
 8001e02:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e06:	f383 8810 	msr	PRIMASK, r3
}
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2110      	movs	r1, #16
 8001e18:	438a      	bics	r2, r1
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e22:	f383 8810 	msr	PRIMASK, r3
}
 8001e26:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f7fe fd7d 	bl	800092c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2202      	movs	r2, #2
 8001e36:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2258      	movs	r2, #88	; 0x58
 8001e3c:	5a9a      	ldrh	r2, [r3, r2]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	215a      	movs	r1, #90	; 0x5a
 8001e42:	5a5b      	ldrh	r3, [r3, r1]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	0011      	movs	r1, r2
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f000 f8d0 	bl	8001ff4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001e54:	e0aa      	b.n	8001fac <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2258      	movs	r2, #88	; 0x58
 8001e5a:	5a99      	ldrh	r1, [r3, r2]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	225a      	movs	r2, #90	; 0x5a
 8001e60:	5a9b      	ldrh	r3, [r3, r2]
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	208e      	movs	r0, #142	; 0x8e
 8001e66:	183b      	adds	r3, r7, r0
 8001e68:	1a8a      	subs	r2, r1, r2
 8001e6a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	225a      	movs	r2, #90	; 0x5a
 8001e70:	5a9b      	ldrh	r3, [r3, r2]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d100      	bne.n	8001e7a <HAL_UART_IRQHandler+0x446>
 8001e78:	e09a      	b.n	8001fb0 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8001e7a:	183b      	adds	r3, r7, r0
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d100      	bne.n	8001e84 <HAL_UART_IRQHandler+0x450>
 8001e82:	e095      	b.n	8001fb0 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e84:	f3ef 8310 	mrs	r3, PRIMASK
 8001e88:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e8c:	2488      	movs	r4, #136	; 0x88
 8001e8e:	193a      	adds	r2, r7, r4
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	2301      	movs	r3, #1
 8001e94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	f383 8810 	msr	PRIMASK, r3
}
 8001e9c:	46c0      	nop			; (mov r8, r8)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4945      	ldr	r1, [pc, #276]	; (8001fc0 <HAL_UART_IRQHandler+0x58c>)
 8001eaa:	400a      	ands	r2, r1
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	193b      	adds	r3, r7, r4
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	f383 8810 	msr	PRIMASK, r3
}
 8001eba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ebc:	f3ef 8310 	mrs	r3, PRIMASK
 8001ec0:	61bb      	str	r3, [r7, #24]
  return(result);
 8001ec2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ec4:	2484      	movs	r4, #132	; 0x84
 8001ec6:	193a      	adds	r2, r7, r4
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	2301      	movs	r3, #1
 8001ecc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	f383 8810 	msr	PRIMASK, r3
}
 8001ed4:	46c0      	nop			; (mov r8, r8)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	438a      	bics	r2, r1
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	193b      	adds	r3, r7, r4
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	f383 8810 	msr	PRIMASK, r3
}
 8001ef2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2280      	movs	r2, #128	; 0x80
 8001ef8:	2120      	movs	r1, #32
 8001efa:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f08:	f3ef 8310 	mrs	r3, PRIMASK
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f10:	2480      	movs	r4, #128	; 0x80
 8001f12:	193a      	adds	r2, r7, r4
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	2301      	movs	r3, #1
 8001f18:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1c:	f383 8810 	msr	PRIMASK, r3
}
 8001f20:	46c0      	nop			; (mov r8, r8)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2110      	movs	r1, #16
 8001f2e:	438a      	bics	r2, r1
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	193b      	adds	r3, r7, r4
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3a:	f383 8810 	msr	PRIMASK, r3
}
 8001f3e:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001f46:	183b      	adds	r3, r7, r0
 8001f48:	881a      	ldrh	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	0011      	movs	r1, r2
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f000 f850 	bl	8001ff4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001f54:	e02c      	b.n	8001fb0 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001f56:	23a4      	movs	r3, #164	; 0xa4
 8001f58:	18fb      	adds	r3, r7, r3
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2280      	movs	r2, #128	; 0x80
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d00f      	beq.n	8001f82 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001f62:	23a0      	movs	r3, #160	; 0xa0
 8001f64:	18fb      	adds	r3, r7, r3
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2280      	movs	r2, #128	; 0x80
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d009      	beq.n	8001f82 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d01e      	beq.n	8001fb4 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	0010      	movs	r0, r2
 8001f7e:	4798      	blx	r3
    }
    return;
 8001f80:	e018      	b.n	8001fb4 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001f82:	23a4      	movs	r3, #164	; 0xa4
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2240      	movs	r2, #64	; 0x40
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d013      	beq.n	8001fb6 <HAL_UART_IRQHandler+0x582>
 8001f8e:	23a0      	movs	r3, #160	; 0xa0
 8001f90:	18fb      	adds	r3, r7, r3
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2240      	movs	r2, #64	; 0x40
 8001f96:	4013      	ands	r3, r2
 8001f98:	d00d      	beq.n	8001fb6 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f000 fc54 	bl	800284a <UART_EndTransmit_IT>
    return;
 8001fa2:	e008      	b.n	8001fb6 <HAL_UART_IRQHandler+0x582>
      return;
 8001fa4:	46c0      	nop			; (mov r8, r8)
 8001fa6:	e006      	b.n	8001fb6 <HAL_UART_IRQHandler+0x582>
    return;
 8001fa8:	46c0      	nop			; (mov r8, r8)
 8001faa:	e004      	b.n	8001fb6 <HAL_UART_IRQHandler+0x582>
      return;
 8001fac:	46c0      	nop			; (mov r8, r8)
 8001fae:	e002      	b.n	8001fb6 <HAL_UART_IRQHandler+0x582>
      return;
 8001fb0:	46c0      	nop			; (mov r8, r8)
 8001fb2:	e000      	b.n	8001fb6 <HAL_UART_IRQHandler+0x582>
    return;
 8001fb4:	46c0      	nop			; (mov r8, r8)
  }

}
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b02b      	add	sp, #172	; 0xac
 8001fba:	bd90      	pop	{r4, r7, pc}
 8001fbc:	fffffeff 	.word	0xfffffeff
 8001fc0:	fffffedf 	.word	0xfffffedf

08001fc4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8001fcc:	46c0      	nop			; (mov r8, r8)
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b002      	add	sp, #8
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8001fdc:	46c0      	nop			; (mov r8, r8)
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b002      	add	sp, #8
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001fec:	46c0      	nop			; (mov r8, r8)
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b002      	add	sp, #8
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	000a      	movs	r2, r1
 8001ffe:	1cbb      	adds	r3, r7, #2
 8002000:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	46bd      	mov	sp, r7
 8002006:	b002      	add	sp, #8
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002014:	231e      	movs	r3, #30
 8002016:	18fb      	adds	r3, r7, r3
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	4313      	orrs	r3, r2
 8002032:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a83      	ldr	r2, [pc, #524]	; (8002248 <UART_SetConfig+0x23c>)
 800203c:	4013      	ands	r3, r2
 800203e:	0019      	movs	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	430a      	orrs	r2, r1
 8002048:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	4a7e      	ldr	r2, [pc, #504]	; (800224c <UART_SetConfig+0x240>)
 8002052:	4013      	ands	r3, r2
 8002054:	0019      	movs	r1, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	4313      	orrs	r3, r2
 8002070:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	4a75      	ldr	r2, [pc, #468]	; (8002250 <UART_SetConfig+0x244>)
 800207a:	4013      	ands	r3, r2
 800207c:	0019      	movs	r1, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	430a      	orrs	r2, r1
 8002086:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002088:	4b72      	ldr	r3, [pc, #456]	; (8002254 <UART_SetConfig+0x248>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	2203      	movs	r2, #3
 800208e:	4013      	ands	r3, r2
 8002090:	2b03      	cmp	r3, #3
 8002092:	d00d      	beq.n	80020b0 <UART_SetConfig+0xa4>
 8002094:	d81b      	bhi.n	80020ce <UART_SetConfig+0xc2>
 8002096:	2b02      	cmp	r3, #2
 8002098:	d014      	beq.n	80020c4 <UART_SetConfig+0xb8>
 800209a:	d818      	bhi.n	80020ce <UART_SetConfig+0xc2>
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <UART_SetConfig+0x9a>
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d00a      	beq.n	80020ba <UART_SetConfig+0xae>
 80020a4:	e013      	b.n	80020ce <UART_SetConfig+0xc2>
 80020a6:	231f      	movs	r3, #31
 80020a8:	18fb      	adds	r3, r7, r3
 80020aa:	2200      	movs	r2, #0
 80020ac:	701a      	strb	r2, [r3, #0]
 80020ae:	e012      	b.n	80020d6 <UART_SetConfig+0xca>
 80020b0:	231f      	movs	r3, #31
 80020b2:	18fb      	adds	r3, r7, r3
 80020b4:	2202      	movs	r2, #2
 80020b6:	701a      	strb	r2, [r3, #0]
 80020b8:	e00d      	b.n	80020d6 <UART_SetConfig+0xca>
 80020ba:	231f      	movs	r3, #31
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	2204      	movs	r2, #4
 80020c0:	701a      	strb	r2, [r3, #0]
 80020c2:	e008      	b.n	80020d6 <UART_SetConfig+0xca>
 80020c4:	231f      	movs	r3, #31
 80020c6:	18fb      	adds	r3, r7, r3
 80020c8:	2208      	movs	r2, #8
 80020ca:	701a      	strb	r2, [r3, #0]
 80020cc:	e003      	b.n	80020d6 <UART_SetConfig+0xca>
 80020ce:	231f      	movs	r3, #31
 80020d0:	18fb      	adds	r3, r7, r3
 80020d2:	2210      	movs	r2, #16
 80020d4:	701a      	strb	r2, [r3, #0]
 80020d6:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69da      	ldr	r2, [r3, #28]
 80020dc:	2380      	movs	r3, #128	; 0x80
 80020de:	021b      	lsls	r3, r3, #8
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d15c      	bne.n	800219e <UART_SetConfig+0x192>
  {
    switch (clocksource)
 80020e4:	231f      	movs	r3, #31
 80020e6:	18fb      	adds	r3, r7, r3
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d015      	beq.n	800211a <UART_SetConfig+0x10e>
 80020ee:	dc18      	bgt.n	8002122 <UART_SetConfig+0x116>
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d00d      	beq.n	8002110 <UART_SetConfig+0x104>
 80020f4:	dc15      	bgt.n	8002122 <UART_SetConfig+0x116>
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <UART_SetConfig+0xf4>
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d005      	beq.n	800210a <UART_SetConfig+0xfe>
 80020fe:	e010      	b.n	8002122 <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002100:	f7ff fa68 	bl	80015d4 <HAL_RCC_GetPCLK1Freq>
 8002104:	0003      	movs	r3, r0
 8002106:	61bb      	str	r3, [r7, #24]
        break;
 8002108:	e012      	b.n	8002130 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800210a:	4b53      	ldr	r3, [pc, #332]	; (8002258 <UART_SetConfig+0x24c>)
 800210c:	61bb      	str	r3, [r7, #24]
        break;
 800210e:	e00f      	b.n	8002130 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002110:	f7ff fa00 	bl	8001514 <HAL_RCC_GetSysClockFreq>
 8002114:	0003      	movs	r3, r0
 8002116:	61bb      	str	r3, [r7, #24]
        break;
 8002118:	e00a      	b.n	8002130 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800211a:	2380      	movs	r3, #128	; 0x80
 800211c:	021b      	lsls	r3, r3, #8
 800211e:	61bb      	str	r3, [r7, #24]
        break;
 8002120:	e006      	b.n	8002130 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002126:	231e      	movs	r3, #30
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	2201      	movs	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]
        break;
 800212e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d100      	bne.n	8002138 <UART_SetConfig+0x12c>
 8002136:	e07a      	b.n	800222e <UART_SetConfig+0x222>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	005a      	lsls	r2, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	085b      	lsrs	r3, r3, #1
 8002142:	18d2      	adds	r2, r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	0019      	movs	r1, r3
 800214a:	0010      	movs	r0, r2
 800214c:	f7fd ffee 	bl	800012c <__udivsi3>
 8002150:	0003      	movs	r3, r0
 8002152:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	2b0f      	cmp	r3, #15
 8002158:	d91c      	bls.n	8002194 <UART_SetConfig+0x188>
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	025b      	lsls	r3, r3, #9
 8002160:	429a      	cmp	r2, r3
 8002162:	d217      	bcs.n	8002194 <UART_SetConfig+0x188>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	b29a      	uxth	r2, r3
 8002168:	200e      	movs	r0, #14
 800216a:	183b      	adds	r3, r7, r0
 800216c:	210f      	movs	r1, #15
 800216e:	438a      	bics	r2, r1
 8002170:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	085b      	lsrs	r3, r3, #1
 8002176:	b29b      	uxth	r3, r3
 8002178:	2207      	movs	r2, #7
 800217a:	4013      	ands	r3, r2
 800217c:	b299      	uxth	r1, r3
 800217e:	183b      	adds	r3, r7, r0
 8002180:	183a      	adds	r2, r7, r0
 8002182:	8812      	ldrh	r2, [r2, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	183a      	adds	r2, r7, r0
 800218e:	8812      	ldrh	r2, [r2, #0]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	e04c      	b.n	800222e <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 8002194:	231e      	movs	r3, #30
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	2201      	movs	r2, #1
 800219a:	701a      	strb	r2, [r3, #0]
 800219c:	e047      	b.n	800222e <UART_SetConfig+0x222>
      }
    }
  }
  else
  {
    switch (clocksource)
 800219e:	231f      	movs	r3, #31
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d015      	beq.n	80021d4 <UART_SetConfig+0x1c8>
 80021a8:	dc18      	bgt.n	80021dc <UART_SetConfig+0x1d0>
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d00d      	beq.n	80021ca <UART_SetConfig+0x1be>
 80021ae:	dc15      	bgt.n	80021dc <UART_SetConfig+0x1d0>
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <UART_SetConfig+0x1ae>
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d005      	beq.n	80021c4 <UART_SetConfig+0x1b8>
 80021b8:	e010      	b.n	80021dc <UART_SetConfig+0x1d0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80021ba:	f7ff fa0b 	bl	80015d4 <HAL_RCC_GetPCLK1Freq>
 80021be:	0003      	movs	r3, r0
 80021c0:	61bb      	str	r3, [r7, #24]
        break;
 80021c2:	e012      	b.n	80021ea <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80021c4:	4b24      	ldr	r3, [pc, #144]	; (8002258 <UART_SetConfig+0x24c>)
 80021c6:	61bb      	str	r3, [r7, #24]
        break;
 80021c8:	e00f      	b.n	80021ea <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80021ca:	f7ff f9a3 	bl	8001514 <HAL_RCC_GetSysClockFreq>
 80021ce:	0003      	movs	r3, r0
 80021d0:	61bb      	str	r3, [r7, #24]
        break;
 80021d2:	e00a      	b.n	80021ea <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	021b      	lsls	r3, r3, #8
 80021d8:	61bb      	str	r3, [r7, #24]
        break;
 80021da:	e006      	b.n	80021ea <UART_SetConfig+0x1de>
      default:
        pclk = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80021e0:	231e      	movs	r3, #30
 80021e2:	18fb      	adds	r3, r7, r3
 80021e4:	2201      	movs	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]
        break;
 80021e8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d01e      	beq.n	800222e <UART_SetConfig+0x222>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	085a      	lsrs	r2, r3, #1
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	18d2      	adds	r2, r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	0019      	movs	r1, r3
 8002200:	0010      	movs	r0, r2
 8002202:	f7fd ff93 	bl	800012c <__udivsi3>
 8002206:	0003      	movs	r3, r0
 8002208:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2b0f      	cmp	r3, #15
 800220e:	d90a      	bls.n	8002226 <UART_SetConfig+0x21a>
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	2380      	movs	r3, #128	; 0x80
 8002214:	025b      	lsls	r3, r3, #9
 8002216:	429a      	cmp	r2, r3
 8002218:	d205      	bcs.n	8002226 <UART_SetConfig+0x21a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	b29a      	uxth	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	60da      	str	r2, [r3, #12]
 8002224:	e003      	b.n	800222e <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 8002226:	231e      	movs	r3, #30
 8002228:	18fb      	adds	r3, r7, r3
 800222a:	2201      	movs	r2, #1
 800222c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800223a:	231e      	movs	r3, #30
 800223c:	18fb      	adds	r3, r7, r3
 800223e:	781b      	ldrb	r3, [r3, #0]
}
 8002240:	0018      	movs	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	b008      	add	sp, #32
 8002246:	bd80      	pop	{r7, pc}
 8002248:	ffff69f3 	.word	0xffff69f3
 800224c:	ffffcfff 	.word	0xffffcfff
 8002250:	fffff4ff 	.word	0xfffff4ff
 8002254:	40021000 	.word	0x40021000
 8002258:	007a1200 	.word	0x007a1200

0800225c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	2201      	movs	r2, #1
 800226a:	4013      	ands	r3, r2
 800226c:	d00b      	beq.n	8002286 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	4a4a      	ldr	r2, [pc, #296]	; (80023a0 <UART_AdvFeatureConfig+0x144>)
 8002276:	4013      	ands	r3, r2
 8002278:	0019      	movs	r1, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	2202      	movs	r2, #2
 800228c:	4013      	ands	r3, r2
 800228e:	d00b      	beq.n	80022a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	4a43      	ldr	r2, [pc, #268]	; (80023a4 <UART_AdvFeatureConfig+0x148>)
 8002298:	4013      	ands	r3, r2
 800229a:	0019      	movs	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	2204      	movs	r2, #4
 80022ae:	4013      	ands	r3, r2
 80022b0:	d00b      	beq.n	80022ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	4a3b      	ldr	r2, [pc, #236]	; (80023a8 <UART_AdvFeatureConfig+0x14c>)
 80022ba:	4013      	ands	r3, r2
 80022bc:	0019      	movs	r1, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	2208      	movs	r2, #8
 80022d0:	4013      	ands	r3, r2
 80022d2:	d00b      	beq.n	80022ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	4a34      	ldr	r2, [pc, #208]	; (80023ac <UART_AdvFeatureConfig+0x150>)
 80022dc:	4013      	ands	r3, r2
 80022de:	0019      	movs	r1, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	2210      	movs	r2, #16
 80022f2:	4013      	ands	r3, r2
 80022f4:	d00b      	beq.n	800230e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	4a2c      	ldr	r2, [pc, #176]	; (80023b0 <UART_AdvFeatureConfig+0x154>)
 80022fe:	4013      	ands	r3, r2
 8002300:	0019      	movs	r1, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	2220      	movs	r2, #32
 8002314:	4013      	ands	r3, r2
 8002316:	d00b      	beq.n	8002330 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	4a25      	ldr	r2, [pc, #148]	; (80023b4 <UART_AdvFeatureConfig+0x158>)
 8002320:	4013      	ands	r3, r2
 8002322:	0019      	movs	r1, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	2240      	movs	r2, #64	; 0x40
 8002336:	4013      	ands	r3, r2
 8002338:	d01d      	beq.n	8002376 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	4a1d      	ldr	r2, [pc, #116]	; (80023b8 <UART_AdvFeatureConfig+0x15c>)
 8002342:	4013      	ands	r3, r2
 8002344:	0019      	movs	r1, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	035b      	lsls	r3, r3, #13
 800235a:	429a      	cmp	r2, r3
 800235c:	d10b      	bne.n	8002376 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	4a15      	ldr	r2, [pc, #84]	; (80023bc <UART_AdvFeatureConfig+0x160>)
 8002366:	4013      	ands	r3, r2
 8002368:	0019      	movs	r1, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	2280      	movs	r2, #128	; 0x80
 800237c:	4013      	ands	r3, r2
 800237e:	d00b      	beq.n	8002398 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	4a0e      	ldr	r2, [pc, #56]	; (80023c0 <UART_AdvFeatureConfig+0x164>)
 8002388:	4013      	ands	r3, r2
 800238a:	0019      	movs	r1, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	605a      	str	r2, [r3, #4]
  }
}
 8002398:	46c0      	nop			; (mov r8, r8)
 800239a:	46bd      	mov	sp, r7
 800239c:	b002      	add	sp, #8
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	fffdffff 	.word	0xfffdffff
 80023a4:	fffeffff 	.word	0xfffeffff
 80023a8:	fffbffff 	.word	0xfffbffff
 80023ac:	ffff7fff 	.word	0xffff7fff
 80023b0:	ffffefff 	.word	0xffffefff
 80023b4:	ffffdfff 	.word	0xffffdfff
 80023b8:	ffefffff 	.word	0xffefffff
 80023bc:	ff9fffff 	.word	0xff9fffff
 80023c0:	fff7ffff 	.word	0xfff7ffff

080023c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b092      	sub	sp, #72	; 0x48
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2284      	movs	r2, #132	; 0x84
 80023d0:	2100      	movs	r1, #0
 80023d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80023d4:	f7fe f99e 	bl	8000714 <HAL_GetTick>
 80023d8:	0003      	movs	r3, r0
 80023da:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2208      	movs	r2, #8
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d12c      	bne.n	8002444 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80023ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ec:	2280      	movs	r2, #128	; 0x80
 80023ee:	0391      	lsls	r1, r2, #14
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	4a46      	ldr	r2, [pc, #280]	; (800250c <UART_CheckIdleState+0x148>)
 80023f4:	9200      	str	r2, [sp, #0]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f000 f88c 	bl	8002514 <UART_WaitOnFlagUntilTimeout>
 80023fc:	1e03      	subs	r3, r0, #0
 80023fe:	d021      	beq.n	8002444 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002400:	f3ef 8310 	mrs	r3, PRIMASK
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002408:	63bb      	str	r3, [r7, #56]	; 0x38
 800240a:	2301      	movs	r3, #1
 800240c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800240e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002410:	f383 8810 	msr	PRIMASK, r3
}
 8002414:	46c0      	nop			; (mov r8, r8)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2180      	movs	r1, #128	; 0x80
 8002422:	438a      	bics	r2, r1
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242c:	f383 8810 	msr	PRIMASK, r3
}
 8002430:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2220      	movs	r2, #32
 8002436:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2278      	movs	r2, #120	; 0x78
 800243c:	2100      	movs	r1, #0
 800243e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e05f      	b.n	8002504 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2204      	movs	r2, #4
 800244c:	4013      	ands	r3, r2
 800244e:	2b04      	cmp	r3, #4
 8002450:	d146      	bne.n	80024e0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002454:	2280      	movs	r2, #128	; 0x80
 8002456:	03d1      	lsls	r1, r2, #15
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	4a2c      	ldr	r2, [pc, #176]	; (800250c <UART_CheckIdleState+0x148>)
 800245c:	9200      	str	r2, [sp, #0]
 800245e:	2200      	movs	r2, #0
 8002460:	f000 f858 	bl	8002514 <UART_WaitOnFlagUntilTimeout>
 8002464:	1e03      	subs	r3, r0, #0
 8002466:	d03b      	beq.n	80024e0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002468:	f3ef 8310 	mrs	r3, PRIMASK
 800246c:	60fb      	str	r3, [r7, #12]
  return(result);
 800246e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002470:	637b      	str	r3, [r7, #52]	; 0x34
 8002472:	2301      	movs	r3, #1
 8002474:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	f383 8810 	msr	PRIMASK, r3
}
 800247c:	46c0      	nop			; (mov r8, r8)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4921      	ldr	r1, [pc, #132]	; (8002510 <UART_CheckIdleState+0x14c>)
 800248a:	400a      	ands	r2, r1
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002490:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f383 8810 	msr	PRIMASK, r3
}
 8002498:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800249a:	f3ef 8310 	mrs	r3, PRIMASK
 800249e:	61bb      	str	r3, [r7, #24]
  return(result);
 80024a0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024a2:	633b      	str	r3, [r7, #48]	; 0x30
 80024a4:	2301      	movs	r3, #1
 80024a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f383 8810 	msr	PRIMASK, r3
}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2101      	movs	r1, #1
 80024bc:	438a      	bics	r2, r1
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	f383 8810 	msr	PRIMASK, r3
}
 80024ca:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2280      	movs	r2, #128	; 0x80
 80024d0:	2120      	movs	r1, #32
 80024d2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2278      	movs	r2, #120	; 0x78
 80024d8:	2100      	movs	r1, #0
 80024da:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e011      	b.n	8002504 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2220      	movs	r2, #32
 80024e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2280      	movs	r2, #128	; 0x80
 80024ea:	2120      	movs	r1, #32
 80024ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2278      	movs	r2, #120	; 0x78
 80024fe:	2100      	movs	r1, #0
 8002500:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	0018      	movs	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	b010      	add	sp, #64	; 0x40
 800250a:	bd80      	pop	{r7, pc}
 800250c:	01ffffff 	.word	0x01ffffff
 8002510:	fffffedf 	.word	0xfffffedf

08002514 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	603b      	str	r3, [r7, #0]
 8002520:	1dfb      	adds	r3, r7, #7
 8002522:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002524:	e04b      	b.n	80025be <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	3301      	adds	r3, #1
 800252a:	d048      	beq.n	80025be <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800252c:	f7fe f8f2 	bl	8000714 <HAL_GetTick>
 8002530:	0002      	movs	r2, r0
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	429a      	cmp	r2, r3
 800253a:	d302      	bcc.n	8002542 <UART_WaitOnFlagUntilTimeout+0x2e>
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e04b      	b.n	80025de <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2204      	movs	r2, #4
 800254e:	4013      	ands	r3, r2
 8002550:	d035      	beq.n	80025be <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	2208      	movs	r2, #8
 800255a:	4013      	ands	r3, r2
 800255c:	2b08      	cmp	r3, #8
 800255e:	d111      	bne.n	8002584 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2208      	movs	r2, #8
 8002566:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	0018      	movs	r0, r3
 800256c:	f000 f8f2 	bl	8002754 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2284      	movs	r2, #132	; 0x84
 8002574:	2108      	movs	r1, #8
 8002576:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2278      	movs	r2, #120	; 0x78
 800257c:	2100      	movs	r1, #0
 800257e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e02c      	b.n	80025de <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	69da      	ldr	r2, [r3, #28]
 800258a:	2380      	movs	r3, #128	; 0x80
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	401a      	ands	r2, r3
 8002590:	2380      	movs	r3, #128	; 0x80
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	429a      	cmp	r2, r3
 8002596:	d112      	bne.n	80025be <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2280      	movs	r2, #128	; 0x80
 800259e:	0112      	lsls	r2, r2, #4
 80025a0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	0018      	movs	r0, r3
 80025a6:	f000 f8d5 	bl	8002754 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2284      	movs	r2, #132	; 0x84
 80025ae:	2120      	movs	r1, #32
 80025b0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2278      	movs	r2, #120	; 0x78
 80025b6:	2100      	movs	r1, #0
 80025b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e00f      	b.n	80025de <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	4013      	ands	r3, r2
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	425a      	negs	r2, r3
 80025ce:	4153      	adcs	r3, r2
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	001a      	movs	r2, r3
 80025d4:	1dfb      	adds	r3, r7, #7
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d0a4      	beq.n	8002526 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	0018      	movs	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	b004      	add	sp, #16
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b090      	sub	sp, #64	; 0x40
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	1dbb      	adds	r3, r7, #6
 80025f4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	1dba      	adds	r2, r7, #6
 8002600:	2158      	movs	r1, #88	; 0x58
 8002602:	8812      	ldrh	r2, [r2, #0]
 8002604:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1dba      	adds	r2, r7, #6
 800260a:	215a      	movs	r1, #90	; 0x5a
 800260c:	8812      	ldrh	r2, [r2, #0]
 800260e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	015b      	lsls	r3, r3, #5
 800261e:	429a      	cmp	r2, r3
 8002620:	d10d      	bne.n	800263e <UART_Start_Receive_IT+0x56>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d104      	bne.n	8002634 <UART_Start_Receive_IT+0x4c>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	225c      	movs	r2, #92	; 0x5c
 800262e:	4946      	ldr	r1, [pc, #280]	; (8002748 <UART_Start_Receive_IT+0x160>)
 8002630:	5299      	strh	r1, [r3, r2]
 8002632:	e01a      	b.n	800266a <UART_Start_Receive_IT+0x82>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	225c      	movs	r2, #92	; 0x5c
 8002638:	21ff      	movs	r1, #255	; 0xff
 800263a:	5299      	strh	r1, [r3, r2]
 800263c:	e015      	b.n	800266a <UART_Start_Receive_IT+0x82>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10d      	bne.n	8002662 <UART_Start_Receive_IT+0x7a>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d104      	bne.n	8002658 <UART_Start_Receive_IT+0x70>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	225c      	movs	r2, #92	; 0x5c
 8002652:	21ff      	movs	r1, #255	; 0xff
 8002654:	5299      	strh	r1, [r3, r2]
 8002656:	e008      	b.n	800266a <UART_Start_Receive_IT+0x82>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	225c      	movs	r2, #92	; 0x5c
 800265c:	217f      	movs	r1, #127	; 0x7f
 800265e:	5299      	strh	r1, [r3, r2]
 8002660:	e003      	b.n	800266a <UART_Start_Receive_IT+0x82>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	225c      	movs	r2, #92	; 0x5c
 8002666:	2100      	movs	r1, #0
 8002668:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2284      	movs	r2, #132	; 0x84
 800266e:	2100      	movs	r1, #0
 8002670:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2280      	movs	r2, #128	; 0x80
 8002676:	2122      	movs	r1, #34	; 0x22
 8002678:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800267a:	f3ef 8310 	mrs	r3, PRIMASK
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002684:	2301      	movs	r3, #1
 8002686:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268a:	f383 8810 	msr	PRIMASK, r3
}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2101      	movs	r1, #1
 800269c:	430a      	orrs	r2, r1
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026a2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a6:	f383 8810 	msr	PRIMASK, r3
}
 80026aa:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	015b      	lsls	r3, r3, #5
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d107      	bne.n	80026c8 <UART_Start_Receive_IT+0xe0>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d103      	bne.n	80026c8 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4a22      	ldr	r2, [pc, #136]	; (800274c <UART_Start_Receive_IT+0x164>)
 80026c4:	669a      	str	r2, [r3, #104]	; 0x68
 80026c6:	e002      	b.n	80026ce <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4a21      	ldr	r2, [pc, #132]	; (8002750 <UART_Start_Receive_IT+0x168>)
 80026cc:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d019      	beq.n	800270a <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026d6:	f3ef 8310 	mrs	r3, PRIMASK
 80026da:	61fb      	str	r3, [r7, #28]
  return(result);
 80026dc:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80026de:	637b      	str	r3, [r7, #52]	; 0x34
 80026e0:	2301      	movs	r3, #1
 80026e2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	f383 8810 	msr	PRIMASK, r3
}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2190      	movs	r1, #144	; 0x90
 80026f8:	0049      	lsls	r1, r1, #1
 80026fa:	430a      	orrs	r2, r1
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	f383 8810 	msr	PRIMASK, r3
}
 8002708:	e018      	b.n	800273c <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800270a:	f3ef 8310 	mrs	r3, PRIMASK
 800270e:	613b      	str	r3, [r7, #16]
  return(result);
 8002710:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8002712:	63bb      	str	r3, [r7, #56]	; 0x38
 8002714:	2301      	movs	r3, #1
 8002716:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f383 8810 	msr	PRIMASK, r3
}
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2120      	movs	r1, #32
 800272c:	430a      	orrs	r2, r1
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002732:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	f383 8810 	msr	PRIMASK, r3
}
 800273a:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	0018      	movs	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	b010      	add	sp, #64	; 0x40
 8002744:	bd80      	pop	{r7, pc}
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	000001ff 	.word	0x000001ff
 800274c:	08002a59 	.word	0x08002a59
 8002750:	080028a1 	.word	0x080028a1

08002754 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08e      	sub	sp, #56	; 0x38
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800275c:	f3ef 8310 	mrs	r3, PRIMASK
 8002760:	617b      	str	r3, [r7, #20]
  return(result);
 8002762:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002764:	637b      	str	r3, [r7, #52]	; 0x34
 8002766:	2301      	movs	r3, #1
 8002768:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	f383 8810 	msr	PRIMASK, r3
}
 8002770:	46c0      	nop			; (mov r8, r8)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4926      	ldr	r1, [pc, #152]	; (8002818 <UART_EndRxTransfer+0xc4>)
 800277e:	400a      	ands	r2, r1
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002784:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	f383 8810 	msr	PRIMASK, r3
}
 800278c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800278e:	f3ef 8310 	mrs	r3, PRIMASK
 8002792:	623b      	str	r3, [r7, #32]
  return(result);
 8002794:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002796:	633b      	str	r3, [r7, #48]	; 0x30
 8002798:	2301      	movs	r3, #1
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	f383 8810 	msr	PRIMASK, r3
}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2101      	movs	r1, #1
 80027b0:	438a      	bics	r2, r1
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ba:	f383 8810 	msr	PRIMASK, r3
}
 80027be:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d118      	bne.n	80027fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027c8:	f3ef 8310 	mrs	r3, PRIMASK
 80027cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80027ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027d2:	2301      	movs	r3, #1
 80027d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f383 8810 	msr	PRIMASK, r3
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2110      	movs	r1, #16
 80027ea:	438a      	bics	r2, r1
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	f383 8810 	msr	PRIMASK, r3
}
 80027f8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2280      	movs	r2, #128	; 0x80
 80027fe:	2120      	movs	r1, #32
 8002800:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	46bd      	mov	sp, r7
 8002812:	b00e      	add	sp, #56	; 0x38
 8002814:	bd80      	pop	{r7, pc}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	fffffedf 	.word	0xfffffedf

0800281c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	225a      	movs	r2, #90	; 0x5a
 800282e:	2100      	movs	r1, #0
 8002830:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2252      	movs	r2, #82	; 0x52
 8002836:	2100      	movs	r1, #0
 8002838:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	0018      	movs	r0, r3
 800283e:	f7ff fbd1 	bl	8001fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	46bd      	mov	sp, r7
 8002846:	b004      	add	sp, #16
 8002848:	bd80      	pop	{r7, pc}

0800284a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b086      	sub	sp, #24
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002852:	f3ef 8310 	mrs	r3, PRIMASK
 8002856:	60bb      	str	r3, [r7, #8]
  return(result);
 8002858:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	2301      	movs	r3, #1
 800285e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f383 8810 	msr	PRIMASK, r3
}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2140      	movs	r1, #64	; 0x40
 8002874:	438a      	bics	r2, r1
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	f383 8810 	msr	PRIMASK, r3
}
 8002882:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2220      	movs	r2, #32
 8002888:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	0018      	movs	r0, r3
 8002894:	f7ff fb96 	bl	8001fc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002898:	46c0      	nop			; (mov r8, r8)
 800289a:	46bd      	mov	sp, r7
 800289c:	b006      	add	sp, #24
 800289e:	bd80      	pop	{r7, pc}

080028a0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b094      	sub	sp, #80	; 0x50
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80028a8:	204e      	movs	r0, #78	; 0x4e
 80028aa:	183b      	adds	r3, r7, r0
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	215c      	movs	r1, #92	; 0x5c
 80028b0:	5a52      	ldrh	r2, [r2, r1]
 80028b2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2280      	movs	r2, #128	; 0x80
 80028b8:	589b      	ldr	r3, [r3, r2]
 80028ba:	2b22      	cmp	r3, #34	; 0x22
 80028bc:	d000      	beq.n	80028c0 <UART_RxISR_8BIT+0x20>
 80028be:	e0ba      	b.n	8002a36 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	214c      	movs	r1, #76	; 0x4c
 80028c6:	187b      	adds	r3, r7, r1
 80028c8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80028ca:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80028cc:	187b      	adds	r3, r7, r1
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	183b      	adds	r3, r7, r0
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	b2d9      	uxtb	r1, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028dc:	400a      	ands	r2, r1
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	225a      	movs	r2, #90	; 0x5a
 80028f0:	5a9b      	ldrh	r3, [r3, r2]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b299      	uxth	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	225a      	movs	r2, #90	; 0x5a
 80028fc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	225a      	movs	r2, #90	; 0x5a
 8002902:	5a9b      	ldrh	r3, [r3, r2]
 8002904:	b29b      	uxth	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d000      	beq.n	800290c <UART_RxISR_8BIT+0x6c>
 800290a:	e09c      	b.n	8002a46 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800290c:	f3ef 8310 	mrs	r3, PRIMASK
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002914:	64bb      	str	r3, [r7, #72]	; 0x48
 8002916:	2301      	movs	r3, #1
 8002918:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800291a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291c:	f383 8810 	msr	PRIMASK, r3
}
 8002920:	46c0      	nop			; (mov r8, r8)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4948      	ldr	r1, [pc, #288]	; (8002a50 <UART_RxISR_8BIT+0x1b0>)
 800292e:	400a      	ands	r2, r1
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002934:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002938:	f383 8810 	msr	PRIMASK, r3
}
 800293c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800293e:	f3ef 8310 	mrs	r3, PRIMASK
 8002942:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002944:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002946:	647b      	str	r3, [r7, #68]	; 0x44
 8002948:	2301      	movs	r3, #1
 800294a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800294c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800294e:	f383 8810 	msr	PRIMASK, r3
}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2101      	movs	r1, #1
 8002960:	438a      	bics	r2, r1
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002966:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296a:	f383 8810 	msr	PRIMASK, r3
}
 800296e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2280      	movs	r2, #128	; 0x80
 8002974:	2120      	movs	r1, #32
 8002976:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	041b      	lsls	r3, r3, #16
 800298e:	4013      	ands	r3, r2
 8002990:	d018      	beq.n	80029c4 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002992:	f3ef 8310 	mrs	r3, PRIMASK
 8002996:	61bb      	str	r3, [r7, #24]
  return(result);
 8002998:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800299a:	643b      	str	r3, [r7, #64]	; 0x40
 800299c:	2301      	movs	r3, #1
 800299e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f383 8810 	msr	PRIMASK, r3
}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4928      	ldr	r1, [pc, #160]	; (8002a54 <UART_RxISR_8BIT+0x1b4>)
 80029b4:	400a      	ands	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	f383 8810 	msr	PRIMASK, r3
}
 80029c2:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d12f      	bne.n	8002a2c <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029d2:	f3ef 8310 	mrs	r3, PRIMASK
 80029d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80029d8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029dc:	2301      	movs	r3, #1
 80029de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	f383 8810 	msr	PRIMASK, r3
}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2110      	movs	r1, #16
 80029f4:	438a      	bics	r2, r1
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f383 8810 	msr	PRIMASK, r3
}
 8002a02:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	2210      	movs	r2, #16
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b10      	cmp	r3, #16
 8002a10:	d103      	bne.n	8002a1a <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2210      	movs	r2, #16
 8002a18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2258      	movs	r2, #88	; 0x58
 8002a1e:	5a9a      	ldrh	r2, [r3, r2]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	0011      	movs	r1, r2
 8002a24:	0018      	movs	r0, r3
 8002a26:	f7ff fae5 	bl	8001ff4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002a2a:	e00c      	b.n	8002a46 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f7ff fad0 	bl	8001fd4 <HAL_UART_RxCpltCallback>
}
 8002a34:	e007      	b.n	8002a46 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	699a      	ldr	r2, [r3, #24]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2108      	movs	r1, #8
 8002a42:	430a      	orrs	r2, r1
 8002a44:	619a      	str	r2, [r3, #24]
}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b014      	add	sp, #80	; 0x50
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	fffffedf 	.word	0xfffffedf
 8002a54:	fbffffff 	.word	0xfbffffff

08002a58 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b094      	sub	sp, #80	; 0x50
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002a60:	204e      	movs	r0, #78	; 0x4e
 8002a62:	183b      	adds	r3, r7, r0
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	215c      	movs	r1, #92	; 0x5c
 8002a68:	5a52      	ldrh	r2, [r2, r1]
 8002a6a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2280      	movs	r2, #128	; 0x80
 8002a70:	589b      	ldr	r3, [r3, r2]
 8002a72:	2b22      	cmp	r3, #34	; 0x22
 8002a74:	d000      	beq.n	8002a78 <UART_RxISR_16BIT+0x20>
 8002a76:	e0ba      	b.n	8002bee <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	214c      	movs	r1, #76	; 0x4c
 8002a7e:	187b      	adds	r3, r7, r1
 8002a80:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002a82:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a88:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8002a8a:	187b      	adds	r3, r7, r1
 8002a8c:	183a      	adds	r2, r7, r0
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	8812      	ldrh	r2, [r2, #0]
 8002a92:	4013      	ands	r3, r2
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a98:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9e:	1c9a      	adds	r2, r3, #2
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	225a      	movs	r2, #90	; 0x5a
 8002aa8:	5a9b      	ldrh	r3, [r3, r2]
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b299      	uxth	r1, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	225a      	movs	r2, #90	; 0x5a
 8002ab4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	225a      	movs	r2, #90	; 0x5a
 8002aba:	5a9b      	ldrh	r3, [r3, r2]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d000      	beq.n	8002ac4 <UART_RxISR_16BIT+0x6c>
 8002ac2:	e09c      	b.n	8002bfe <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ac4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ac8:	623b      	str	r3, [r7, #32]
  return(result);
 8002aca:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002acc:	647b      	str	r3, [r7, #68]	; 0x44
 8002ace:	2301      	movs	r3, #1
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	f383 8810 	msr	PRIMASK, r3
}
 8002ad8:	46c0      	nop			; (mov r8, r8)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4948      	ldr	r1, [pc, #288]	; (8002c08 <UART_RxISR_16BIT+0x1b0>)
 8002ae6:	400a      	ands	r2, r1
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aec:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af0:	f383 8810 	msr	PRIMASK, r3
}
 8002af4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002af6:	f3ef 8310 	mrs	r3, PRIMASK
 8002afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002afe:	643b      	str	r3, [r7, #64]	; 0x40
 8002b00:	2301      	movs	r3, #1
 8002b02:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b06:	f383 8810 	msr	PRIMASK, r3
}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2101      	movs	r1, #1
 8002b18:	438a      	bics	r2, r1
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b1e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b22:	f383 8810 	msr	PRIMASK, r3
}
 8002b26:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2280      	movs	r2, #128	; 0x80
 8002b2c:	2120      	movs	r1, #32
 8002b2e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	2380      	movs	r3, #128	; 0x80
 8002b44:	041b      	lsls	r3, r3, #16
 8002b46:	4013      	ands	r3, r2
 8002b48:	d018      	beq.n	8002b7c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b4e:	617b      	str	r3, [r7, #20]
  return(result);
 8002b50:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002b52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b54:	2301      	movs	r3, #1
 8002b56:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	f383 8810 	msr	PRIMASK, r3
}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4928      	ldr	r1, [pc, #160]	; (8002c0c <UART_RxISR_16BIT+0x1b4>)
 8002b6c:	400a      	ands	r2, r1
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f383 8810 	msr	PRIMASK, r3
}
 8002b7a:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d12f      	bne.n	8002be4 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b8a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b90:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b92:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b94:	2301      	movs	r3, #1
 8002b96:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f383 8810 	msr	PRIMASK, r3
}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2110      	movs	r1, #16
 8002bac:	438a      	bics	r2, r1
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	f383 8810 	msr	PRIMASK, r3
}
 8002bba:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	2210      	movs	r2, #16
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b10      	cmp	r3, #16
 8002bc8:	d103      	bne.n	8002bd2 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2210      	movs	r2, #16
 8002bd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2258      	movs	r2, #88	; 0x58
 8002bd6:	5a9a      	ldrh	r2, [r3, r2]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	0011      	movs	r1, r2
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f7ff fa09 	bl	8001ff4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002be2:	e00c      	b.n	8002bfe <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	0018      	movs	r0, r3
 8002be8:	f7ff f9f4 	bl	8001fd4 <HAL_UART_RxCpltCallback>
}
 8002bec:	e007      	b.n	8002bfe <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699a      	ldr	r2, [r3, #24]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2108      	movs	r1, #8
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	619a      	str	r2, [r3, #24]
}
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	46bd      	mov	sp, r7
 8002c02:	b014      	add	sp, #80	; 0x50
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	fffffedf 	.word	0xfffffedf
 8002c0c:	fbffffff 	.word	0xfbffffff

08002c10 <__errno>:
 8002c10:	4b01      	ldr	r3, [pc, #4]	; (8002c18 <__errno+0x8>)
 8002c12:	6818      	ldr	r0, [r3, #0]
 8002c14:	4770      	bx	lr
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	2000000c 	.word	0x2000000c

08002c1c <__libc_init_array>:
 8002c1c:	b570      	push	{r4, r5, r6, lr}
 8002c1e:	2600      	movs	r6, #0
 8002c20:	4d0c      	ldr	r5, [pc, #48]	; (8002c54 <__libc_init_array+0x38>)
 8002c22:	4c0d      	ldr	r4, [pc, #52]	; (8002c58 <__libc_init_array+0x3c>)
 8002c24:	1b64      	subs	r4, r4, r5
 8002c26:	10a4      	asrs	r4, r4, #2
 8002c28:	42a6      	cmp	r6, r4
 8002c2a:	d109      	bne.n	8002c40 <__libc_init_array+0x24>
 8002c2c:	2600      	movs	r6, #0
 8002c2e:	f000 fc47 	bl	80034c0 <_init>
 8002c32:	4d0a      	ldr	r5, [pc, #40]	; (8002c5c <__libc_init_array+0x40>)
 8002c34:	4c0a      	ldr	r4, [pc, #40]	; (8002c60 <__libc_init_array+0x44>)
 8002c36:	1b64      	subs	r4, r4, r5
 8002c38:	10a4      	asrs	r4, r4, #2
 8002c3a:	42a6      	cmp	r6, r4
 8002c3c:	d105      	bne.n	8002c4a <__libc_init_array+0x2e>
 8002c3e:	bd70      	pop	{r4, r5, r6, pc}
 8002c40:	00b3      	lsls	r3, r6, #2
 8002c42:	58eb      	ldr	r3, [r5, r3]
 8002c44:	4798      	blx	r3
 8002c46:	3601      	adds	r6, #1
 8002c48:	e7ee      	b.n	8002c28 <__libc_init_array+0xc>
 8002c4a:	00b3      	lsls	r3, r6, #2
 8002c4c:	58eb      	ldr	r3, [r5, r3]
 8002c4e:	4798      	blx	r3
 8002c50:	3601      	adds	r6, #1
 8002c52:	e7f2      	b.n	8002c3a <__libc_init_array+0x1e>
 8002c54:	08003568 	.word	0x08003568
 8002c58:	08003568 	.word	0x08003568
 8002c5c:	08003568 	.word	0x08003568
 8002c60:	0800356c 	.word	0x0800356c

08002c64 <memset>:
 8002c64:	0003      	movs	r3, r0
 8002c66:	1882      	adds	r2, r0, r2
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d100      	bne.n	8002c6e <memset+0xa>
 8002c6c:	4770      	bx	lr
 8002c6e:	7019      	strb	r1, [r3, #0]
 8002c70:	3301      	adds	r3, #1
 8002c72:	e7f9      	b.n	8002c68 <memset+0x4>

08002c74 <siprintf>:
 8002c74:	b40e      	push	{r1, r2, r3}
 8002c76:	b500      	push	{lr}
 8002c78:	490b      	ldr	r1, [pc, #44]	; (8002ca8 <siprintf+0x34>)
 8002c7a:	b09c      	sub	sp, #112	; 0x70
 8002c7c:	ab1d      	add	r3, sp, #116	; 0x74
 8002c7e:	9002      	str	r0, [sp, #8]
 8002c80:	9006      	str	r0, [sp, #24]
 8002c82:	9107      	str	r1, [sp, #28]
 8002c84:	9104      	str	r1, [sp, #16]
 8002c86:	4809      	ldr	r0, [pc, #36]	; (8002cac <siprintf+0x38>)
 8002c88:	4909      	ldr	r1, [pc, #36]	; (8002cb0 <siprintf+0x3c>)
 8002c8a:	cb04      	ldmia	r3!, {r2}
 8002c8c:	9105      	str	r1, [sp, #20]
 8002c8e:	6800      	ldr	r0, [r0, #0]
 8002c90:	a902      	add	r1, sp, #8
 8002c92:	9301      	str	r3, [sp, #4]
 8002c94:	f000 f870 	bl	8002d78 <_svfiprintf_r>
 8002c98:	2300      	movs	r3, #0
 8002c9a:	9a02      	ldr	r2, [sp, #8]
 8002c9c:	7013      	strb	r3, [r2, #0]
 8002c9e:	b01c      	add	sp, #112	; 0x70
 8002ca0:	bc08      	pop	{r3}
 8002ca2:	b003      	add	sp, #12
 8002ca4:	4718      	bx	r3
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	7fffffff 	.word	0x7fffffff
 8002cac:	2000000c 	.word	0x2000000c
 8002cb0:	ffff0208 	.word	0xffff0208

08002cb4 <__ssputs_r>:
 8002cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cb6:	688e      	ldr	r6, [r1, #8]
 8002cb8:	b085      	sub	sp, #20
 8002cba:	0007      	movs	r7, r0
 8002cbc:	000c      	movs	r4, r1
 8002cbe:	9203      	str	r2, [sp, #12]
 8002cc0:	9301      	str	r3, [sp, #4]
 8002cc2:	429e      	cmp	r6, r3
 8002cc4:	d83c      	bhi.n	8002d40 <__ssputs_r+0x8c>
 8002cc6:	2390      	movs	r3, #144	; 0x90
 8002cc8:	898a      	ldrh	r2, [r1, #12]
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	421a      	tst	r2, r3
 8002cce:	d034      	beq.n	8002d3a <__ssputs_r+0x86>
 8002cd0:	2503      	movs	r5, #3
 8002cd2:	6909      	ldr	r1, [r1, #16]
 8002cd4:	6823      	ldr	r3, [r4, #0]
 8002cd6:	1a5b      	subs	r3, r3, r1
 8002cd8:	9302      	str	r3, [sp, #8]
 8002cda:	6963      	ldr	r3, [r4, #20]
 8002cdc:	9802      	ldr	r0, [sp, #8]
 8002cde:	435d      	muls	r5, r3
 8002ce0:	0feb      	lsrs	r3, r5, #31
 8002ce2:	195d      	adds	r5, r3, r5
 8002ce4:	9b01      	ldr	r3, [sp, #4]
 8002ce6:	106d      	asrs	r5, r5, #1
 8002ce8:	3301      	adds	r3, #1
 8002cea:	181b      	adds	r3, r3, r0
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	d900      	bls.n	8002cf2 <__ssputs_r+0x3e>
 8002cf0:	001d      	movs	r5, r3
 8002cf2:	0553      	lsls	r3, r2, #21
 8002cf4:	d532      	bpl.n	8002d5c <__ssputs_r+0xa8>
 8002cf6:	0029      	movs	r1, r5
 8002cf8:	0038      	movs	r0, r7
 8002cfa:	f000 fb31 	bl	8003360 <_malloc_r>
 8002cfe:	1e06      	subs	r6, r0, #0
 8002d00:	d109      	bne.n	8002d16 <__ssputs_r+0x62>
 8002d02:	230c      	movs	r3, #12
 8002d04:	603b      	str	r3, [r7, #0]
 8002d06:	2340      	movs	r3, #64	; 0x40
 8002d08:	2001      	movs	r0, #1
 8002d0a:	89a2      	ldrh	r2, [r4, #12]
 8002d0c:	4240      	negs	r0, r0
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	81a3      	strh	r3, [r4, #12]
 8002d12:	b005      	add	sp, #20
 8002d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d16:	9a02      	ldr	r2, [sp, #8]
 8002d18:	6921      	ldr	r1, [r4, #16]
 8002d1a:	f000 faba 	bl	8003292 <memcpy>
 8002d1e:	89a3      	ldrh	r3, [r4, #12]
 8002d20:	4a14      	ldr	r2, [pc, #80]	; (8002d74 <__ssputs_r+0xc0>)
 8002d22:	401a      	ands	r2, r3
 8002d24:	2380      	movs	r3, #128	; 0x80
 8002d26:	4313      	orrs	r3, r2
 8002d28:	81a3      	strh	r3, [r4, #12]
 8002d2a:	9b02      	ldr	r3, [sp, #8]
 8002d2c:	6126      	str	r6, [r4, #16]
 8002d2e:	18f6      	adds	r6, r6, r3
 8002d30:	6026      	str	r6, [r4, #0]
 8002d32:	6165      	str	r5, [r4, #20]
 8002d34:	9e01      	ldr	r6, [sp, #4]
 8002d36:	1aed      	subs	r5, r5, r3
 8002d38:	60a5      	str	r5, [r4, #8]
 8002d3a:	9b01      	ldr	r3, [sp, #4]
 8002d3c:	429e      	cmp	r6, r3
 8002d3e:	d900      	bls.n	8002d42 <__ssputs_r+0x8e>
 8002d40:	9e01      	ldr	r6, [sp, #4]
 8002d42:	0032      	movs	r2, r6
 8002d44:	9903      	ldr	r1, [sp, #12]
 8002d46:	6820      	ldr	r0, [r4, #0]
 8002d48:	f000 faac 	bl	80032a4 <memmove>
 8002d4c:	68a3      	ldr	r3, [r4, #8]
 8002d4e:	2000      	movs	r0, #0
 8002d50:	1b9b      	subs	r3, r3, r6
 8002d52:	60a3      	str	r3, [r4, #8]
 8002d54:	6823      	ldr	r3, [r4, #0]
 8002d56:	199e      	adds	r6, r3, r6
 8002d58:	6026      	str	r6, [r4, #0]
 8002d5a:	e7da      	b.n	8002d12 <__ssputs_r+0x5e>
 8002d5c:	002a      	movs	r2, r5
 8002d5e:	0038      	movs	r0, r7
 8002d60:	f000 fb5c 	bl	800341c <_realloc_r>
 8002d64:	1e06      	subs	r6, r0, #0
 8002d66:	d1e0      	bne.n	8002d2a <__ssputs_r+0x76>
 8002d68:	0038      	movs	r0, r7
 8002d6a:	6921      	ldr	r1, [r4, #16]
 8002d6c:	f000 faae 	bl	80032cc <_free_r>
 8002d70:	e7c7      	b.n	8002d02 <__ssputs_r+0x4e>
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	fffffb7f 	.word	0xfffffb7f

08002d78 <_svfiprintf_r>:
 8002d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d7a:	b0a1      	sub	sp, #132	; 0x84
 8002d7c:	9003      	str	r0, [sp, #12]
 8002d7e:	001d      	movs	r5, r3
 8002d80:	898b      	ldrh	r3, [r1, #12]
 8002d82:	000f      	movs	r7, r1
 8002d84:	0016      	movs	r6, r2
 8002d86:	061b      	lsls	r3, r3, #24
 8002d88:	d511      	bpl.n	8002dae <_svfiprintf_r+0x36>
 8002d8a:	690b      	ldr	r3, [r1, #16]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10e      	bne.n	8002dae <_svfiprintf_r+0x36>
 8002d90:	2140      	movs	r1, #64	; 0x40
 8002d92:	f000 fae5 	bl	8003360 <_malloc_r>
 8002d96:	6038      	str	r0, [r7, #0]
 8002d98:	6138      	str	r0, [r7, #16]
 8002d9a:	2800      	cmp	r0, #0
 8002d9c:	d105      	bne.n	8002daa <_svfiprintf_r+0x32>
 8002d9e:	230c      	movs	r3, #12
 8002da0:	9a03      	ldr	r2, [sp, #12]
 8002da2:	3801      	subs	r0, #1
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	b021      	add	sp, #132	; 0x84
 8002da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002daa:	2340      	movs	r3, #64	; 0x40
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	2300      	movs	r3, #0
 8002db0:	ac08      	add	r4, sp, #32
 8002db2:	6163      	str	r3, [r4, #20]
 8002db4:	3320      	adds	r3, #32
 8002db6:	7663      	strb	r3, [r4, #25]
 8002db8:	3310      	adds	r3, #16
 8002dba:	76a3      	strb	r3, [r4, #26]
 8002dbc:	9507      	str	r5, [sp, #28]
 8002dbe:	0035      	movs	r5, r6
 8002dc0:	782b      	ldrb	r3, [r5, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <_svfiprintf_r+0x52>
 8002dc6:	2b25      	cmp	r3, #37	; 0x25
 8002dc8:	d147      	bne.n	8002e5a <_svfiprintf_r+0xe2>
 8002dca:	1bab      	subs	r3, r5, r6
 8002dcc:	9305      	str	r3, [sp, #20]
 8002dce:	42b5      	cmp	r5, r6
 8002dd0:	d00c      	beq.n	8002dec <_svfiprintf_r+0x74>
 8002dd2:	0032      	movs	r2, r6
 8002dd4:	0039      	movs	r1, r7
 8002dd6:	9803      	ldr	r0, [sp, #12]
 8002dd8:	f7ff ff6c 	bl	8002cb4 <__ssputs_r>
 8002ddc:	1c43      	adds	r3, r0, #1
 8002dde:	d100      	bne.n	8002de2 <_svfiprintf_r+0x6a>
 8002de0:	e0ae      	b.n	8002f40 <_svfiprintf_r+0x1c8>
 8002de2:	6962      	ldr	r2, [r4, #20]
 8002de4:	9b05      	ldr	r3, [sp, #20]
 8002de6:	4694      	mov	ip, r2
 8002de8:	4463      	add	r3, ip
 8002dea:	6163      	str	r3, [r4, #20]
 8002dec:	782b      	ldrb	r3, [r5, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d100      	bne.n	8002df4 <_svfiprintf_r+0x7c>
 8002df2:	e0a5      	b.n	8002f40 <_svfiprintf_r+0x1c8>
 8002df4:	2201      	movs	r2, #1
 8002df6:	2300      	movs	r3, #0
 8002df8:	4252      	negs	r2, r2
 8002dfa:	6062      	str	r2, [r4, #4]
 8002dfc:	a904      	add	r1, sp, #16
 8002dfe:	3254      	adds	r2, #84	; 0x54
 8002e00:	1852      	adds	r2, r2, r1
 8002e02:	1c6e      	adds	r6, r5, #1
 8002e04:	6023      	str	r3, [r4, #0]
 8002e06:	60e3      	str	r3, [r4, #12]
 8002e08:	60a3      	str	r3, [r4, #8]
 8002e0a:	7013      	strb	r3, [r2, #0]
 8002e0c:	65a3      	str	r3, [r4, #88]	; 0x58
 8002e0e:	2205      	movs	r2, #5
 8002e10:	7831      	ldrb	r1, [r6, #0]
 8002e12:	4854      	ldr	r0, [pc, #336]	; (8002f64 <_svfiprintf_r+0x1ec>)
 8002e14:	f000 fa32 	bl	800327c <memchr>
 8002e18:	1c75      	adds	r5, r6, #1
 8002e1a:	2800      	cmp	r0, #0
 8002e1c:	d11f      	bne.n	8002e5e <_svfiprintf_r+0xe6>
 8002e1e:	6822      	ldr	r2, [r4, #0]
 8002e20:	06d3      	lsls	r3, r2, #27
 8002e22:	d504      	bpl.n	8002e2e <_svfiprintf_r+0xb6>
 8002e24:	2353      	movs	r3, #83	; 0x53
 8002e26:	a904      	add	r1, sp, #16
 8002e28:	185b      	adds	r3, r3, r1
 8002e2a:	2120      	movs	r1, #32
 8002e2c:	7019      	strb	r1, [r3, #0]
 8002e2e:	0713      	lsls	r3, r2, #28
 8002e30:	d504      	bpl.n	8002e3c <_svfiprintf_r+0xc4>
 8002e32:	2353      	movs	r3, #83	; 0x53
 8002e34:	a904      	add	r1, sp, #16
 8002e36:	185b      	adds	r3, r3, r1
 8002e38:	212b      	movs	r1, #43	; 0x2b
 8002e3a:	7019      	strb	r1, [r3, #0]
 8002e3c:	7833      	ldrb	r3, [r6, #0]
 8002e3e:	2b2a      	cmp	r3, #42	; 0x2a
 8002e40:	d016      	beq.n	8002e70 <_svfiprintf_r+0xf8>
 8002e42:	0035      	movs	r5, r6
 8002e44:	2100      	movs	r1, #0
 8002e46:	200a      	movs	r0, #10
 8002e48:	68e3      	ldr	r3, [r4, #12]
 8002e4a:	782a      	ldrb	r2, [r5, #0]
 8002e4c:	1c6e      	adds	r6, r5, #1
 8002e4e:	3a30      	subs	r2, #48	; 0x30
 8002e50:	2a09      	cmp	r2, #9
 8002e52:	d94e      	bls.n	8002ef2 <_svfiprintf_r+0x17a>
 8002e54:	2900      	cmp	r1, #0
 8002e56:	d111      	bne.n	8002e7c <_svfiprintf_r+0x104>
 8002e58:	e017      	b.n	8002e8a <_svfiprintf_r+0x112>
 8002e5a:	3501      	adds	r5, #1
 8002e5c:	e7b0      	b.n	8002dc0 <_svfiprintf_r+0x48>
 8002e5e:	4b41      	ldr	r3, [pc, #260]	; (8002f64 <_svfiprintf_r+0x1ec>)
 8002e60:	6822      	ldr	r2, [r4, #0]
 8002e62:	1ac0      	subs	r0, r0, r3
 8002e64:	2301      	movs	r3, #1
 8002e66:	4083      	lsls	r3, r0
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	002e      	movs	r6, r5
 8002e6c:	6023      	str	r3, [r4, #0]
 8002e6e:	e7ce      	b.n	8002e0e <_svfiprintf_r+0x96>
 8002e70:	9b07      	ldr	r3, [sp, #28]
 8002e72:	1d19      	adds	r1, r3, #4
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	9107      	str	r1, [sp, #28]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	db01      	blt.n	8002e80 <_svfiprintf_r+0x108>
 8002e7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e7e:	e004      	b.n	8002e8a <_svfiprintf_r+0x112>
 8002e80:	425b      	negs	r3, r3
 8002e82:	60e3      	str	r3, [r4, #12]
 8002e84:	2302      	movs	r3, #2
 8002e86:	4313      	orrs	r3, r2
 8002e88:	6023      	str	r3, [r4, #0]
 8002e8a:	782b      	ldrb	r3, [r5, #0]
 8002e8c:	2b2e      	cmp	r3, #46	; 0x2e
 8002e8e:	d10a      	bne.n	8002ea6 <_svfiprintf_r+0x12e>
 8002e90:	786b      	ldrb	r3, [r5, #1]
 8002e92:	2b2a      	cmp	r3, #42	; 0x2a
 8002e94:	d135      	bne.n	8002f02 <_svfiprintf_r+0x18a>
 8002e96:	9b07      	ldr	r3, [sp, #28]
 8002e98:	3502      	adds	r5, #2
 8002e9a:	1d1a      	adds	r2, r3, #4
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	9207      	str	r2, [sp, #28]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	db2b      	blt.n	8002efc <_svfiprintf_r+0x184>
 8002ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8002ea6:	4e30      	ldr	r6, [pc, #192]	; (8002f68 <_svfiprintf_r+0x1f0>)
 8002ea8:	2203      	movs	r2, #3
 8002eaa:	0030      	movs	r0, r6
 8002eac:	7829      	ldrb	r1, [r5, #0]
 8002eae:	f000 f9e5 	bl	800327c <memchr>
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	d006      	beq.n	8002ec4 <_svfiprintf_r+0x14c>
 8002eb6:	2340      	movs	r3, #64	; 0x40
 8002eb8:	1b80      	subs	r0, r0, r6
 8002eba:	4083      	lsls	r3, r0
 8002ebc:	6822      	ldr	r2, [r4, #0]
 8002ebe:	3501      	adds	r5, #1
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	6023      	str	r3, [r4, #0]
 8002ec4:	7829      	ldrb	r1, [r5, #0]
 8002ec6:	2206      	movs	r2, #6
 8002ec8:	4828      	ldr	r0, [pc, #160]	; (8002f6c <_svfiprintf_r+0x1f4>)
 8002eca:	1c6e      	adds	r6, r5, #1
 8002ecc:	7621      	strb	r1, [r4, #24]
 8002ece:	f000 f9d5 	bl	800327c <memchr>
 8002ed2:	2800      	cmp	r0, #0
 8002ed4:	d03c      	beq.n	8002f50 <_svfiprintf_r+0x1d8>
 8002ed6:	4b26      	ldr	r3, [pc, #152]	; (8002f70 <_svfiprintf_r+0x1f8>)
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d125      	bne.n	8002f28 <_svfiprintf_r+0x1b0>
 8002edc:	2207      	movs	r2, #7
 8002ede:	9b07      	ldr	r3, [sp, #28]
 8002ee0:	3307      	adds	r3, #7
 8002ee2:	4393      	bics	r3, r2
 8002ee4:	3308      	adds	r3, #8
 8002ee6:	9307      	str	r3, [sp, #28]
 8002ee8:	6963      	ldr	r3, [r4, #20]
 8002eea:	9a04      	ldr	r2, [sp, #16]
 8002eec:	189b      	adds	r3, r3, r2
 8002eee:	6163      	str	r3, [r4, #20]
 8002ef0:	e765      	b.n	8002dbe <_svfiprintf_r+0x46>
 8002ef2:	4343      	muls	r3, r0
 8002ef4:	0035      	movs	r5, r6
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	189b      	adds	r3, r3, r2
 8002efa:	e7a6      	b.n	8002e4a <_svfiprintf_r+0xd2>
 8002efc:	2301      	movs	r3, #1
 8002efe:	425b      	negs	r3, r3
 8002f00:	e7d0      	b.n	8002ea4 <_svfiprintf_r+0x12c>
 8002f02:	2300      	movs	r3, #0
 8002f04:	200a      	movs	r0, #10
 8002f06:	001a      	movs	r2, r3
 8002f08:	3501      	adds	r5, #1
 8002f0a:	6063      	str	r3, [r4, #4]
 8002f0c:	7829      	ldrb	r1, [r5, #0]
 8002f0e:	1c6e      	adds	r6, r5, #1
 8002f10:	3930      	subs	r1, #48	; 0x30
 8002f12:	2909      	cmp	r1, #9
 8002f14:	d903      	bls.n	8002f1e <_svfiprintf_r+0x1a6>
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0c5      	beq.n	8002ea6 <_svfiprintf_r+0x12e>
 8002f1a:	9209      	str	r2, [sp, #36]	; 0x24
 8002f1c:	e7c3      	b.n	8002ea6 <_svfiprintf_r+0x12e>
 8002f1e:	4342      	muls	r2, r0
 8002f20:	0035      	movs	r5, r6
 8002f22:	2301      	movs	r3, #1
 8002f24:	1852      	adds	r2, r2, r1
 8002f26:	e7f1      	b.n	8002f0c <_svfiprintf_r+0x194>
 8002f28:	ab07      	add	r3, sp, #28
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	003a      	movs	r2, r7
 8002f2e:	0021      	movs	r1, r4
 8002f30:	4b10      	ldr	r3, [pc, #64]	; (8002f74 <_svfiprintf_r+0x1fc>)
 8002f32:	9803      	ldr	r0, [sp, #12]
 8002f34:	e000      	b.n	8002f38 <_svfiprintf_r+0x1c0>
 8002f36:	bf00      	nop
 8002f38:	9004      	str	r0, [sp, #16]
 8002f3a:	9b04      	ldr	r3, [sp, #16]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	d1d3      	bne.n	8002ee8 <_svfiprintf_r+0x170>
 8002f40:	89bb      	ldrh	r3, [r7, #12]
 8002f42:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002f44:	065b      	lsls	r3, r3, #25
 8002f46:	d400      	bmi.n	8002f4a <_svfiprintf_r+0x1d2>
 8002f48:	e72d      	b.n	8002da6 <_svfiprintf_r+0x2e>
 8002f4a:	2001      	movs	r0, #1
 8002f4c:	4240      	negs	r0, r0
 8002f4e:	e72a      	b.n	8002da6 <_svfiprintf_r+0x2e>
 8002f50:	ab07      	add	r3, sp, #28
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	003a      	movs	r2, r7
 8002f56:	0021      	movs	r1, r4
 8002f58:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <_svfiprintf_r+0x1fc>)
 8002f5a:	9803      	ldr	r0, [sp, #12]
 8002f5c:	f000 f87c 	bl	8003058 <_printf_i>
 8002f60:	e7ea      	b.n	8002f38 <_svfiprintf_r+0x1c0>
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	08003534 	.word	0x08003534
 8002f68:	0800353a 	.word	0x0800353a
 8002f6c:	0800353e 	.word	0x0800353e
 8002f70:	00000000 	.word	0x00000000
 8002f74:	08002cb5 	.word	0x08002cb5

08002f78 <_printf_common>:
 8002f78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f7a:	0015      	movs	r5, r2
 8002f7c:	9301      	str	r3, [sp, #4]
 8002f7e:	688a      	ldr	r2, [r1, #8]
 8002f80:	690b      	ldr	r3, [r1, #16]
 8002f82:	000c      	movs	r4, r1
 8002f84:	9000      	str	r0, [sp, #0]
 8002f86:	4293      	cmp	r3, r2
 8002f88:	da00      	bge.n	8002f8c <_printf_common+0x14>
 8002f8a:	0013      	movs	r3, r2
 8002f8c:	0022      	movs	r2, r4
 8002f8e:	602b      	str	r3, [r5, #0]
 8002f90:	3243      	adds	r2, #67	; 0x43
 8002f92:	7812      	ldrb	r2, [r2, #0]
 8002f94:	2a00      	cmp	r2, #0
 8002f96:	d001      	beq.n	8002f9c <_printf_common+0x24>
 8002f98:	3301      	adds	r3, #1
 8002f9a:	602b      	str	r3, [r5, #0]
 8002f9c:	6823      	ldr	r3, [r4, #0]
 8002f9e:	069b      	lsls	r3, r3, #26
 8002fa0:	d502      	bpl.n	8002fa8 <_printf_common+0x30>
 8002fa2:	682b      	ldr	r3, [r5, #0]
 8002fa4:	3302      	adds	r3, #2
 8002fa6:	602b      	str	r3, [r5, #0]
 8002fa8:	6822      	ldr	r2, [r4, #0]
 8002faa:	2306      	movs	r3, #6
 8002fac:	0017      	movs	r7, r2
 8002fae:	401f      	ands	r7, r3
 8002fb0:	421a      	tst	r2, r3
 8002fb2:	d027      	beq.n	8003004 <_printf_common+0x8c>
 8002fb4:	0023      	movs	r3, r4
 8002fb6:	3343      	adds	r3, #67	; 0x43
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	1e5a      	subs	r2, r3, #1
 8002fbc:	4193      	sbcs	r3, r2
 8002fbe:	6822      	ldr	r2, [r4, #0]
 8002fc0:	0692      	lsls	r2, r2, #26
 8002fc2:	d430      	bmi.n	8003026 <_printf_common+0xae>
 8002fc4:	0022      	movs	r2, r4
 8002fc6:	9901      	ldr	r1, [sp, #4]
 8002fc8:	9800      	ldr	r0, [sp, #0]
 8002fca:	9e08      	ldr	r6, [sp, #32]
 8002fcc:	3243      	adds	r2, #67	; 0x43
 8002fce:	47b0      	blx	r6
 8002fd0:	1c43      	adds	r3, r0, #1
 8002fd2:	d025      	beq.n	8003020 <_printf_common+0xa8>
 8002fd4:	2306      	movs	r3, #6
 8002fd6:	6820      	ldr	r0, [r4, #0]
 8002fd8:	682a      	ldr	r2, [r5, #0]
 8002fda:	68e1      	ldr	r1, [r4, #12]
 8002fdc:	2500      	movs	r5, #0
 8002fde:	4003      	ands	r3, r0
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d103      	bne.n	8002fec <_printf_common+0x74>
 8002fe4:	1a8d      	subs	r5, r1, r2
 8002fe6:	43eb      	mvns	r3, r5
 8002fe8:	17db      	asrs	r3, r3, #31
 8002fea:	401d      	ands	r5, r3
 8002fec:	68a3      	ldr	r3, [r4, #8]
 8002fee:	6922      	ldr	r2, [r4, #16]
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	dd01      	ble.n	8002ff8 <_printf_common+0x80>
 8002ff4:	1a9b      	subs	r3, r3, r2
 8002ff6:	18ed      	adds	r5, r5, r3
 8002ff8:	2700      	movs	r7, #0
 8002ffa:	42bd      	cmp	r5, r7
 8002ffc:	d120      	bne.n	8003040 <_printf_common+0xc8>
 8002ffe:	2000      	movs	r0, #0
 8003000:	e010      	b.n	8003024 <_printf_common+0xac>
 8003002:	3701      	adds	r7, #1
 8003004:	68e3      	ldr	r3, [r4, #12]
 8003006:	682a      	ldr	r2, [r5, #0]
 8003008:	1a9b      	subs	r3, r3, r2
 800300a:	42bb      	cmp	r3, r7
 800300c:	ddd2      	ble.n	8002fb4 <_printf_common+0x3c>
 800300e:	0022      	movs	r2, r4
 8003010:	2301      	movs	r3, #1
 8003012:	9901      	ldr	r1, [sp, #4]
 8003014:	9800      	ldr	r0, [sp, #0]
 8003016:	9e08      	ldr	r6, [sp, #32]
 8003018:	3219      	adds	r2, #25
 800301a:	47b0      	blx	r6
 800301c:	1c43      	adds	r3, r0, #1
 800301e:	d1f0      	bne.n	8003002 <_printf_common+0x8a>
 8003020:	2001      	movs	r0, #1
 8003022:	4240      	negs	r0, r0
 8003024:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003026:	2030      	movs	r0, #48	; 0x30
 8003028:	18e1      	adds	r1, r4, r3
 800302a:	3143      	adds	r1, #67	; 0x43
 800302c:	7008      	strb	r0, [r1, #0]
 800302e:	0021      	movs	r1, r4
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	3145      	adds	r1, #69	; 0x45
 8003034:	7809      	ldrb	r1, [r1, #0]
 8003036:	18a2      	adds	r2, r4, r2
 8003038:	3243      	adds	r2, #67	; 0x43
 800303a:	3302      	adds	r3, #2
 800303c:	7011      	strb	r1, [r2, #0]
 800303e:	e7c1      	b.n	8002fc4 <_printf_common+0x4c>
 8003040:	0022      	movs	r2, r4
 8003042:	2301      	movs	r3, #1
 8003044:	9901      	ldr	r1, [sp, #4]
 8003046:	9800      	ldr	r0, [sp, #0]
 8003048:	9e08      	ldr	r6, [sp, #32]
 800304a:	321a      	adds	r2, #26
 800304c:	47b0      	blx	r6
 800304e:	1c43      	adds	r3, r0, #1
 8003050:	d0e6      	beq.n	8003020 <_printf_common+0xa8>
 8003052:	3701      	adds	r7, #1
 8003054:	e7d1      	b.n	8002ffa <_printf_common+0x82>
	...

08003058 <_printf_i>:
 8003058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800305a:	b08b      	sub	sp, #44	; 0x2c
 800305c:	9206      	str	r2, [sp, #24]
 800305e:	000a      	movs	r2, r1
 8003060:	3243      	adds	r2, #67	; 0x43
 8003062:	9307      	str	r3, [sp, #28]
 8003064:	9005      	str	r0, [sp, #20]
 8003066:	9204      	str	r2, [sp, #16]
 8003068:	7e0a      	ldrb	r2, [r1, #24]
 800306a:	000c      	movs	r4, r1
 800306c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800306e:	2a78      	cmp	r2, #120	; 0x78
 8003070:	d806      	bhi.n	8003080 <_printf_i+0x28>
 8003072:	2a62      	cmp	r2, #98	; 0x62
 8003074:	d808      	bhi.n	8003088 <_printf_i+0x30>
 8003076:	2a00      	cmp	r2, #0
 8003078:	d100      	bne.n	800307c <_printf_i+0x24>
 800307a:	e0c0      	b.n	80031fe <_printf_i+0x1a6>
 800307c:	2a58      	cmp	r2, #88	; 0x58
 800307e:	d052      	beq.n	8003126 <_printf_i+0xce>
 8003080:	0026      	movs	r6, r4
 8003082:	3642      	adds	r6, #66	; 0x42
 8003084:	7032      	strb	r2, [r6, #0]
 8003086:	e022      	b.n	80030ce <_printf_i+0x76>
 8003088:	0010      	movs	r0, r2
 800308a:	3863      	subs	r0, #99	; 0x63
 800308c:	2815      	cmp	r0, #21
 800308e:	d8f7      	bhi.n	8003080 <_printf_i+0x28>
 8003090:	f7fd f842 	bl	8000118 <__gnu_thumb1_case_shi>
 8003094:	001f0016 	.word	0x001f0016
 8003098:	fff6fff6 	.word	0xfff6fff6
 800309c:	fff6fff6 	.word	0xfff6fff6
 80030a0:	fff6001f 	.word	0xfff6001f
 80030a4:	fff6fff6 	.word	0xfff6fff6
 80030a8:	00a8fff6 	.word	0x00a8fff6
 80030ac:	009a0036 	.word	0x009a0036
 80030b0:	fff6fff6 	.word	0xfff6fff6
 80030b4:	fff600b9 	.word	0xfff600b9
 80030b8:	fff60036 	.word	0xfff60036
 80030bc:	009efff6 	.word	0x009efff6
 80030c0:	0026      	movs	r6, r4
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	3642      	adds	r6, #66	; 0x42
 80030c6:	1d11      	adds	r1, r2, #4
 80030c8:	6019      	str	r1, [r3, #0]
 80030ca:	6813      	ldr	r3, [r2, #0]
 80030cc:	7033      	strb	r3, [r6, #0]
 80030ce:	2301      	movs	r3, #1
 80030d0:	e0a7      	b.n	8003222 <_printf_i+0x1ca>
 80030d2:	6808      	ldr	r0, [r1, #0]
 80030d4:	6819      	ldr	r1, [r3, #0]
 80030d6:	1d0a      	adds	r2, r1, #4
 80030d8:	0605      	lsls	r5, r0, #24
 80030da:	d50b      	bpl.n	80030f4 <_printf_i+0x9c>
 80030dc:	680d      	ldr	r5, [r1, #0]
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	2d00      	cmp	r5, #0
 80030e2:	da03      	bge.n	80030ec <_printf_i+0x94>
 80030e4:	232d      	movs	r3, #45	; 0x2d
 80030e6:	9a04      	ldr	r2, [sp, #16]
 80030e8:	426d      	negs	r5, r5
 80030ea:	7013      	strb	r3, [r2, #0]
 80030ec:	4b61      	ldr	r3, [pc, #388]	; (8003274 <_printf_i+0x21c>)
 80030ee:	270a      	movs	r7, #10
 80030f0:	9303      	str	r3, [sp, #12]
 80030f2:	e032      	b.n	800315a <_printf_i+0x102>
 80030f4:	680d      	ldr	r5, [r1, #0]
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	0641      	lsls	r1, r0, #25
 80030fa:	d5f1      	bpl.n	80030e0 <_printf_i+0x88>
 80030fc:	b22d      	sxth	r5, r5
 80030fe:	e7ef      	b.n	80030e0 <_printf_i+0x88>
 8003100:	680d      	ldr	r5, [r1, #0]
 8003102:	6819      	ldr	r1, [r3, #0]
 8003104:	1d08      	adds	r0, r1, #4
 8003106:	6018      	str	r0, [r3, #0]
 8003108:	062e      	lsls	r6, r5, #24
 800310a:	d501      	bpl.n	8003110 <_printf_i+0xb8>
 800310c:	680d      	ldr	r5, [r1, #0]
 800310e:	e003      	b.n	8003118 <_printf_i+0xc0>
 8003110:	066d      	lsls	r5, r5, #25
 8003112:	d5fb      	bpl.n	800310c <_printf_i+0xb4>
 8003114:	680d      	ldr	r5, [r1, #0]
 8003116:	b2ad      	uxth	r5, r5
 8003118:	4b56      	ldr	r3, [pc, #344]	; (8003274 <_printf_i+0x21c>)
 800311a:	270a      	movs	r7, #10
 800311c:	9303      	str	r3, [sp, #12]
 800311e:	2a6f      	cmp	r2, #111	; 0x6f
 8003120:	d117      	bne.n	8003152 <_printf_i+0xfa>
 8003122:	2708      	movs	r7, #8
 8003124:	e015      	b.n	8003152 <_printf_i+0xfa>
 8003126:	3145      	adds	r1, #69	; 0x45
 8003128:	700a      	strb	r2, [r1, #0]
 800312a:	4a52      	ldr	r2, [pc, #328]	; (8003274 <_printf_i+0x21c>)
 800312c:	9203      	str	r2, [sp, #12]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	6821      	ldr	r1, [r4, #0]
 8003132:	ca20      	ldmia	r2!, {r5}
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	0608      	lsls	r0, r1, #24
 8003138:	d550      	bpl.n	80031dc <_printf_i+0x184>
 800313a:	07cb      	lsls	r3, r1, #31
 800313c:	d502      	bpl.n	8003144 <_printf_i+0xec>
 800313e:	2320      	movs	r3, #32
 8003140:	4319      	orrs	r1, r3
 8003142:	6021      	str	r1, [r4, #0]
 8003144:	2710      	movs	r7, #16
 8003146:	2d00      	cmp	r5, #0
 8003148:	d103      	bne.n	8003152 <_printf_i+0xfa>
 800314a:	2320      	movs	r3, #32
 800314c:	6822      	ldr	r2, [r4, #0]
 800314e:	439a      	bics	r2, r3
 8003150:	6022      	str	r2, [r4, #0]
 8003152:	0023      	movs	r3, r4
 8003154:	2200      	movs	r2, #0
 8003156:	3343      	adds	r3, #67	; 0x43
 8003158:	701a      	strb	r2, [r3, #0]
 800315a:	6863      	ldr	r3, [r4, #4]
 800315c:	60a3      	str	r3, [r4, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	db03      	blt.n	800316a <_printf_i+0x112>
 8003162:	2204      	movs	r2, #4
 8003164:	6821      	ldr	r1, [r4, #0]
 8003166:	4391      	bics	r1, r2
 8003168:	6021      	str	r1, [r4, #0]
 800316a:	2d00      	cmp	r5, #0
 800316c:	d102      	bne.n	8003174 <_printf_i+0x11c>
 800316e:	9e04      	ldr	r6, [sp, #16]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00c      	beq.n	800318e <_printf_i+0x136>
 8003174:	9e04      	ldr	r6, [sp, #16]
 8003176:	0028      	movs	r0, r5
 8003178:	0039      	movs	r1, r7
 800317a:	f7fd f85d 	bl	8000238 <__aeabi_uidivmod>
 800317e:	9b03      	ldr	r3, [sp, #12]
 8003180:	3e01      	subs	r6, #1
 8003182:	5c5b      	ldrb	r3, [r3, r1]
 8003184:	7033      	strb	r3, [r6, #0]
 8003186:	002b      	movs	r3, r5
 8003188:	0005      	movs	r5, r0
 800318a:	429f      	cmp	r7, r3
 800318c:	d9f3      	bls.n	8003176 <_printf_i+0x11e>
 800318e:	2f08      	cmp	r7, #8
 8003190:	d109      	bne.n	80031a6 <_printf_i+0x14e>
 8003192:	6823      	ldr	r3, [r4, #0]
 8003194:	07db      	lsls	r3, r3, #31
 8003196:	d506      	bpl.n	80031a6 <_printf_i+0x14e>
 8003198:	6863      	ldr	r3, [r4, #4]
 800319a:	6922      	ldr	r2, [r4, #16]
 800319c:	4293      	cmp	r3, r2
 800319e:	dc02      	bgt.n	80031a6 <_printf_i+0x14e>
 80031a0:	2330      	movs	r3, #48	; 0x30
 80031a2:	3e01      	subs	r6, #1
 80031a4:	7033      	strb	r3, [r6, #0]
 80031a6:	9b04      	ldr	r3, [sp, #16]
 80031a8:	1b9b      	subs	r3, r3, r6
 80031aa:	6123      	str	r3, [r4, #16]
 80031ac:	9b07      	ldr	r3, [sp, #28]
 80031ae:	0021      	movs	r1, r4
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	9805      	ldr	r0, [sp, #20]
 80031b4:	9b06      	ldr	r3, [sp, #24]
 80031b6:	aa09      	add	r2, sp, #36	; 0x24
 80031b8:	f7ff fede 	bl	8002f78 <_printf_common>
 80031bc:	1c43      	adds	r3, r0, #1
 80031be:	d135      	bne.n	800322c <_printf_i+0x1d4>
 80031c0:	2001      	movs	r0, #1
 80031c2:	4240      	negs	r0, r0
 80031c4:	b00b      	add	sp, #44	; 0x2c
 80031c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031c8:	2220      	movs	r2, #32
 80031ca:	6809      	ldr	r1, [r1, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	6022      	str	r2, [r4, #0]
 80031d0:	0022      	movs	r2, r4
 80031d2:	2178      	movs	r1, #120	; 0x78
 80031d4:	3245      	adds	r2, #69	; 0x45
 80031d6:	7011      	strb	r1, [r2, #0]
 80031d8:	4a27      	ldr	r2, [pc, #156]	; (8003278 <_printf_i+0x220>)
 80031da:	e7a7      	b.n	800312c <_printf_i+0xd4>
 80031dc:	0648      	lsls	r0, r1, #25
 80031de:	d5ac      	bpl.n	800313a <_printf_i+0xe2>
 80031e0:	b2ad      	uxth	r5, r5
 80031e2:	e7aa      	b.n	800313a <_printf_i+0xe2>
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	680d      	ldr	r5, [r1, #0]
 80031e8:	1d10      	adds	r0, r2, #4
 80031ea:	6949      	ldr	r1, [r1, #20]
 80031ec:	6018      	str	r0, [r3, #0]
 80031ee:	6813      	ldr	r3, [r2, #0]
 80031f0:	062e      	lsls	r6, r5, #24
 80031f2:	d501      	bpl.n	80031f8 <_printf_i+0x1a0>
 80031f4:	6019      	str	r1, [r3, #0]
 80031f6:	e002      	b.n	80031fe <_printf_i+0x1a6>
 80031f8:	066d      	lsls	r5, r5, #25
 80031fa:	d5fb      	bpl.n	80031f4 <_printf_i+0x19c>
 80031fc:	8019      	strh	r1, [r3, #0]
 80031fe:	2300      	movs	r3, #0
 8003200:	9e04      	ldr	r6, [sp, #16]
 8003202:	6123      	str	r3, [r4, #16]
 8003204:	e7d2      	b.n	80031ac <_printf_i+0x154>
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	1d11      	adds	r1, r2, #4
 800320a:	6019      	str	r1, [r3, #0]
 800320c:	6816      	ldr	r6, [r2, #0]
 800320e:	2100      	movs	r1, #0
 8003210:	0030      	movs	r0, r6
 8003212:	6862      	ldr	r2, [r4, #4]
 8003214:	f000 f832 	bl	800327c <memchr>
 8003218:	2800      	cmp	r0, #0
 800321a:	d001      	beq.n	8003220 <_printf_i+0x1c8>
 800321c:	1b80      	subs	r0, r0, r6
 800321e:	6060      	str	r0, [r4, #4]
 8003220:	6863      	ldr	r3, [r4, #4]
 8003222:	6123      	str	r3, [r4, #16]
 8003224:	2300      	movs	r3, #0
 8003226:	9a04      	ldr	r2, [sp, #16]
 8003228:	7013      	strb	r3, [r2, #0]
 800322a:	e7bf      	b.n	80031ac <_printf_i+0x154>
 800322c:	6923      	ldr	r3, [r4, #16]
 800322e:	0032      	movs	r2, r6
 8003230:	9906      	ldr	r1, [sp, #24]
 8003232:	9805      	ldr	r0, [sp, #20]
 8003234:	9d07      	ldr	r5, [sp, #28]
 8003236:	47a8      	blx	r5
 8003238:	1c43      	adds	r3, r0, #1
 800323a:	d0c1      	beq.n	80031c0 <_printf_i+0x168>
 800323c:	6823      	ldr	r3, [r4, #0]
 800323e:	079b      	lsls	r3, r3, #30
 8003240:	d415      	bmi.n	800326e <_printf_i+0x216>
 8003242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003244:	68e0      	ldr	r0, [r4, #12]
 8003246:	4298      	cmp	r0, r3
 8003248:	dabc      	bge.n	80031c4 <_printf_i+0x16c>
 800324a:	0018      	movs	r0, r3
 800324c:	e7ba      	b.n	80031c4 <_printf_i+0x16c>
 800324e:	0022      	movs	r2, r4
 8003250:	2301      	movs	r3, #1
 8003252:	9906      	ldr	r1, [sp, #24]
 8003254:	9805      	ldr	r0, [sp, #20]
 8003256:	9e07      	ldr	r6, [sp, #28]
 8003258:	3219      	adds	r2, #25
 800325a:	47b0      	blx	r6
 800325c:	1c43      	adds	r3, r0, #1
 800325e:	d0af      	beq.n	80031c0 <_printf_i+0x168>
 8003260:	3501      	adds	r5, #1
 8003262:	68e3      	ldr	r3, [r4, #12]
 8003264:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003266:	1a9b      	subs	r3, r3, r2
 8003268:	42ab      	cmp	r3, r5
 800326a:	dcf0      	bgt.n	800324e <_printf_i+0x1f6>
 800326c:	e7e9      	b.n	8003242 <_printf_i+0x1ea>
 800326e:	2500      	movs	r5, #0
 8003270:	e7f7      	b.n	8003262 <_printf_i+0x20a>
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	08003545 	.word	0x08003545
 8003278:	08003556 	.word	0x08003556

0800327c <memchr>:
 800327c:	b2c9      	uxtb	r1, r1
 800327e:	1882      	adds	r2, r0, r2
 8003280:	4290      	cmp	r0, r2
 8003282:	d101      	bne.n	8003288 <memchr+0xc>
 8003284:	2000      	movs	r0, #0
 8003286:	4770      	bx	lr
 8003288:	7803      	ldrb	r3, [r0, #0]
 800328a:	428b      	cmp	r3, r1
 800328c:	d0fb      	beq.n	8003286 <memchr+0xa>
 800328e:	3001      	adds	r0, #1
 8003290:	e7f6      	b.n	8003280 <memchr+0x4>

08003292 <memcpy>:
 8003292:	2300      	movs	r3, #0
 8003294:	b510      	push	{r4, lr}
 8003296:	429a      	cmp	r2, r3
 8003298:	d100      	bne.n	800329c <memcpy+0xa>
 800329a:	bd10      	pop	{r4, pc}
 800329c:	5ccc      	ldrb	r4, [r1, r3]
 800329e:	54c4      	strb	r4, [r0, r3]
 80032a0:	3301      	adds	r3, #1
 80032a2:	e7f8      	b.n	8003296 <memcpy+0x4>

080032a4 <memmove>:
 80032a4:	b510      	push	{r4, lr}
 80032a6:	4288      	cmp	r0, r1
 80032a8:	d902      	bls.n	80032b0 <memmove+0xc>
 80032aa:	188b      	adds	r3, r1, r2
 80032ac:	4298      	cmp	r0, r3
 80032ae:	d303      	bcc.n	80032b8 <memmove+0x14>
 80032b0:	2300      	movs	r3, #0
 80032b2:	e007      	b.n	80032c4 <memmove+0x20>
 80032b4:	5c8b      	ldrb	r3, [r1, r2]
 80032b6:	5483      	strb	r3, [r0, r2]
 80032b8:	3a01      	subs	r2, #1
 80032ba:	d2fb      	bcs.n	80032b4 <memmove+0x10>
 80032bc:	bd10      	pop	{r4, pc}
 80032be:	5ccc      	ldrb	r4, [r1, r3]
 80032c0:	54c4      	strb	r4, [r0, r3]
 80032c2:	3301      	adds	r3, #1
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d1fa      	bne.n	80032be <memmove+0x1a>
 80032c8:	e7f8      	b.n	80032bc <memmove+0x18>
	...

080032cc <_free_r>:
 80032cc:	b570      	push	{r4, r5, r6, lr}
 80032ce:	0005      	movs	r5, r0
 80032d0:	2900      	cmp	r1, #0
 80032d2:	d010      	beq.n	80032f6 <_free_r+0x2a>
 80032d4:	1f0c      	subs	r4, r1, #4
 80032d6:	6823      	ldr	r3, [r4, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	da00      	bge.n	80032de <_free_r+0x12>
 80032dc:	18e4      	adds	r4, r4, r3
 80032de:	0028      	movs	r0, r5
 80032e0:	f000 f8d4 	bl	800348c <__malloc_lock>
 80032e4:	4a1d      	ldr	r2, [pc, #116]	; (800335c <_free_r+0x90>)
 80032e6:	6813      	ldr	r3, [r2, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d105      	bne.n	80032f8 <_free_r+0x2c>
 80032ec:	6063      	str	r3, [r4, #4]
 80032ee:	6014      	str	r4, [r2, #0]
 80032f0:	0028      	movs	r0, r5
 80032f2:	f000 f8d3 	bl	800349c <__malloc_unlock>
 80032f6:	bd70      	pop	{r4, r5, r6, pc}
 80032f8:	42a3      	cmp	r3, r4
 80032fa:	d908      	bls.n	800330e <_free_r+0x42>
 80032fc:	6821      	ldr	r1, [r4, #0]
 80032fe:	1860      	adds	r0, r4, r1
 8003300:	4283      	cmp	r3, r0
 8003302:	d1f3      	bne.n	80032ec <_free_r+0x20>
 8003304:	6818      	ldr	r0, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	1841      	adds	r1, r0, r1
 800330a:	6021      	str	r1, [r4, #0]
 800330c:	e7ee      	b.n	80032ec <_free_r+0x20>
 800330e:	001a      	movs	r2, r3
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <_free_r+0x4e>
 8003316:	42a3      	cmp	r3, r4
 8003318:	d9f9      	bls.n	800330e <_free_r+0x42>
 800331a:	6811      	ldr	r1, [r2, #0]
 800331c:	1850      	adds	r0, r2, r1
 800331e:	42a0      	cmp	r0, r4
 8003320:	d10b      	bne.n	800333a <_free_r+0x6e>
 8003322:	6820      	ldr	r0, [r4, #0]
 8003324:	1809      	adds	r1, r1, r0
 8003326:	1850      	adds	r0, r2, r1
 8003328:	6011      	str	r1, [r2, #0]
 800332a:	4283      	cmp	r3, r0
 800332c:	d1e0      	bne.n	80032f0 <_free_r+0x24>
 800332e:	6818      	ldr	r0, [r3, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	1841      	adds	r1, r0, r1
 8003334:	6011      	str	r1, [r2, #0]
 8003336:	6053      	str	r3, [r2, #4]
 8003338:	e7da      	b.n	80032f0 <_free_r+0x24>
 800333a:	42a0      	cmp	r0, r4
 800333c:	d902      	bls.n	8003344 <_free_r+0x78>
 800333e:	230c      	movs	r3, #12
 8003340:	602b      	str	r3, [r5, #0]
 8003342:	e7d5      	b.n	80032f0 <_free_r+0x24>
 8003344:	6821      	ldr	r1, [r4, #0]
 8003346:	1860      	adds	r0, r4, r1
 8003348:	4283      	cmp	r3, r0
 800334a:	d103      	bne.n	8003354 <_free_r+0x88>
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	1841      	adds	r1, r0, r1
 8003352:	6021      	str	r1, [r4, #0]
 8003354:	6063      	str	r3, [r4, #4]
 8003356:	6054      	str	r4, [r2, #4]
 8003358:	e7ca      	b.n	80032f0 <_free_r+0x24>
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	20000090 	.word	0x20000090

08003360 <_malloc_r>:
 8003360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003362:	2303      	movs	r3, #3
 8003364:	1ccd      	adds	r5, r1, #3
 8003366:	439d      	bics	r5, r3
 8003368:	3508      	adds	r5, #8
 800336a:	0006      	movs	r6, r0
 800336c:	2d0c      	cmp	r5, #12
 800336e:	d21f      	bcs.n	80033b0 <_malloc_r+0x50>
 8003370:	250c      	movs	r5, #12
 8003372:	42a9      	cmp	r1, r5
 8003374:	d81e      	bhi.n	80033b4 <_malloc_r+0x54>
 8003376:	0030      	movs	r0, r6
 8003378:	f000 f888 	bl	800348c <__malloc_lock>
 800337c:	4925      	ldr	r1, [pc, #148]	; (8003414 <_malloc_r+0xb4>)
 800337e:	680a      	ldr	r2, [r1, #0]
 8003380:	0014      	movs	r4, r2
 8003382:	2c00      	cmp	r4, #0
 8003384:	d11a      	bne.n	80033bc <_malloc_r+0x5c>
 8003386:	4f24      	ldr	r7, [pc, #144]	; (8003418 <_malloc_r+0xb8>)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d104      	bne.n	8003398 <_malloc_r+0x38>
 800338e:	0021      	movs	r1, r4
 8003390:	0030      	movs	r0, r6
 8003392:	f000 f869 	bl	8003468 <_sbrk_r>
 8003396:	6038      	str	r0, [r7, #0]
 8003398:	0029      	movs	r1, r5
 800339a:	0030      	movs	r0, r6
 800339c:	f000 f864 	bl	8003468 <_sbrk_r>
 80033a0:	1c43      	adds	r3, r0, #1
 80033a2:	d12b      	bne.n	80033fc <_malloc_r+0x9c>
 80033a4:	230c      	movs	r3, #12
 80033a6:	0030      	movs	r0, r6
 80033a8:	6033      	str	r3, [r6, #0]
 80033aa:	f000 f877 	bl	800349c <__malloc_unlock>
 80033ae:	e003      	b.n	80033b8 <_malloc_r+0x58>
 80033b0:	2d00      	cmp	r5, #0
 80033b2:	dade      	bge.n	8003372 <_malloc_r+0x12>
 80033b4:	230c      	movs	r3, #12
 80033b6:	6033      	str	r3, [r6, #0]
 80033b8:	2000      	movs	r0, #0
 80033ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033bc:	6823      	ldr	r3, [r4, #0]
 80033be:	1b5b      	subs	r3, r3, r5
 80033c0:	d419      	bmi.n	80033f6 <_malloc_r+0x96>
 80033c2:	2b0b      	cmp	r3, #11
 80033c4:	d903      	bls.n	80033ce <_malloc_r+0x6e>
 80033c6:	6023      	str	r3, [r4, #0]
 80033c8:	18e4      	adds	r4, r4, r3
 80033ca:	6025      	str	r5, [r4, #0]
 80033cc:	e003      	b.n	80033d6 <_malloc_r+0x76>
 80033ce:	6863      	ldr	r3, [r4, #4]
 80033d0:	42a2      	cmp	r2, r4
 80033d2:	d10e      	bne.n	80033f2 <_malloc_r+0x92>
 80033d4:	600b      	str	r3, [r1, #0]
 80033d6:	0030      	movs	r0, r6
 80033d8:	f000 f860 	bl	800349c <__malloc_unlock>
 80033dc:	0020      	movs	r0, r4
 80033de:	2207      	movs	r2, #7
 80033e0:	300b      	adds	r0, #11
 80033e2:	1d23      	adds	r3, r4, #4
 80033e4:	4390      	bics	r0, r2
 80033e6:	1ac2      	subs	r2, r0, r3
 80033e8:	4298      	cmp	r0, r3
 80033ea:	d0e6      	beq.n	80033ba <_malloc_r+0x5a>
 80033ec:	1a1b      	subs	r3, r3, r0
 80033ee:	50a3      	str	r3, [r4, r2]
 80033f0:	e7e3      	b.n	80033ba <_malloc_r+0x5a>
 80033f2:	6053      	str	r3, [r2, #4]
 80033f4:	e7ef      	b.n	80033d6 <_malloc_r+0x76>
 80033f6:	0022      	movs	r2, r4
 80033f8:	6864      	ldr	r4, [r4, #4]
 80033fa:	e7c2      	b.n	8003382 <_malloc_r+0x22>
 80033fc:	2303      	movs	r3, #3
 80033fe:	1cc4      	adds	r4, r0, #3
 8003400:	439c      	bics	r4, r3
 8003402:	42a0      	cmp	r0, r4
 8003404:	d0e1      	beq.n	80033ca <_malloc_r+0x6a>
 8003406:	1a21      	subs	r1, r4, r0
 8003408:	0030      	movs	r0, r6
 800340a:	f000 f82d 	bl	8003468 <_sbrk_r>
 800340e:	1c43      	adds	r3, r0, #1
 8003410:	d1db      	bne.n	80033ca <_malloc_r+0x6a>
 8003412:	e7c7      	b.n	80033a4 <_malloc_r+0x44>
 8003414:	20000090 	.word	0x20000090
 8003418:	20000094 	.word	0x20000094

0800341c <_realloc_r>:
 800341c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800341e:	0007      	movs	r7, r0
 8003420:	000d      	movs	r5, r1
 8003422:	0016      	movs	r6, r2
 8003424:	2900      	cmp	r1, #0
 8003426:	d105      	bne.n	8003434 <_realloc_r+0x18>
 8003428:	0011      	movs	r1, r2
 800342a:	f7ff ff99 	bl	8003360 <_malloc_r>
 800342e:	0004      	movs	r4, r0
 8003430:	0020      	movs	r0, r4
 8003432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003434:	2a00      	cmp	r2, #0
 8003436:	d103      	bne.n	8003440 <_realloc_r+0x24>
 8003438:	f7ff ff48 	bl	80032cc <_free_r>
 800343c:	0034      	movs	r4, r6
 800343e:	e7f7      	b.n	8003430 <_realloc_r+0x14>
 8003440:	f000 f834 	bl	80034ac <_malloc_usable_size_r>
 8003444:	002c      	movs	r4, r5
 8003446:	42b0      	cmp	r0, r6
 8003448:	d2f2      	bcs.n	8003430 <_realloc_r+0x14>
 800344a:	0031      	movs	r1, r6
 800344c:	0038      	movs	r0, r7
 800344e:	f7ff ff87 	bl	8003360 <_malloc_r>
 8003452:	1e04      	subs	r4, r0, #0
 8003454:	d0ec      	beq.n	8003430 <_realloc_r+0x14>
 8003456:	0029      	movs	r1, r5
 8003458:	0032      	movs	r2, r6
 800345a:	f7ff ff1a 	bl	8003292 <memcpy>
 800345e:	0029      	movs	r1, r5
 8003460:	0038      	movs	r0, r7
 8003462:	f7ff ff33 	bl	80032cc <_free_r>
 8003466:	e7e3      	b.n	8003430 <_realloc_r+0x14>

08003468 <_sbrk_r>:
 8003468:	2300      	movs	r3, #0
 800346a:	b570      	push	{r4, r5, r6, lr}
 800346c:	4d06      	ldr	r5, [pc, #24]	; (8003488 <_sbrk_r+0x20>)
 800346e:	0004      	movs	r4, r0
 8003470:	0008      	movs	r0, r1
 8003472:	602b      	str	r3, [r5, #0]
 8003474:	f7fd f88e 	bl	8000594 <_sbrk>
 8003478:	1c43      	adds	r3, r0, #1
 800347a:	d103      	bne.n	8003484 <_sbrk_r+0x1c>
 800347c:	682b      	ldr	r3, [r5, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d000      	beq.n	8003484 <_sbrk_r+0x1c>
 8003482:	6023      	str	r3, [r4, #0]
 8003484:	bd70      	pop	{r4, r5, r6, pc}
 8003486:	46c0      	nop			; (mov r8, r8)
 8003488:	20000124 	.word	0x20000124

0800348c <__malloc_lock>:
 800348c:	b510      	push	{r4, lr}
 800348e:	4802      	ldr	r0, [pc, #8]	; (8003498 <__malloc_lock+0xc>)
 8003490:	f000 f814 	bl	80034bc <__retarget_lock_acquire_recursive>
 8003494:	bd10      	pop	{r4, pc}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	2000012c 	.word	0x2000012c

0800349c <__malloc_unlock>:
 800349c:	b510      	push	{r4, lr}
 800349e:	4802      	ldr	r0, [pc, #8]	; (80034a8 <__malloc_unlock+0xc>)
 80034a0:	f000 f80d 	bl	80034be <__retarget_lock_release_recursive>
 80034a4:	bd10      	pop	{r4, pc}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	2000012c 	.word	0x2000012c

080034ac <_malloc_usable_size_r>:
 80034ac:	1f0b      	subs	r3, r1, #4
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	1f18      	subs	r0, r3, #4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	da01      	bge.n	80034ba <_malloc_usable_size_r+0xe>
 80034b6:	580b      	ldr	r3, [r1, r0]
 80034b8:	18c0      	adds	r0, r0, r3
 80034ba:	4770      	bx	lr

080034bc <__retarget_lock_acquire_recursive>:
 80034bc:	4770      	bx	lr

080034be <__retarget_lock_release_recursive>:
 80034be:	4770      	bx	lr

080034c0 <_init>:
 80034c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034c6:	bc08      	pop	{r3}
 80034c8:	469e      	mov	lr, r3
 80034ca:	4770      	bx	lr

080034cc <_fini>:
 80034cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034d2:	bc08      	pop	{r3}
 80034d4:	469e      	mov	lr, r3
 80034d6:	4770      	bx	lr
