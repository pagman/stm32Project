
plink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034ac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  0800356c  0800356c  0001356c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037dc  080037dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080037dc  080037dc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037dc  080037dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037dc  080037dc  000137dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037e0  080037e0  000137e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080037e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  08003854  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003854  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009412  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001838  00000000  00000000  000294aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000670  00000000  00000000  0002ace8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005d8  00000000  00000000  0002b358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ed62  00000000  00000000  0002b930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008dc9  00000000  00000000  0003a692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00059ee3  00000000  00000000  0004345b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009d33e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001968  00000000  00000000  0009d394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003554 	.word	0x08003554

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003554 	.word	0x08003554

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <send_at_command_and_check_response>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int send_at_command_and_check_response(const char* at_command, const char* expected_response, char* received_data) {
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	46c6      	mov	lr, r8
 8000248:	b500      	push	{lr}
 800024a:	b098      	sub	sp, #96	; 0x60
 800024c:	af00      	add	r7, sp, #0
 800024e:	6478      	str	r0, [r7, #68]	; 0x44
 8000250:	6439      	str	r1, [r7, #64]	; 0x40
 8000252:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000254:	466b      	mov	r3, sp
 8000256:	4698      	mov	r8, r3
  uint8_t tx_data[strlen(at_command)+1]; // Add space for null terminator
 8000258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800025a:	0018      	movs	r0, r3
 800025c:	f7ff ff54 	bl	8000108 <strlen>
 8000260:	0003      	movs	r3, r0
 8000262:	1c5a      	adds	r2, r3, #1
 8000264:	0013      	movs	r3, r2
 8000266:	3b01      	subs	r3, #1
 8000268:	65fb      	str	r3, [r7, #92]	; 0x5c
 800026a:	61ba      	str	r2, [r7, #24]
 800026c:	2300      	movs	r3, #0
 800026e:	61fb      	str	r3, [r7, #28]
 8000270:	69b8      	ldr	r0, [r7, #24]
 8000272:	69f9      	ldr	r1, [r7, #28]
 8000274:	0003      	movs	r3, r0
 8000276:	0f5b      	lsrs	r3, r3, #29
 8000278:	000e      	movs	r6, r1
 800027a:	00f5      	lsls	r5, r6, #3
 800027c:	431d      	orrs	r5, r3
 800027e:	0003      	movs	r3, r0
 8000280:	00dc      	lsls	r4, r3, #3
 8000282:	613a      	str	r2, [r7, #16]
 8000284:	2300      	movs	r3, #0
 8000286:	617b      	str	r3, [r7, #20]
 8000288:	6938      	ldr	r0, [r7, #16]
 800028a:	6979      	ldr	r1, [r7, #20]
 800028c:	0003      	movs	r3, r0
 800028e:	0f5b      	lsrs	r3, r3, #29
 8000290:	000c      	movs	r4, r1
 8000292:	00e4      	lsls	r4, r4, #3
 8000294:	637c      	str	r4, [r7, #52]	; 0x34
 8000296:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8000298:	431c      	orrs	r4, r3
 800029a:	637c      	str	r4, [r7, #52]	; 0x34
 800029c:	0003      	movs	r3, r0
 800029e:	00db      	lsls	r3, r3, #3
 80002a0:	633b      	str	r3, [r7, #48]	; 0x30
 80002a2:	1dd3      	adds	r3, r2, #7
 80002a4:	08db      	lsrs	r3, r3, #3
 80002a6:	00db      	lsls	r3, r3, #3
 80002a8:	466a      	mov	r2, sp
 80002aa:	1ad3      	subs	r3, r2, r3
 80002ac:	469d      	mov	sp, r3
 80002ae:	466b      	mov	r3, sp
 80002b0:	3300      	adds	r3, #0
 80002b2:	65bb      	str	r3, [r7, #88]	; 0x58
  uint8_t rx_data[strlen(expected_response)+30];
 80002b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80002b6:	0018      	movs	r0, r3
 80002b8:	f7ff ff26 	bl	8000108 <strlen>
 80002bc:	0003      	movs	r3, r0
 80002be:	331e      	adds	r3, #30
 80002c0:	001c      	movs	r4, r3
 80002c2:	0023      	movs	r3, r4
 80002c4:	3b01      	subs	r3, #1
 80002c6:	657b      	str	r3, [r7, #84]	; 0x54
 80002c8:	60bc      	str	r4, [r7, #8]
 80002ca:	2300      	movs	r3, #0
 80002cc:	60fb      	str	r3, [r7, #12]
 80002ce:	68b9      	ldr	r1, [r7, #8]
 80002d0:	68fa      	ldr	r2, [r7, #12]
 80002d2:	000b      	movs	r3, r1
 80002d4:	0f5b      	lsrs	r3, r3, #29
 80002d6:	0010      	movs	r0, r2
 80002d8:	00c0      	lsls	r0, r0, #3
 80002da:	62f8      	str	r0, [r7, #44]	; 0x2c
 80002dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80002de:	4318      	orrs	r0, r3
 80002e0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80002e2:	000b      	movs	r3, r1
 80002e4:	00db      	lsls	r3, r3, #3
 80002e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80002e8:	603c      	str	r4, [r7, #0]
 80002ea:	2300      	movs	r3, #0
 80002ec:	607b      	str	r3, [r7, #4]
 80002ee:	6839      	ldr	r1, [r7, #0]
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	000b      	movs	r3, r1
 80002f4:	0f5b      	lsrs	r3, r3, #29
 80002f6:	0010      	movs	r0, r2
 80002f8:	00c0      	lsls	r0, r0, #3
 80002fa:	6278      	str	r0, [r7, #36]	; 0x24
 80002fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80002fe:	4318      	orrs	r0, r3
 8000300:	6278      	str	r0, [r7, #36]	; 0x24
 8000302:	000b      	movs	r3, r1
 8000304:	00db      	lsls	r3, r3, #3
 8000306:	623b      	str	r3, [r7, #32]
 8000308:	1de3      	adds	r3, r4, #7
 800030a:	08db      	lsrs	r3, r3, #3
 800030c:	00db      	lsls	r3, r3, #3
 800030e:	466a      	mov	r2, sp
 8000310:	1ad3      	subs	r3, r2, r3
 8000312:	469d      	mov	sp, r3
 8000314:	466b      	mov	r3, sp
 8000316:	3300      	adds	r3, #0
 8000318:	653b      	str	r3, [r7, #80]	; 0x50
  HAL_StatusTypeDef status;
  char *ret;

  // Copy AT command to transmit buffer (including null terminator)
  strcpy((char*)tx_data, at_command);
 800031a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800031c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800031e:	0011      	movs	r1, r2
 8000320:	0018      	movs	r0, r3
 8000322:	f002 fcdf 	bl	8002ce4 <strcpy>

  // Send AT command
  status = HAL_UART_Transmit(&huart1, tx_data, strlen((char*)tx_data),1000);
 8000326:	6dbe      	ldr	r6, [r7, #88]	; 0x58
 8000328:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800032a:	0018      	movs	r0, r3
 800032c:	f7ff feec 	bl	8000108 <strlen>
 8000330:	0003      	movs	r3, r0
 8000332:	b29a      	uxth	r2, r3
 8000334:	2317      	movs	r3, #23
 8000336:	2138      	movs	r1, #56	; 0x38
 8000338:	1879      	adds	r1, r7, r1
 800033a:	18cd      	adds	r5, r1, r3
 800033c:	23fa      	movs	r3, #250	; 0xfa
 800033e:	009b      	lsls	r3, r3, #2
 8000340:	482d      	ldr	r0, [pc, #180]	; (80003f8 <send_at_command_and_check_response+0x1b4>)
 8000342:	0031      	movs	r1, r6
 8000344:	f001 fc90 	bl	8001c68 <HAL_UART_Transmit>
 8000348:	0003      	movs	r3, r0
 800034a:	702b      	strb	r3, [r5, #0]
  if (status != HAL_OK) {
 800034c:	2317      	movs	r3, #23
 800034e:	2238      	movs	r2, #56	; 0x38
 8000350:	4694      	mov	ip, r2
 8000352:	44bc      	add	ip, r7
 8000354:	4463      	add	r3, ip
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d002      	beq.n	8000362 <send_at_command_and_check_response+0x11e>
    return -1; // Error during transmission
 800035c:	2301      	movs	r3, #1
 800035e:	425b      	negs	r3, r3
 8000360:	e043      	b.n	80003ea <send_at_command_and_check_response+0x1a6>
  }

  // clear buffer
  memset(rx_data, 0, sizeof(rx_data));
 8000362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000364:	0022      	movs	r2, r4
 8000366:	2100      	movs	r1, #0
 8000368:	0018      	movs	r0, r3
 800036a:	f002 fc93 	bl	8002c94 <memset>
  memset(received_data, 0, sizeof(received_data));
 800036e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000370:	2204      	movs	r2, #4
 8000372:	2100      	movs	r1, #0
 8000374:	0018      	movs	r0, r3
 8000376:	f002 fc8d 	bl	8002c94 <memset>
  // Start receiving response with timeout
  HAL_UART_Receive(&huart1, rx_data, strlen(expected_response)+30,1000);
 800037a:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 800037c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800037e:	0018      	movs	r0, r3
 8000380:	f7ff fec2 	bl	8000108 <strlen>
 8000384:	0003      	movs	r3, r0
 8000386:	b29b      	uxth	r3, r3
 8000388:	331e      	adds	r3, #30
 800038a:	b29a      	uxth	r2, r3
 800038c:	23fa      	movs	r3, #250	; 0xfa
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	4819      	ldr	r0, [pc, #100]	; (80003f8 <send_at_command_and_check_response+0x1b4>)
 8000392:	0021      	movs	r1, r4
 8000394:	f001 fd08 	bl	8001da8 <HAL_UART_Receive>

  // Copy received data to output buffer
   strncpy(received_data, (char*)rx_data, 100); // Ensure null-termination
 8000398:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800039a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800039c:	2264      	movs	r2, #100	; 0x64
 800039e:	0018      	movs	r0, r3
 80003a0:	f002 fca8 	bl	8002cf4 <strncpy>


  ret = strstr((char*)rx_data, expected_response);
 80003a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80003a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80003a8:	0011      	movs	r1, r2
 80003aa:	0018      	movs	r0, r3
 80003ac:	f002 fcb6 	bl	8002d1c <strstr>
 80003b0:	0003      	movs	r3, r0
 80003b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if(ret=='\0'){
 80003b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d107      	bne.n	80003ca <send_at_command_and_check_response+0x186>
	     HAL_Delay(500);
 80003ba:	23fa      	movs	r3, #250	; 0xfa
 80003bc:	005b      	lsls	r3, r3, #1
 80003be:	0018      	movs	r0, r3
 80003c0:	f000 fbaa 	bl	8000b18 <HAL_Delay>
         return -2;
 80003c4:	2302      	movs	r3, #2
 80003c6:	425b      	negs	r3, r3
 80003c8:	e00f      	b.n	80003ea <send_at_command_and_check_response+0x1a6>
     }

  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80003ca:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <send_at_command_and_check_response+0x1b8>)
 80003cc:	2102      	movs	r1, #2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 feaf 	bl	8001132 <HAL_GPIO_TogglePin>
  HAL_Delay(1000);
 80003d4:	23fa      	movs	r3, #250	; 0xfa
 80003d6:	009b      	lsls	r3, r3, #2
 80003d8:	0018      	movs	r0, r3
 80003da:	f000 fb9d 	bl	8000b18 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80003de:	4b07      	ldr	r3, [pc, #28]	; (80003fc <send_at_command_and_check_response+0x1b8>)
 80003e0:	2102      	movs	r1, #2
 80003e2:	0018      	movs	r0, r3
 80003e4:	f000 fea5 	bl	8001132 <HAL_GPIO_TogglePin>
  return 0; // Success
 80003e8:	2300      	movs	r3, #0
 80003ea:	46c5      	mov	sp, r8
}
 80003ec:	0018      	movs	r0, r3
 80003ee:	46bd      	mov	sp, r7
 80003f0:	b018      	add	sp, #96	; 0x60
 80003f2:	bc80      	pop	{r7}
 80003f4:	46b8      	mov	r8, r7
 80003f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003f8:	20000098 	.word	0x20000098
 80003fc:	48000400 	.word	0x48000400

08000400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000400:	b5b0      	push	{r4, r5, r7, lr}
 8000402:	b0c2      	sub	sp, #264	; 0x108
 8000404:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000406:	f000 fb23 	bl	8000a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800040a:	f000 f92d 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800040e:	f000 f9b3 	bl	8000778 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000412:	f000 f981 	bl	8000718 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int count = 0;
 8000416:	2300      	movs	r3, #0
 8000418:	1d7a      	adds	r2, r7, #5
 800041a:	32ff      	adds	r2, #255	; 0xff
 800041c:	6013      	str	r3, [r2, #0]
  char hello[] = "hello world";
 800041e:	23f4      	movs	r3, #244	; 0xf4
 8000420:	18fb      	adds	r3, r7, r3
 8000422:	4a75      	ldr	r2, [pc, #468]	; (80005f8 <main+0x1f8>)
 8000424:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000426:	c313      	stmia	r3!, {r0, r1, r4}
  char buffer [10] = "hello\r\n";
 8000428:	20e8      	movs	r0, #232	; 0xe8
 800042a:	1839      	adds	r1, r7, r0
 800042c:	4a73      	ldr	r2, [pc, #460]	; (80005fc <main+0x1fc>)
 800042e:	000b      	movs	r3, r1
 8000430:	ca30      	ldmia	r2!, {r4, r5}
 8000432:	c330      	stmia	r3!, {r4, r5}
 8000434:	2300      	movs	r3, #0
 8000436:	810b      	strh	r3, [r1, #8]
  uint8_t numarray[10];
  static char msg[16];
  uint8_t Rx_data[10];
  int check;
  sprintf(buffer,"Hello %d\r\n",count);//  creating a buffer of 10 bytes
 8000438:	1d7b      	adds	r3, r7, #5
 800043a:	33ff      	adds	r3, #255	; 0xff
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	4970      	ldr	r1, [pc, #448]	; (8000600 <main+0x200>)
 8000440:	183b      	adds	r3, r7, r0
 8000442:	0018      	movs	r0, r3
 8000444:	f002 fc2e 	bl	8002ca4 <siprintf>
  char rx_buffer[104];
  char gp_buffer[104];
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000448:	2390      	movs	r3, #144	; 0x90
 800044a:	05db      	lsls	r3, r3, #23
 800044c:	2201      	movs	r2, #1
 800044e:	2110      	movs	r1, #16
 8000450:	0018      	movs	r0, r3
 8000452:	f000 fe51 	bl	80010f8 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8000456:	23fa      	movs	r3, #250	; 0xfa
 8000458:	00db      	lsls	r3, r3, #3
 800045a:	0018      	movs	r0, r3
 800045c:	f000 fb5c 	bl	8000b18 <HAL_Delay>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000460:	2390      	movs	r3, #144	; 0x90
 8000462:	05db      	lsls	r3, r3, #23
 8000464:	2200      	movs	r2, #0
 8000466:	2110      	movs	r1, #16
 8000468:	0018      	movs	r0, r3
 800046a:	f000 fe45 	bl	80010f8 <HAL_GPIO_WritePin>
  check = send_at_command_and_check_response("AT\r\n", "AT\r\r\nOK\r\n", rx_buffer);
 800046e:	2468      	movs	r4, #104	; 0x68
 8000470:	193a      	adds	r2, r7, r4
 8000472:	4964      	ldr	r1, [pc, #400]	; (8000604 <main+0x204>)
 8000474:	4b64      	ldr	r3, [pc, #400]	; (8000608 <main+0x208>)
 8000476:	0018      	movs	r0, r3
 8000478:	f7ff fee4 	bl	8000244 <send_at_command_and_check_response>
 800047c:	0003      	movs	r3, r0
 800047e:	1c7a      	adds	r2, r7, #1
 8000480:	32ff      	adds	r2, #255	; 0xff
 8000482:	6013      	str	r3, [r2, #0]
  check = send_at_command_and_check_response("AT+CPIN?\r\n", "READY", rx_buffer);
 8000484:	193a      	adds	r2, r7, r4
 8000486:	4961      	ldr	r1, [pc, #388]	; (800060c <main+0x20c>)
 8000488:	4b61      	ldr	r3, [pc, #388]	; (8000610 <main+0x210>)
 800048a:	0018      	movs	r0, r3
 800048c:	f7ff feda 	bl	8000244 <send_at_command_and_check_response>
 8000490:	0003      	movs	r3, r0
 8000492:	1c7a      	adds	r2, r7, #1
 8000494:	32ff      	adds	r2, #255	; 0xff
 8000496:	6013      	str	r3, [r2, #0]
  check = send_at_command_and_check_response("AT+CGNSPWR?\r\n", "OK\r\n", rx_buffer);
 8000498:	193a      	adds	r2, r7, r4
 800049a:	495e      	ldr	r1, [pc, #376]	; (8000614 <main+0x214>)
 800049c:	4b5e      	ldr	r3, [pc, #376]	; (8000618 <main+0x218>)
 800049e:	0018      	movs	r0, r3
 80004a0:	f7ff fed0 	bl	8000244 <send_at_command_and_check_response>
 80004a4:	0003      	movs	r3, r0
 80004a6:	1c7a      	adds	r2, r7, #1
 80004a8:	32ff      	adds	r2, #255	; 0xff
 80004aa:	6013      	str	r3, [r2, #0]
  check = send_at_command_and_check_response("AT+CGNSPWR=1\r\n", "OK\r\n", rx_buffer);
 80004ac:	193a      	adds	r2, r7, r4
 80004ae:	4959      	ldr	r1, [pc, #356]	; (8000614 <main+0x214>)
 80004b0:	4b5a      	ldr	r3, [pc, #360]	; (800061c <main+0x21c>)
 80004b2:	0018      	movs	r0, r3
 80004b4:	f7ff fec6 	bl	8000244 <send_at_command_and_check_response>
 80004b8:	0003      	movs	r3, r0
 80004ba:	1c7a      	adds	r2, r7, #1
 80004bc:	32ff      	adds	r2, #255	; 0xff
 80004be:	6013      	str	r3, [r2, #0]
//  check = send_at_command_and_check_response("AT+CGNSIPR=9600\r\n", "OK\r\n", rx_buffer);
  check = send_at_command_and_check_response("AT+CGNSSEQ=\"RMC\"\r\n", "OK\r\n", rx_buffer);
 80004c0:	193a      	adds	r2, r7, r4
 80004c2:	4954      	ldr	r1, [pc, #336]	; (8000614 <main+0x214>)
 80004c4:	4b56      	ldr	r3, [pc, #344]	; (8000620 <main+0x220>)
 80004c6:	0018      	movs	r0, r3
 80004c8:	f7ff febc 	bl	8000244 <send_at_command_and_check_response>
 80004cc:	0003      	movs	r3, r0
 80004ce:	1c7a      	adds	r2, r7, #1
 80004d0:	32ff      	adds	r2, #255	; 0xff
 80004d2:	6013      	str	r3, [r2, #0]
  while (1)
  {
//	  check = send_at_command_and_check_response("AT\r\n", "AT\r\r\nOK\r\n", rx_buffer);
	  memset(gp_buffer, "Q", sizeof(gp_buffer));
 80004d4:	4953      	ldr	r1, [pc, #332]	; (8000624 <main+0x224>)
 80004d6:	003b      	movs	r3, r7
 80004d8:	2268      	movs	r2, #104	; 0x68
 80004da:	0018      	movs	r0, r3
 80004dc:	f002 fbda 	bl	8002c94 <memset>
	  check = send_at_command_and_check_response("AT+CGNSINF\r\n", "QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", rx_buffer);
 80004e0:	2468      	movs	r4, #104	; 0x68
 80004e2:	193a      	adds	r2, r7, r4
 80004e4:	4950      	ldr	r1, [pc, #320]	; (8000628 <main+0x228>)
 80004e6:	4b51      	ldr	r3, [pc, #324]	; (800062c <main+0x22c>)
 80004e8:	0018      	movs	r0, r3
 80004ea:	f7ff feab 	bl	8000244 <send_at_command_and_check_response>
 80004ee:	0003      	movs	r3, r0
 80004f0:	1c7a      	adds	r2, r7, #1
 80004f2:	32ff      	adds	r2, #255	; 0xff
 80004f4:	6013      	str	r3, [r2, #0]
	  strcpy(gp_buffer, rx_buffer);
 80004f6:	193a      	adds	r2, r7, r4
 80004f8:	003b      	movs	r3, r7
 80004fa:	0011      	movs	r1, r2
 80004fc:	0018      	movs	r0, r3
 80004fe:	f002 fbf1 	bl	8002ce4 <strcpy>
//	  if(check!=0){ //doesnt even reply to the most basic command so do system rst
//		  NVIC_SystemReset();
//
//	  }
//	  check = send_at_command_and_check_response("AT+CPIN?\r\n", "READY", rx_buffer);
	  check = send_at_command_and_check_response("AT+CSQ\r\n", "OK\r\n", rx_buffer);
 8000502:	193a      	adds	r2, r7, r4
 8000504:	4943      	ldr	r1, [pc, #268]	; (8000614 <main+0x214>)
 8000506:	4b4a      	ldr	r3, [pc, #296]	; (8000630 <main+0x230>)
 8000508:	0018      	movs	r0, r3
 800050a:	f7ff fe9b 	bl	8000244 <send_at_command_and_check_response>
 800050e:	0003      	movs	r3, r0
 8000510:	1c7a      	adds	r2, r7, #1
 8000512:	32ff      	adds	r2, #255	; 0xff
 8000514:	6013      	str	r3, [r2, #0]
	  check = send_at_command_and_check_response("AT+CREG?\r\n", "OK\r\n", rx_buffer);
 8000516:	193a      	adds	r2, r7, r4
 8000518:	493e      	ldr	r1, [pc, #248]	; (8000614 <main+0x214>)
 800051a:	4b46      	ldr	r3, [pc, #280]	; (8000634 <main+0x234>)
 800051c:	0018      	movs	r0, r3
 800051e:	f7ff fe91 	bl	8000244 <send_at_command_and_check_response>
 8000522:	0003      	movs	r3, r0
 8000524:	1c7a      	adds	r2, r7, #1
 8000526:	32ff      	adds	r2, #255	; 0xff
 8000528:	6013      	str	r3, [r2, #0]
	  check = send_at_command_and_check_response("AT+CGATT?\r\n", "OK\r\n", rx_buffer);
 800052a:	193a      	adds	r2, r7, r4
 800052c:	4939      	ldr	r1, [pc, #228]	; (8000614 <main+0x214>)
 800052e:	4b42      	ldr	r3, [pc, #264]	; (8000638 <main+0x238>)
 8000530:	0018      	movs	r0, r3
 8000532:	f7ff fe87 	bl	8000244 <send_at_command_and_check_response>
 8000536:	0003      	movs	r3, r0
 8000538:	1c7a      	adds	r2, r7, #1
 800053a:	32ff      	adds	r2, #255	; 0xff
 800053c:	6013      	str	r3, [r2, #0]
	  check = send_at_command_and_check_response("AT+CGATT=1\r\n", "AT+CGATT=1\r\r\n+CGATT: 1\r\n\r\nOK\r\n", rx_buffer);
 800053e:	193a      	adds	r2, r7, r4
 8000540:	493e      	ldr	r1, [pc, #248]	; (800063c <main+0x23c>)
 8000542:	4b3f      	ldr	r3, [pc, #252]	; (8000640 <main+0x240>)
 8000544:	0018      	movs	r0, r3
 8000546:	f7ff fe7d 	bl	8000244 <send_at_command_and_check_response>
 800054a:	0003      	movs	r3, r0
 800054c:	1c7a      	adds	r2, r7, #1
 800054e:	32ff      	adds	r2, #255	; 0xff
 8000550:	6013      	str	r3, [r2, #0]
//	  /*
//	   * check if there is no IP then send APN  and register request
//	   */
	  check = send_at_command_and_check_response("AT+CIFSR\r\n", "ERROR", rx_buffer);
 8000552:	193a      	adds	r2, r7, r4
 8000554:	493b      	ldr	r1, [pc, #236]	; (8000644 <main+0x244>)
 8000556:	4b3c      	ldr	r3, [pc, #240]	; (8000648 <main+0x248>)
 8000558:	0018      	movs	r0, r3
 800055a:	f7ff fe73 	bl	8000244 <send_at_command_and_check_response>
 800055e:	0003      	movs	r3, r0
 8000560:	1c7a      	adds	r2, r7, #1
 8000562:	32ff      	adds	r2, #255	; 0xff
 8000564:	6013      	str	r3, [r2, #0]
	  if(check ==0){ //means it find error in CIFSR so needs to set APN and CIICR
 8000566:	1c7b      	adds	r3, r7, #1
 8000568:	33ff      	adds	r3, #255	; 0xff
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d113      	bne.n	8000598 <main+0x198>
	   check = send_at_command_and_check_response("AT+CSTT=\"TM\"\r\n", "OK\r\n", rx_buffer);
 8000570:	193a      	adds	r2, r7, r4
 8000572:	4928      	ldr	r1, [pc, #160]	; (8000614 <main+0x214>)
 8000574:	4b35      	ldr	r3, [pc, #212]	; (800064c <main+0x24c>)
 8000576:	0018      	movs	r0, r3
 8000578:	f7ff fe64 	bl	8000244 <send_at_command_and_check_response>
 800057c:	0003      	movs	r3, r0
 800057e:	1c7a      	adds	r2, r7, #1
 8000580:	32ff      	adds	r2, #255	; 0xff
 8000582:	6013      	str	r3, [r2, #0]
	   check = send_at_command_and_check_response("AT+CIICR\r\n", "OK\r\n", rx_buffer);
 8000584:	193a      	adds	r2, r7, r4
 8000586:	4923      	ldr	r1, [pc, #140]	; (8000614 <main+0x214>)
 8000588:	4b31      	ldr	r3, [pc, #196]	; (8000650 <main+0x250>)
 800058a:	0018      	movs	r0, r3
 800058c:	f7ff fe5a 	bl	8000244 <send_at_command_and_check_response>
 8000590:	0003      	movs	r3, r0
 8000592:	1c7a      	adds	r2, r7, #1
 8000594:	32ff      	adds	r2, #255	; 0xff
 8000596:	6013      	str	r3, [r2, #0]
	  }
	  check = send_at_command_and_check_response("AT+CIFSR\r\n", "ERROR", rx_buffer);
 8000598:	2468      	movs	r4, #104	; 0x68
 800059a:	193a      	adds	r2, r7, r4
 800059c:	4929      	ldr	r1, [pc, #164]	; (8000644 <main+0x244>)
 800059e:	4b2a      	ldr	r3, [pc, #168]	; (8000648 <main+0x248>)
 80005a0:	0018      	movs	r0, r3
 80005a2:	f7ff fe4f 	bl	8000244 <send_at_command_and_check_response>
 80005a6:	0003      	movs	r3, r0
 80005a8:	1c7a      	adds	r2, r7, #1
 80005aa:	32ff      	adds	r2, #255	; 0xff
 80005ac:	6013      	str	r3, [r2, #0]
	  check = send_at_command_and_check_response("AT+CIPSTART=\"TCP\",\"45.154.87.237\",\"1887\"\r\n", "AT+CIPSTART=\"TCP\",\"45.154.87.237\",\"1887\"\r\r\nOK\r\n", rx_buffer);
 80005ae:	193a      	adds	r2, r7, r4
 80005b0:	4928      	ldr	r1, [pc, #160]	; (8000654 <main+0x254>)
 80005b2:	4b29      	ldr	r3, [pc, #164]	; (8000658 <main+0x258>)
 80005b4:	0018      	movs	r0, r3
 80005b6:	f7ff fe45 	bl	8000244 <send_at_command_and_check_response>
 80005ba:	0003      	movs	r3, r0
 80005bc:	1c7a      	adds	r2, r7, #1
 80005be:	32ff      	adds	r2, #255	; 0xff
 80005c0:	6013      	str	r3, [r2, #0]
	  check = send_at_command_and_check_response("AT+CIPSEND=100\r\n", "AT+CIPSEND=100\r\r\n>", rx_buffer);
 80005c2:	193a      	adds	r2, r7, r4
 80005c4:	4925      	ldr	r1, [pc, #148]	; (800065c <main+0x25c>)
 80005c6:	4b26      	ldr	r3, [pc, #152]	; (8000660 <main+0x260>)
 80005c8:	0018      	movs	r0, r3
 80005ca:	f7ff fe3b 	bl	8000244 <send_at_command_and_check_response>
 80005ce:	0003      	movs	r3, r0
 80005d0:	1c7a      	adds	r2, r7, #1
 80005d2:	32ff      	adds	r2, #255	; 0xff
 80005d4:	6013      	str	r3, [r2, #0]
	  check = send_at_command_and_check_response(gp_buffer, "test\r\r\nSEND", rx_buffer);
 80005d6:	193a      	adds	r2, r7, r4
 80005d8:	4922      	ldr	r1, [pc, #136]	; (8000664 <main+0x264>)
 80005da:	003b      	movs	r3, r7
 80005dc:	0018      	movs	r0, r3
 80005de:	f7ff fe31 	bl	8000244 <send_at_command_and_check_response>
 80005e2:	0003      	movs	r3, r0
 80005e4:	1c7a      	adds	r2, r7, #1
 80005e6:	32ff      	adds	r2, #255	; 0xff
 80005e8:	6013      	str	r3, [r2, #0]
	  HAL_Delay(2000);
 80005ea:	23fa      	movs	r3, #250	; 0xfa
 80005ec:	00db      	lsls	r3, r3, #3
 80005ee:	0018      	movs	r0, r3
 80005f0:	f000 fa92 	bl	8000b18 <HAL_Delay>
  {
 80005f4:	e76e      	b.n	80004d4 <main+0xd4>
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	08003758 	.word	0x08003758
 80005fc:	08003764 	.word	0x08003764
 8000600:	0800356c 	.word	0x0800356c
 8000604:	08003578 	.word	0x08003578
 8000608:	08003584 	.word	0x08003584
 800060c:	0800358c 	.word	0x0800358c
 8000610:	08003594 	.word	0x08003594
 8000614:	080035a0 	.word	0x080035a0
 8000618:	080035a8 	.word	0x080035a8
 800061c:	080035b8 	.word	0x080035b8
 8000620:	080035c8 	.word	0x080035c8
 8000624:	080035dc 	.word	0x080035dc
 8000628:	080035e0 	.word	0x080035e0
 800062c:	08003634 	.word	0x08003634
 8000630:	08003644 	.word	0x08003644
 8000634:	08003650 	.word	0x08003650
 8000638:	0800365c 	.word	0x0800365c
 800063c:	08003668 	.word	0x08003668
 8000640:	08003688 	.word	0x08003688
 8000644:	08003698 	.word	0x08003698
 8000648:	080036a0 	.word	0x080036a0
 800064c:	080036ac 	.word	0x080036ac
 8000650:	080036bc 	.word	0x080036bc
 8000654:	080036c8 	.word	0x080036c8
 8000658:	080036f8 	.word	0x080036f8
 800065c:	08003724 	.word	0x08003724
 8000660:	08003738 	.word	0x08003738
 8000664:	0800374c 	.word	0x0800374c

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b095      	sub	sp, #84	; 0x54
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	2420      	movs	r4, #32
 8000670:	193b      	adds	r3, r7, r4
 8000672:	0018      	movs	r0, r3
 8000674:	2330      	movs	r3, #48	; 0x30
 8000676:	001a      	movs	r2, r3
 8000678:	2100      	movs	r1, #0
 800067a:	f002 fb0b 	bl	8002c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067e:	2310      	movs	r3, #16
 8000680:	18fb      	adds	r3, r7, r3
 8000682:	0018      	movs	r0, r3
 8000684:	2310      	movs	r3, #16
 8000686:	001a      	movs	r2, r3
 8000688:	2100      	movs	r1, #0
 800068a:	f002 fb03 	bl	8002c94 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800068e:	003b      	movs	r3, r7
 8000690:	0018      	movs	r0, r3
 8000692:	2310      	movs	r3, #16
 8000694:	001a      	movs	r2, r3
 8000696:	2100      	movs	r1, #0
 8000698:	f002 fafc 	bl	8002c94 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	0021      	movs	r1, r4
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2202      	movs	r2, #2
 80006a2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2201      	movs	r2, #1
 80006a8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2210      	movs	r2, #16
 80006ae:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 fd55 	bl	8001168 <HAL_RCC_OscConfig>
 80006be:	1e03      	subs	r3, r0, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006c2:	f000 f8bb 	bl	800083c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	2110      	movs	r1, #16
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2207      	movs	r2, #7
 80006cc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2100      	movs	r1, #0
 80006e4:	0018      	movs	r0, r3
 80006e6:	f001 f859 	bl	800179c <HAL_RCC_ClockConfig>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80006ee:	f000 f8a5 	bl	800083c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80006f2:	003b      	movs	r3, r7
 80006f4:	2201      	movs	r2, #1
 80006f6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80006f8:	003b      	movs	r3, r7
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006fe:	003b      	movs	r3, r7
 8000700:	0018      	movs	r0, r3
 8000702:	f001 f98f 	bl	8001a24 <HAL_RCCEx_PeriphCLKConfig>
 8000706:	1e03      	subs	r3, r0, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800070a:	f000 f897 	bl	800083c <Error_Handler>
  }
}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	b015      	add	sp, #84	; 0x54
 8000714:	bd90      	pop	{r4, r7, pc}
	...

08000718 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_USART1_UART_Init+0x58>)
 800071e:	4a15      	ldr	r2, [pc, #84]	; (8000774 <MX_USART1_UART_Init+0x5c>)
 8000720:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_USART1_UART_Init+0x58>)
 8000724:	2296      	movs	r2, #150	; 0x96
 8000726:	0192      	lsls	r2, r2, #6
 8000728:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART1_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_USART1_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART1_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USART1_UART_Init+0x58>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USART1_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART1_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USART1_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART1_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <MX_USART1_UART_Init+0x58>)
 800075c:	0018      	movs	r0, r3
 800075e:	f001 fa2f 	bl	8001bc0 <HAL_UART_Init>
 8000762:	1e03      	subs	r3, r0, #0
 8000764:	d001      	beq.n	800076a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000766:	f000 f869 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000098 	.word	0x20000098
 8000774:	40013800 	.word	0x40013800

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b590      	push	{r4, r7, lr}
 800077a:	b089      	sub	sp, #36	; 0x24
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	240c      	movs	r4, #12
 8000780:	193b      	adds	r3, r7, r4
 8000782:	0018      	movs	r0, r3
 8000784:	2314      	movs	r3, #20
 8000786:	001a      	movs	r2, r3
 8000788:	2100      	movs	r1, #0
 800078a:	f002 fa83 	bl	8002c94 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b29      	ldr	r3, [pc, #164]	; (8000834 <MX_GPIO_Init+0xbc>)
 8000790:	695a      	ldr	r2, [r3, #20]
 8000792:	4b28      	ldr	r3, [pc, #160]	; (8000834 <MX_GPIO_Init+0xbc>)
 8000794:	2180      	movs	r1, #128	; 0x80
 8000796:	0289      	lsls	r1, r1, #10
 8000798:	430a      	orrs	r2, r1
 800079a:	615a      	str	r2, [r3, #20]
 800079c:	4b25      	ldr	r3, [pc, #148]	; (8000834 <MX_GPIO_Init+0xbc>)
 800079e:	695a      	ldr	r2, [r3, #20]
 80007a0:	2380      	movs	r3, #128	; 0x80
 80007a2:	029b      	lsls	r3, r3, #10
 80007a4:	4013      	ands	r3, r2
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	4b22      	ldr	r3, [pc, #136]	; (8000834 <MX_GPIO_Init+0xbc>)
 80007ac:	695a      	ldr	r2, [r3, #20]
 80007ae:	4b21      	ldr	r3, [pc, #132]	; (8000834 <MX_GPIO_Init+0xbc>)
 80007b0:	2180      	movs	r1, #128	; 0x80
 80007b2:	02c9      	lsls	r1, r1, #11
 80007b4:	430a      	orrs	r2, r1
 80007b6:	615a      	str	r2, [r3, #20]
 80007b8:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <MX_GPIO_Init+0xbc>)
 80007ba:	695a      	ldr	r2, [r3, #20]
 80007bc:	2380      	movs	r3, #128	; 0x80
 80007be:	02db      	lsls	r3, r3, #11
 80007c0:	4013      	ands	r3, r2
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80007c6:	2390      	movs	r3, #144	; 0x90
 80007c8:	05db      	lsls	r3, r3, #23
 80007ca:	2200      	movs	r2, #0
 80007cc:	2110      	movs	r1, #16
 80007ce:	0018      	movs	r0, r3
 80007d0:	f000 fc92 	bl	80010f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_GPIO_Init+0xc0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	2102      	movs	r1, #2
 80007da:	0018      	movs	r0, r3
 80007dc:	f000 fc8c 	bl	80010f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	2210      	movs	r2, #16
 80007e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	2201      	movs	r2, #1
 80007ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	193b      	adds	r3, r7, r4
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80007f8:	193a      	adds	r2, r7, r4
 80007fa:	2390      	movs	r3, #144	; 0x90
 80007fc:	05db      	lsls	r3, r3, #23
 80007fe:	0011      	movs	r1, r2
 8000800:	0018      	movs	r0, r3
 8000802:	f000 fb09 	bl	8000e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000806:	0021      	movs	r1, r4
 8000808:	187b      	adds	r3, r7, r1
 800080a:	2202      	movs	r2, #2
 800080c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2201      	movs	r2, #1
 8000812:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000820:	187b      	adds	r3, r7, r1
 8000822:	4a05      	ldr	r2, [pc, #20]	; (8000838 <MX_GPIO_Init+0xc0>)
 8000824:	0019      	movs	r1, r3
 8000826:	0010      	movs	r0, r2
 8000828:	f000 faf6 	bl	8000e18 <HAL_GPIO_Init>

}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	b009      	add	sp, #36	; 0x24
 8000832:	bd90      	pop	{r4, r7, pc}
 8000834:	40021000 	.word	0x40021000
 8000838:	48000400 	.word	0x48000400

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000844:	e7fe      	b.n	8000844 <Error_Handler+0x8>
	...

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <HAL_MspInit+0x44>)
 8000850:	699a      	ldr	r2, [r3, #24]
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <HAL_MspInit+0x44>)
 8000854:	2101      	movs	r1, #1
 8000856:	430a      	orrs	r2, r1
 8000858:	619a      	str	r2, [r3, #24]
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <HAL_MspInit+0x44>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	2201      	movs	r2, #1
 8000860:	4013      	ands	r3, r2
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <HAL_MspInit+0x44>)
 8000868:	69da      	ldr	r2, [r3, #28]
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <HAL_MspInit+0x44>)
 800086c:	2180      	movs	r1, #128	; 0x80
 800086e:	0549      	lsls	r1, r1, #21
 8000870:	430a      	orrs	r2, r1
 8000872:	61da      	str	r2, [r3, #28]
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <HAL_MspInit+0x44>)
 8000876:	69da      	ldr	r2, [r3, #28]
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	055b      	lsls	r3, r3, #21
 800087c:	4013      	ands	r3, r2
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b002      	add	sp, #8
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	40021000 	.word	0x40021000

08000890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b08b      	sub	sp, #44	; 0x2c
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	2414      	movs	r4, #20
 800089a:	193b      	adds	r3, r7, r4
 800089c:	0018      	movs	r0, r3
 800089e:	2314      	movs	r3, #20
 80008a0:	001a      	movs	r2, r3
 80008a2:	2100      	movs	r1, #0
 80008a4:	f002 f9f6 	bl	8002c94 <memset>
  if(huart->Instance==USART1)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a21      	ldr	r2, [pc, #132]	; (8000934 <HAL_UART_MspInit+0xa4>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d13b      	bne.n	800092a <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008b2:	4b21      	ldr	r3, [pc, #132]	; (8000938 <HAL_UART_MspInit+0xa8>)
 80008b4:	699a      	ldr	r2, [r3, #24]
 80008b6:	4b20      	ldr	r3, [pc, #128]	; (8000938 <HAL_UART_MspInit+0xa8>)
 80008b8:	2180      	movs	r1, #128	; 0x80
 80008ba:	01c9      	lsls	r1, r1, #7
 80008bc:	430a      	orrs	r2, r1
 80008be:	619a      	str	r2, [r3, #24]
 80008c0:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <HAL_UART_MspInit+0xa8>)
 80008c2:	699a      	ldr	r2, [r3, #24]
 80008c4:	2380      	movs	r3, #128	; 0x80
 80008c6:	01db      	lsls	r3, r3, #7
 80008c8:	4013      	ands	r3, r2
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <HAL_UART_MspInit+0xa8>)
 80008d0:	695a      	ldr	r2, [r3, #20]
 80008d2:	4b19      	ldr	r3, [pc, #100]	; (8000938 <HAL_UART_MspInit+0xa8>)
 80008d4:	2180      	movs	r1, #128	; 0x80
 80008d6:	0289      	lsls	r1, r1, #10
 80008d8:	430a      	orrs	r2, r1
 80008da:	615a      	str	r2, [r3, #20]
 80008dc:	4b16      	ldr	r3, [pc, #88]	; (8000938 <HAL_UART_MspInit+0xa8>)
 80008de:	695a      	ldr	r2, [r3, #20]
 80008e0:	2380      	movs	r3, #128	; 0x80
 80008e2:	029b      	lsls	r3, r3, #10
 80008e4:	4013      	ands	r3, r2
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	22c0      	movs	r2, #192	; 0xc0
 80008ee:	00d2      	lsls	r2, r2, #3
 80008f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	0021      	movs	r1, r4
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2202      	movs	r2, #2
 80008f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2203      	movs	r2, #3
 8000904:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2201      	movs	r2, #1
 800090a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	187a      	adds	r2, r7, r1
 800090e:	2390      	movs	r3, #144	; 0x90
 8000910:	05db      	lsls	r3, r3, #23
 8000912:	0011      	movs	r1, r2
 8000914:	0018      	movs	r0, r3
 8000916:	f000 fa7f 	bl	8000e18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	201b      	movs	r0, #27
 8000920:	f000 f9ca 	bl	8000cb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000924:	201b      	movs	r0, #27
 8000926:	f000 f9dc 	bl	8000ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	b00b      	add	sp, #44	; 0x2c
 8000930:	bd90      	pop	{r4, r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	40013800 	.word	0x40013800
 8000938:	40021000 	.word	0x40021000

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <NMI_Handler+0x4>

08000942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <HardFault_Handler+0x4>

08000948 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000960:	f000 f8be 	bl	8000ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <USART1_IRQHandler+0x14>)
 8000972:	0018      	movs	r0, r3
 8000974:	f001 faec 	bl	8001f50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	20000098 	.word	0x20000098

08000984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800098c:	4a14      	ldr	r2, [pc, #80]	; (80009e0 <_sbrk+0x5c>)
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <_sbrk+0x60>)
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d102      	bne.n	80009a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <_sbrk+0x64>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <_sbrk+0x68>)
 80009a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	18d3      	adds	r3, r2, r3
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d207      	bcs.n	80009c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b4:	f002 f944 	bl	8002c40 <__errno>
 80009b8:	0003      	movs	r3, r0
 80009ba:	220c      	movs	r2, #12
 80009bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009be:	2301      	movs	r3, #1
 80009c0:	425b      	negs	r3, r3
 80009c2:	e009      	b.n	80009d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ca:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <_sbrk+0x64>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	18d2      	adds	r2, r2, r3
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <_sbrk+0x64>)
 80009d4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80009d6:	68fb      	ldr	r3, [r7, #12]
}
 80009d8:	0018      	movs	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	b006      	add	sp, #24
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20001000 	.word	0x20001000
 80009e4:	00000400 	.word	0x00000400
 80009e8:	2000008c 	.word	0x2000008c
 80009ec:	20000138 	.word	0x20000138

080009f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009fc:	480d      	ldr	r0, [pc, #52]	; (8000a34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009fe:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a00:	f7ff fff6 	bl	80009f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a04:	480c      	ldr	r0, [pc, #48]	; (8000a38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a06:	490d      	ldr	r1, [pc, #52]	; (8000a3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a08:	4a0d      	ldr	r2, [pc, #52]	; (8000a40 <LoopForever+0xe>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a0c:	e002      	b.n	8000a14 <LoopCopyDataInit>

08000a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a12:	3304      	adds	r3, #4

08000a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a18:	d3f9      	bcc.n	8000a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a1c:	4c0a      	ldr	r4, [pc, #40]	; (8000a48 <LoopForever+0x16>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a20:	e001      	b.n	8000a26 <LoopFillZerobss>

08000a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a24:	3204      	adds	r2, #4

08000a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a28:	d3fb      	bcc.n	8000a22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a2a:	f002 f90f 	bl	8002c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a2e:	f7ff fce7 	bl	8000400 <main>

08000a32 <LoopForever>:

LoopForever:
    b LoopForever
 8000a32:	e7fe      	b.n	8000a32 <LoopForever>
  ldr   r0, =_estack
 8000a34:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a40:	080037e4 	.word	0x080037e4
  ldr r2, =_sbss
 8000a44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a48:	20000134 	.word	0x20000134

08000a4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a4c:	e7fe      	b.n	8000a4c <ADC1_IRQHandler>
	...

08000a50 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <HAL_Init+0x24>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_Init+0x24>)
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 f809 	bl	8000a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a66:	f7ff feef 	bl	8000848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a6a:	2300      	movs	r3, #0
}
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	40022000 	.word	0x40022000

08000a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <HAL_InitTick+0x5c>)
 8000a82:	681c      	ldr	r4, [r3, #0]
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <HAL_InitTick+0x60>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	0019      	movs	r1, r3
 8000a8a:	23fa      	movs	r3, #250	; 0xfa
 8000a8c:	0098      	lsls	r0, r3, #2
 8000a8e:	f7ff fb4d 	bl	800012c <__udivsi3>
 8000a92:	0003      	movs	r3, r0
 8000a94:	0019      	movs	r1, r3
 8000a96:	0020      	movs	r0, r4
 8000a98:	f7ff fb48 	bl	800012c <__udivsi3>
 8000a9c:	0003      	movs	r3, r0
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f000 f92f 	bl	8000d02 <HAL_SYSTICK_Config>
 8000aa4:	1e03      	subs	r3, r0, #0
 8000aa6:	d001      	beq.n	8000aac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e00f      	b.n	8000acc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b03      	cmp	r3, #3
 8000ab0:	d80b      	bhi.n	8000aca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	425b      	negs	r3, r3
 8000ab8:	2200      	movs	r2, #0
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 f8fc 	bl	8000cb8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_InitTick+0x64>)
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e000      	b.n	8000acc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	0018      	movs	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b003      	add	sp, #12
 8000ad2:	bd90      	pop	{r4, r7, pc}
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	20000004 	.word	0x20000004

08000ae0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_IncTick+0x1c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	001a      	movs	r2, r3
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <HAL_IncTick+0x20>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	18d2      	adds	r2, r2, r3
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <HAL_IncTick+0x20>)
 8000af2:	601a      	str	r2, [r3, #0]
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	20000008 	.word	0x20000008
 8000b00:	20000120 	.word	0x20000120

08000b04 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  return uwTick;
 8000b08:	4b02      	ldr	r3, [pc, #8]	; (8000b14 <HAL_GetTick+0x10>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
}
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	20000120 	.word	0x20000120

08000b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b20:	f7ff fff0 	bl	8000b04 <HAL_GetTick>
 8000b24:	0003      	movs	r3, r0
 8000b26:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	d005      	beq.n	8000b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_Delay+0x44>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	001a      	movs	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	189b      	adds	r3, r3, r2
 8000b3c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	f7ff ffe0 	bl	8000b04 <HAL_GetTick>
 8000b44:	0002      	movs	r2, r0
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d8f7      	bhi.n	8000b40 <HAL_Delay+0x28>
  {
  }
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b004      	add	sp, #16
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	20000008 	.word	0x20000008

08000b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	0002      	movs	r2, r0
 8000b68:	1dfb      	adds	r3, r7, #7
 8000b6a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b6c:	1dfb      	adds	r3, r7, #7
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b7f      	cmp	r3, #127	; 0x7f
 8000b72:	d809      	bhi.n	8000b88 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b74:	1dfb      	adds	r3, r7, #7
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	001a      	movs	r2, r3
 8000b7a:	231f      	movs	r3, #31
 8000b7c:	401a      	ands	r2, r3
 8000b7e:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <__NVIC_EnableIRQ+0x30>)
 8000b80:	2101      	movs	r1, #1
 8000b82:	4091      	lsls	r1, r2
 8000b84:	000a      	movs	r2, r1
 8000b86:	601a      	str	r2, [r3, #0]
  }
}
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b002      	add	sp, #8
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	e000e100 	.word	0xe000e100

08000b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	0002      	movs	r2, r0
 8000b9c:	6039      	str	r1, [r7, #0]
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ba8:	d828      	bhi.n	8000bfc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000baa:	4a2f      	ldr	r2, [pc, #188]	; (8000c68 <__NVIC_SetPriority+0xd4>)
 8000bac:	1dfb      	adds	r3, r7, #7
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	b25b      	sxtb	r3, r3
 8000bb2:	089b      	lsrs	r3, r3, #2
 8000bb4:	33c0      	adds	r3, #192	; 0xc0
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	589b      	ldr	r3, [r3, r2]
 8000bba:	1dfa      	adds	r2, r7, #7
 8000bbc:	7812      	ldrb	r2, [r2, #0]
 8000bbe:	0011      	movs	r1, r2
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	400a      	ands	r2, r1
 8000bc4:	00d2      	lsls	r2, r2, #3
 8000bc6:	21ff      	movs	r1, #255	; 0xff
 8000bc8:	4091      	lsls	r1, r2
 8000bca:	000a      	movs	r2, r1
 8000bcc:	43d2      	mvns	r2, r2
 8000bce:	401a      	ands	r2, r3
 8000bd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	019b      	lsls	r3, r3, #6
 8000bd6:	22ff      	movs	r2, #255	; 0xff
 8000bd8:	401a      	ands	r2, r3
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	0018      	movs	r0, r3
 8000be0:	2303      	movs	r3, #3
 8000be2:	4003      	ands	r3, r0
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be8:	481f      	ldr	r0, [pc, #124]	; (8000c68 <__NVIC_SetPriority+0xd4>)
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b25b      	sxtb	r3, r3
 8000bf0:	089b      	lsrs	r3, r3, #2
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	33c0      	adds	r3, #192	; 0xc0
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bfa:	e031      	b.n	8000c60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bfc:	4a1b      	ldr	r2, [pc, #108]	; (8000c6c <__NVIC_SetPriority+0xd8>)
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	0019      	movs	r1, r3
 8000c04:	230f      	movs	r3, #15
 8000c06:	400b      	ands	r3, r1
 8000c08:	3b08      	subs	r3, #8
 8000c0a:	089b      	lsrs	r3, r3, #2
 8000c0c:	3306      	adds	r3, #6
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	18d3      	adds	r3, r2, r3
 8000c12:	3304      	adds	r3, #4
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	1dfa      	adds	r2, r7, #7
 8000c18:	7812      	ldrb	r2, [r2, #0]
 8000c1a:	0011      	movs	r1, r2
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	400a      	ands	r2, r1
 8000c20:	00d2      	lsls	r2, r2, #3
 8000c22:	21ff      	movs	r1, #255	; 0xff
 8000c24:	4091      	lsls	r1, r2
 8000c26:	000a      	movs	r2, r1
 8000c28:	43d2      	mvns	r2, r2
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	019b      	lsls	r3, r3, #6
 8000c32:	22ff      	movs	r2, #255	; 0xff
 8000c34:	401a      	ands	r2, r3
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	4003      	ands	r3, r0
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c44:	4809      	ldr	r0, [pc, #36]	; (8000c6c <__NVIC_SetPriority+0xd8>)
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	001c      	movs	r4, r3
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	4023      	ands	r3, r4
 8000c50:	3b08      	subs	r3, #8
 8000c52:	089b      	lsrs	r3, r3, #2
 8000c54:	430a      	orrs	r2, r1
 8000c56:	3306      	adds	r3, #6
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	18c3      	adds	r3, r0, r3
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	601a      	str	r2, [r3, #0]
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b003      	add	sp, #12
 8000c66:	bd90      	pop	{r4, r7, pc}
 8000c68:	e000e100 	.word	0xe000e100
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	1e5a      	subs	r2, r3, #1
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	045b      	lsls	r3, r3, #17
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d301      	bcc.n	8000c88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c84:	2301      	movs	r3, #1
 8000c86:	e010      	b.n	8000caa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <SysTick_Config+0x44>)
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	3a01      	subs	r2, #1
 8000c8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c90:	2301      	movs	r3, #1
 8000c92:	425b      	negs	r3, r3
 8000c94:	2103      	movs	r1, #3
 8000c96:	0018      	movs	r0, r3
 8000c98:	f7ff ff7c 	bl	8000b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <SysTick_Config+0x44>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca2:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <SysTick_Config+0x44>)
 8000ca4:	2207      	movs	r2, #7
 8000ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	0018      	movs	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	e000e010 	.word	0xe000e010

08000cb8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	1c02      	adds	r2, r0, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	0011      	movs	r1, r2
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f7ff ff5d 	bl	8000b94 <__NVIC_SetPriority>
}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b004      	add	sp, #16
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	0002      	movs	r2, r0
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	b25b      	sxtb	r3, r3
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f7ff ff33 	bl	8000b60 <__NVIC_EnableIRQ>
}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b002      	add	sp, #8
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f7ff ffaf 	bl	8000c70 <SysTick_Config>
 8000d12:	0003      	movs	r3, r0
}
 8000d14:	0018      	movs	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b002      	add	sp, #8
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2221      	movs	r2, #33	; 0x21
 8000d28:	5c9b      	ldrb	r3, [r3, r2]
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d008      	beq.n	8000d42 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2204      	movs	r2, #4
 8000d34:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2220      	movs	r2, #32
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e020      	b.n	8000d84 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	210e      	movs	r1, #14
 8000d4e:	438a      	bics	r2, r1
 8000d50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	438a      	bics	r2, r1
 8000d60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	4091      	lsls	r1, r2
 8000d6e:	000a      	movs	r2, r1
 8000d70:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2221      	movs	r2, #33	; 0x21
 8000d76:	2101      	movs	r1, #1
 8000d78:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2220      	movs	r2, #32
 8000d7e:	2100      	movs	r1, #0
 8000d80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000d82:	2300      	movs	r3, #0
}
 8000d84:	0018      	movs	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b002      	add	sp, #8
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d94:	210f      	movs	r1, #15
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2221      	movs	r2, #33	; 0x21
 8000da0:	5c9b      	ldrb	r3, [r3, r2]
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d006      	beq.n	8000db6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2204      	movs	r2, #4
 8000dac:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2201      	movs	r2, #1
 8000db2:	701a      	strb	r2, [r3, #0]
 8000db4:	e028      	b.n	8000e08 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	210e      	movs	r1, #14
 8000dc2:	438a      	bics	r2, r1
 8000dc4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	438a      	bics	r2, r1
 8000dd4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dde:	2101      	movs	r1, #1
 8000de0:	4091      	lsls	r1, r2
 8000de2:	000a      	movs	r2, r1
 8000de4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2221      	movs	r2, #33	; 0x21
 8000dea:	2101      	movs	r1, #1
 8000dec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2220      	movs	r2, #32
 8000df2:	2100      	movs	r1, #0
 8000df4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d004      	beq.n	8000e08 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	0010      	movs	r0, r2
 8000e06:	4798      	blx	r3
    }
  }
  return status;
 8000e08:	230f      	movs	r3, #15
 8000e0a:	18fb      	adds	r3, r7, r3
 8000e0c:	781b      	ldrb	r3, [r3, #0]
}
 8000e0e:	0018      	movs	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b004      	add	sp, #16
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e26:	e14f      	b.n	80010c8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	4091      	lsls	r1, r2
 8000e32:	000a      	movs	r2, r1
 8000e34:	4013      	ands	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d100      	bne.n	8000e40 <HAL_GPIO_Init+0x28>
 8000e3e:	e140      	b.n	80010c2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2203      	movs	r2, #3
 8000e46:	4013      	ands	r3, r2
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d005      	beq.n	8000e58 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2203      	movs	r2, #3
 8000e52:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d130      	bne.n	8000eba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	2203      	movs	r2, #3
 8000e64:	409a      	lsls	r2, r3
 8000e66:	0013      	movs	r3, r2
 8000e68:	43da      	mvns	r2, r3
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	409a      	lsls	r2, r3
 8000e7a:	0013      	movs	r3, r2
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e8e:	2201      	movs	r2, #1
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
 8000e94:	0013      	movs	r3, r2
 8000e96:	43da      	mvns	r2, r3
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	091b      	lsrs	r3, r3, #4
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
 8000eac:	0013      	movs	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d017      	beq.n	8000ef6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	409a      	lsls	r2, r3
 8000ee8:	0013      	movs	r3, r2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2203      	movs	r2, #3
 8000efc:	4013      	ands	r3, r2
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d123      	bne.n	8000f4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	08da      	lsrs	r2, r3, #3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3208      	adds	r2, #8
 8000f0a:	0092      	lsls	r2, r2, #2
 8000f0c:	58d3      	ldr	r3, [r2, r3]
 8000f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	2207      	movs	r2, #7
 8000f14:	4013      	ands	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	220f      	movs	r2, #15
 8000f1a:	409a      	lsls	r2, r3
 8000f1c:	0013      	movs	r3, r2
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	691a      	ldr	r2, [r3, #16]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	2107      	movs	r1, #7
 8000f2e:	400b      	ands	r3, r1
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	409a      	lsls	r2, r3
 8000f34:	0013      	movs	r3, r2
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	08da      	lsrs	r2, r3, #3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3208      	adds	r2, #8
 8000f44:	0092      	lsls	r2, r2, #2
 8000f46:	6939      	ldr	r1, [r7, #16]
 8000f48:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	409a      	lsls	r2, r3
 8000f58:	0013      	movs	r3, r2
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2203      	movs	r2, #3
 8000f68:	401a      	ands	r2, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	409a      	lsls	r2, r3
 8000f70:	0013      	movs	r3, r2
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	23c0      	movs	r3, #192	; 0xc0
 8000f84:	029b      	lsls	r3, r3, #10
 8000f86:	4013      	ands	r3, r2
 8000f88:	d100      	bne.n	8000f8c <HAL_GPIO_Init+0x174>
 8000f8a:	e09a      	b.n	80010c2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8c:	4b54      	ldr	r3, [pc, #336]	; (80010e0 <HAL_GPIO_Init+0x2c8>)
 8000f8e:	699a      	ldr	r2, [r3, #24]
 8000f90:	4b53      	ldr	r3, [pc, #332]	; (80010e0 <HAL_GPIO_Init+0x2c8>)
 8000f92:	2101      	movs	r1, #1
 8000f94:	430a      	orrs	r2, r1
 8000f96:	619a      	str	r2, [r3, #24]
 8000f98:	4b51      	ldr	r3, [pc, #324]	; (80010e0 <HAL_GPIO_Init+0x2c8>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fa4:	4a4f      	ldr	r2, [pc, #316]	; (80010e4 <HAL_GPIO_Init+0x2cc>)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	3302      	adds	r3, #2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	589b      	ldr	r3, [r3, r2]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	220f      	movs	r2, #15
 8000fbc:	409a      	lsls	r2, r3
 8000fbe:	0013      	movs	r3, r2
 8000fc0:	43da      	mvns	r2, r3
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	2390      	movs	r3, #144	; 0x90
 8000fcc:	05db      	lsls	r3, r3, #23
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d013      	beq.n	8000ffa <HAL_GPIO_Init+0x1e2>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a44      	ldr	r2, [pc, #272]	; (80010e8 <HAL_GPIO_Init+0x2d0>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d00d      	beq.n	8000ff6 <HAL_GPIO_Init+0x1de>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a43      	ldr	r2, [pc, #268]	; (80010ec <HAL_GPIO_Init+0x2d4>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d007      	beq.n	8000ff2 <HAL_GPIO_Init+0x1da>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a42      	ldr	r2, [pc, #264]	; (80010f0 <HAL_GPIO_Init+0x2d8>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d101      	bne.n	8000fee <HAL_GPIO_Init+0x1d6>
 8000fea:	2303      	movs	r3, #3
 8000fec:	e006      	b.n	8000ffc <HAL_GPIO_Init+0x1e4>
 8000fee:	2305      	movs	r3, #5
 8000ff0:	e004      	b.n	8000ffc <HAL_GPIO_Init+0x1e4>
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	e002      	b.n	8000ffc <HAL_GPIO_Init+0x1e4>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e000      	b.n	8000ffc <HAL_GPIO_Init+0x1e4>
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	2103      	movs	r1, #3
 8001000:	400a      	ands	r2, r1
 8001002:	0092      	lsls	r2, r2, #2
 8001004:	4093      	lsls	r3, r2
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800100c:	4935      	ldr	r1, [pc, #212]	; (80010e4 <HAL_GPIO_Init+0x2cc>)
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	089b      	lsrs	r3, r3, #2
 8001012:	3302      	adds	r3, #2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800101a:	4b36      	ldr	r3, [pc, #216]	; (80010f4 <HAL_GPIO_Init+0x2dc>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	43da      	mvns	r2, r3
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	2380      	movs	r3, #128	; 0x80
 8001030:	035b      	lsls	r3, r3, #13
 8001032:	4013      	ands	r3, r2
 8001034:	d003      	beq.n	800103e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800103e:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <HAL_GPIO_Init+0x2dc>)
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001044:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <HAL_GPIO_Init+0x2dc>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	43da      	mvns	r2, r3
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	039b      	lsls	r3, r3, #14
 800105c:	4013      	ands	r3, r2
 800105e:	d003      	beq.n	8001068 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001068:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <HAL_GPIO_Init+0x2dc>)
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800106e:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <HAL_GPIO_Init+0x2dc>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	43da      	mvns	r2, r3
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	2380      	movs	r3, #128	; 0x80
 8001084:	029b      	lsls	r3, r3, #10
 8001086:	4013      	ands	r3, r2
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <HAL_GPIO_Init+0x2dc>)
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <HAL_GPIO_Init+0x2dc>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	43da      	mvns	r2, r3
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	025b      	lsls	r3, r3, #9
 80010b0:	4013      	ands	r3, r2
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010bc:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <HAL_GPIO_Init+0x2dc>)
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3301      	adds	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	40da      	lsrs	r2, r3
 80010d0:	1e13      	subs	r3, r2, #0
 80010d2:	d000      	beq.n	80010d6 <HAL_GPIO_Init+0x2be>
 80010d4:	e6a8      	b.n	8000e28 <HAL_GPIO_Init+0x10>
  } 
}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	46c0      	nop			; (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	b006      	add	sp, #24
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010000 	.word	0x40010000
 80010e8:	48000400 	.word	0x48000400
 80010ec:	48000800 	.word	0x48000800
 80010f0:	48000c00 	.word	0x48000c00
 80010f4:	40010400 	.word	0x40010400

080010f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	0008      	movs	r0, r1
 8001102:	0011      	movs	r1, r2
 8001104:	1cbb      	adds	r3, r7, #2
 8001106:	1c02      	adds	r2, r0, #0
 8001108:	801a      	strh	r2, [r3, #0]
 800110a:	1c7b      	adds	r3, r7, #1
 800110c:	1c0a      	adds	r2, r1, #0
 800110e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001110:	1c7b      	adds	r3, r7, #1
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d004      	beq.n	8001122 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001118:	1cbb      	adds	r3, r7, #2
 800111a:	881a      	ldrh	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001120:	e003      	b.n	800112a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001122:	1cbb      	adds	r3, r7, #2
 8001124:	881a      	ldrh	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	629a      	str	r2, [r3, #40]	; 0x28
}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	46bd      	mov	sp, r7
 800112e:	b002      	add	sp, #8
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b084      	sub	sp, #16
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	000a      	movs	r2, r1
 800113c:	1cbb      	adds	r3, r7, #2
 800113e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001146:	1cbb      	adds	r3, r7, #2
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	4013      	ands	r3, r2
 800114e:	041a      	lsls	r2, r3, #16
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	43db      	mvns	r3, r3
 8001154:	1cb9      	adds	r1, r7, #2
 8001156:	8809      	ldrh	r1, [r1, #0]
 8001158:	400b      	ands	r3, r1
 800115a:	431a      	orrs	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	619a      	str	r2, [r3, #24]
}
 8001160:	46c0      	nop			; (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	b004      	add	sp, #16
 8001166:	bd80      	pop	{r7, pc}

08001168 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e301      	b.n	800177e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2201      	movs	r2, #1
 8001180:	4013      	ands	r3, r2
 8001182:	d100      	bne.n	8001186 <HAL_RCC_OscConfig+0x1e>
 8001184:	e08d      	b.n	80012a2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001186:	4bc3      	ldr	r3, [pc, #780]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	220c      	movs	r2, #12
 800118c:	4013      	ands	r3, r2
 800118e:	2b04      	cmp	r3, #4
 8001190:	d00e      	beq.n	80011b0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001192:	4bc0      	ldr	r3, [pc, #768]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	220c      	movs	r2, #12
 8001198:	4013      	ands	r3, r2
 800119a:	2b08      	cmp	r3, #8
 800119c:	d116      	bne.n	80011cc <HAL_RCC_OscConfig+0x64>
 800119e:	4bbd      	ldr	r3, [pc, #756]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	2380      	movs	r3, #128	; 0x80
 80011a4:	025b      	lsls	r3, r3, #9
 80011a6:	401a      	ands	r2, r3
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	025b      	lsls	r3, r3, #9
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d10d      	bne.n	80011cc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b0:	4bb8      	ldr	r3, [pc, #736]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	029b      	lsls	r3, r3, #10
 80011b8:	4013      	ands	r3, r2
 80011ba:	d100      	bne.n	80011be <HAL_RCC_OscConfig+0x56>
 80011bc:	e070      	b.n	80012a0 <HAL_RCC_OscConfig+0x138>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d000      	beq.n	80011c8 <HAL_RCC_OscConfig+0x60>
 80011c6:	e06b      	b.n	80012a0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e2d8      	b.n	800177e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d107      	bne.n	80011e4 <HAL_RCC_OscConfig+0x7c>
 80011d4:	4baf      	ldr	r3, [pc, #700]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4bae      	ldr	r3, [pc, #696]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80011da:	2180      	movs	r1, #128	; 0x80
 80011dc:	0249      	lsls	r1, r1, #9
 80011de:	430a      	orrs	r2, r1
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	e02f      	b.n	8001244 <HAL_RCC_OscConfig+0xdc>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d10c      	bne.n	8001206 <HAL_RCC_OscConfig+0x9e>
 80011ec:	4ba9      	ldr	r3, [pc, #676]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4ba8      	ldr	r3, [pc, #672]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80011f2:	49a9      	ldr	r1, [pc, #676]	; (8001498 <HAL_RCC_OscConfig+0x330>)
 80011f4:	400a      	ands	r2, r1
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	4ba6      	ldr	r3, [pc, #664]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4ba5      	ldr	r3, [pc, #660]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80011fe:	49a7      	ldr	r1, [pc, #668]	; (800149c <HAL_RCC_OscConfig+0x334>)
 8001200:	400a      	ands	r2, r1
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	e01e      	b.n	8001244 <HAL_RCC_OscConfig+0xdc>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b05      	cmp	r3, #5
 800120c:	d10e      	bne.n	800122c <HAL_RCC_OscConfig+0xc4>
 800120e:	4ba1      	ldr	r3, [pc, #644]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4ba0      	ldr	r3, [pc, #640]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001214:	2180      	movs	r1, #128	; 0x80
 8001216:	02c9      	lsls	r1, r1, #11
 8001218:	430a      	orrs	r2, r1
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	4b9d      	ldr	r3, [pc, #628]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b9c      	ldr	r3, [pc, #624]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001222:	2180      	movs	r1, #128	; 0x80
 8001224:	0249      	lsls	r1, r1, #9
 8001226:	430a      	orrs	r2, r1
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	e00b      	b.n	8001244 <HAL_RCC_OscConfig+0xdc>
 800122c:	4b99      	ldr	r3, [pc, #612]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b98      	ldr	r3, [pc, #608]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001232:	4999      	ldr	r1, [pc, #612]	; (8001498 <HAL_RCC_OscConfig+0x330>)
 8001234:	400a      	ands	r2, r1
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	4b96      	ldr	r3, [pc, #600]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b95      	ldr	r3, [pc, #596]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 800123e:	4997      	ldr	r1, [pc, #604]	; (800149c <HAL_RCC_OscConfig+0x334>)
 8001240:	400a      	ands	r2, r1
 8001242:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d014      	beq.n	8001276 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124c:	f7ff fc5a 	bl	8000b04 <HAL_GetTick>
 8001250:	0003      	movs	r3, r0
 8001252:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001256:	f7ff fc55 	bl	8000b04 <HAL_GetTick>
 800125a:	0002      	movs	r2, r0
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b64      	cmp	r3, #100	; 0x64
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e28a      	b.n	800177e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001268:	4b8a      	ldr	r3, [pc, #552]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	029b      	lsls	r3, r3, #10
 8001270:	4013      	ands	r3, r2
 8001272:	d0f0      	beq.n	8001256 <HAL_RCC_OscConfig+0xee>
 8001274:	e015      	b.n	80012a2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001276:	f7ff fc45 	bl	8000b04 <HAL_GetTick>
 800127a:	0003      	movs	r3, r0
 800127c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001280:	f7ff fc40 	bl	8000b04 <HAL_GetTick>
 8001284:	0002      	movs	r2, r0
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b64      	cmp	r3, #100	; 0x64
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e275      	b.n	800177e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001292:	4b80      	ldr	r3, [pc, #512]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	029b      	lsls	r3, r3, #10
 800129a:	4013      	ands	r3, r2
 800129c:	d1f0      	bne.n	8001280 <HAL_RCC_OscConfig+0x118>
 800129e:	e000      	b.n	80012a2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2202      	movs	r2, #2
 80012a8:	4013      	ands	r3, r2
 80012aa:	d100      	bne.n	80012ae <HAL_RCC_OscConfig+0x146>
 80012ac:	e069      	b.n	8001382 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012ae:	4b79      	ldr	r3, [pc, #484]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	220c      	movs	r2, #12
 80012b4:	4013      	ands	r3, r2
 80012b6:	d00b      	beq.n	80012d0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012b8:	4b76      	ldr	r3, [pc, #472]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	220c      	movs	r2, #12
 80012be:	4013      	ands	r3, r2
 80012c0:	2b08      	cmp	r3, #8
 80012c2:	d11c      	bne.n	80012fe <HAL_RCC_OscConfig+0x196>
 80012c4:	4b73      	ldr	r3, [pc, #460]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	2380      	movs	r3, #128	; 0x80
 80012ca:	025b      	lsls	r3, r3, #9
 80012cc:	4013      	ands	r3, r2
 80012ce:	d116      	bne.n	80012fe <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d0:	4b70      	ldr	r3, [pc, #448]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2202      	movs	r2, #2
 80012d6:	4013      	ands	r3, r2
 80012d8:	d005      	beq.n	80012e6 <HAL_RCC_OscConfig+0x17e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d001      	beq.n	80012e6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e24b      	b.n	800177e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e6:	4b6b      	ldr	r3, [pc, #428]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	22f8      	movs	r2, #248	; 0xf8
 80012ec:	4393      	bics	r3, r2
 80012ee:	0019      	movs	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	00da      	lsls	r2, r3, #3
 80012f6:	4b67      	ldr	r3, [pc, #412]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80012f8:	430a      	orrs	r2, r1
 80012fa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fc:	e041      	b.n	8001382 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d024      	beq.n	8001350 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001306:	4b63      	ldr	r3, [pc, #396]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4b62      	ldr	r3, [pc, #392]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 800130c:	2101      	movs	r1, #1
 800130e:	430a      	orrs	r2, r1
 8001310:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001312:	f7ff fbf7 	bl	8000b04 <HAL_GetTick>
 8001316:	0003      	movs	r3, r0
 8001318:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800131c:	f7ff fbf2 	bl	8000b04 <HAL_GetTick>
 8001320:	0002      	movs	r2, r0
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e227      	b.n	800177e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132e:	4b59      	ldr	r3, [pc, #356]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2202      	movs	r2, #2
 8001334:	4013      	ands	r3, r2
 8001336:	d0f1      	beq.n	800131c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001338:	4b56      	ldr	r3, [pc, #344]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	22f8      	movs	r2, #248	; 0xf8
 800133e:	4393      	bics	r3, r2
 8001340:	0019      	movs	r1, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	00da      	lsls	r2, r3, #3
 8001348:	4b52      	ldr	r3, [pc, #328]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 800134a:	430a      	orrs	r2, r1
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	e018      	b.n	8001382 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001350:	4b50      	ldr	r3, [pc, #320]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b4f      	ldr	r3, [pc, #316]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001356:	2101      	movs	r1, #1
 8001358:	438a      	bics	r2, r1
 800135a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff fbd2 	bl	8000b04 <HAL_GetTick>
 8001360:	0003      	movs	r3, r0
 8001362:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001364:	e008      	b.n	8001378 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001366:	f7ff fbcd 	bl	8000b04 <HAL_GetTick>
 800136a:	0002      	movs	r2, r0
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e202      	b.n	800177e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001378:	4b46      	ldr	r3, [pc, #280]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2202      	movs	r2, #2
 800137e:	4013      	ands	r3, r2
 8001380:	d1f1      	bne.n	8001366 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2208      	movs	r2, #8
 8001388:	4013      	ands	r3, r2
 800138a:	d036      	beq.n	80013fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69db      	ldr	r3, [r3, #28]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d019      	beq.n	80013c8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001394:	4b3f      	ldr	r3, [pc, #252]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001396:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001398:	4b3e      	ldr	r3, [pc, #248]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 800139a:	2101      	movs	r1, #1
 800139c:	430a      	orrs	r2, r1
 800139e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a0:	f7ff fbb0 	bl	8000b04 <HAL_GetTick>
 80013a4:	0003      	movs	r3, r0
 80013a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013aa:	f7ff fbab 	bl	8000b04 <HAL_GetTick>
 80013ae:	0002      	movs	r2, r0
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e1e0      	b.n	800177e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013bc:	4b35      	ldr	r3, [pc, #212]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80013be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c0:	2202      	movs	r2, #2
 80013c2:	4013      	ands	r3, r2
 80013c4:	d0f1      	beq.n	80013aa <HAL_RCC_OscConfig+0x242>
 80013c6:	e018      	b.n	80013fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c8:	4b32      	ldr	r3, [pc, #200]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80013ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013cc:	4b31      	ldr	r3, [pc, #196]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80013ce:	2101      	movs	r1, #1
 80013d0:	438a      	bics	r2, r1
 80013d2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d4:	f7ff fb96 	bl	8000b04 <HAL_GetTick>
 80013d8:	0003      	movs	r3, r0
 80013da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013de:	f7ff fb91 	bl	8000b04 <HAL_GetTick>
 80013e2:	0002      	movs	r2, r0
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e1c6      	b.n	800177e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f0:	4b28      	ldr	r3, [pc, #160]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	2202      	movs	r2, #2
 80013f6:	4013      	ands	r3, r2
 80013f8:	d1f1      	bne.n	80013de <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2204      	movs	r2, #4
 8001400:	4013      	ands	r3, r2
 8001402:	d100      	bne.n	8001406 <HAL_RCC_OscConfig+0x29e>
 8001404:	e0b4      	b.n	8001570 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001406:	201f      	movs	r0, #31
 8001408:	183b      	adds	r3, r7, r0
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800140e:	4b21      	ldr	r3, [pc, #132]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001410:	69da      	ldr	r2, [r3, #28]
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	055b      	lsls	r3, r3, #21
 8001416:	4013      	ands	r3, r2
 8001418:	d110      	bne.n	800143c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800141a:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 800141c:	69da      	ldr	r2, [r3, #28]
 800141e:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001420:	2180      	movs	r1, #128	; 0x80
 8001422:	0549      	lsls	r1, r1, #21
 8001424:	430a      	orrs	r2, r1
 8001426:	61da      	str	r2, [r3, #28]
 8001428:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 800142a:	69da      	ldr	r2, [r3, #28]
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	055b      	lsls	r3, r3, #21
 8001430:	4013      	ands	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001436:	183b      	adds	r3, r7, r0
 8001438:	2201      	movs	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143c:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	4013      	ands	r3, r2
 8001446:	d11a      	bne.n	800147e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001448:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 800144e:	2180      	movs	r1, #128	; 0x80
 8001450:	0049      	lsls	r1, r1, #1
 8001452:	430a      	orrs	r2, r1
 8001454:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001456:	f7ff fb55 	bl	8000b04 <HAL_GetTick>
 800145a:	0003      	movs	r3, r0
 800145c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001460:	f7ff fb50 	bl	8000b04 <HAL_GetTick>
 8001464:	0002      	movs	r2, r0
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b64      	cmp	r3, #100	; 0x64
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e185      	b.n	800177e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_RCC_OscConfig+0x338>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	2380      	movs	r3, #128	; 0x80
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4013      	ands	r3, r2
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d10e      	bne.n	80014a4 <HAL_RCC_OscConfig+0x33c>
 8001486:	4b03      	ldr	r3, [pc, #12]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001488:	6a1a      	ldr	r2, [r3, #32]
 800148a:	4b02      	ldr	r3, [pc, #8]	; (8001494 <HAL_RCC_OscConfig+0x32c>)
 800148c:	2101      	movs	r1, #1
 800148e:	430a      	orrs	r2, r1
 8001490:	621a      	str	r2, [r3, #32]
 8001492:	e035      	b.n	8001500 <HAL_RCC_OscConfig+0x398>
 8001494:	40021000 	.word	0x40021000
 8001498:	fffeffff 	.word	0xfffeffff
 800149c:	fffbffff 	.word	0xfffbffff
 80014a0:	40007000 	.word	0x40007000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d10c      	bne.n	80014c6 <HAL_RCC_OscConfig+0x35e>
 80014ac:	4bb6      	ldr	r3, [pc, #728]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80014ae:	6a1a      	ldr	r2, [r3, #32]
 80014b0:	4bb5      	ldr	r3, [pc, #724]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80014b2:	2101      	movs	r1, #1
 80014b4:	438a      	bics	r2, r1
 80014b6:	621a      	str	r2, [r3, #32]
 80014b8:	4bb3      	ldr	r3, [pc, #716]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80014ba:	6a1a      	ldr	r2, [r3, #32]
 80014bc:	4bb2      	ldr	r3, [pc, #712]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80014be:	2104      	movs	r1, #4
 80014c0:	438a      	bics	r2, r1
 80014c2:	621a      	str	r2, [r3, #32]
 80014c4:	e01c      	b.n	8001500 <HAL_RCC_OscConfig+0x398>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	d10c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x380>
 80014ce:	4bae      	ldr	r3, [pc, #696]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80014d0:	6a1a      	ldr	r2, [r3, #32]
 80014d2:	4bad      	ldr	r3, [pc, #692]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80014d4:	2104      	movs	r1, #4
 80014d6:	430a      	orrs	r2, r1
 80014d8:	621a      	str	r2, [r3, #32]
 80014da:	4bab      	ldr	r3, [pc, #684]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80014dc:	6a1a      	ldr	r2, [r3, #32]
 80014de:	4baa      	ldr	r3, [pc, #680]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80014e0:	2101      	movs	r1, #1
 80014e2:	430a      	orrs	r2, r1
 80014e4:	621a      	str	r2, [r3, #32]
 80014e6:	e00b      	b.n	8001500 <HAL_RCC_OscConfig+0x398>
 80014e8:	4ba7      	ldr	r3, [pc, #668]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80014ea:	6a1a      	ldr	r2, [r3, #32]
 80014ec:	4ba6      	ldr	r3, [pc, #664]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80014ee:	2101      	movs	r1, #1
 80014f0:	438a      	bics	r2, r1
 80014f2:	621a      	str	r2, [r3, #32]
 80014f4:	4ba4      	ldr	r3, [pc, #656]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80014f6:	6a1a      	ldr	r2, [r3, #32]
 80014f8:	4ba3      	ldr	r3, [pc, #652]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80014fa:	2104      	movs	r1, #4
 80014fc:	438a      	bics	r2, r1
 80014fe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d014      	beq.n	8001532 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001508:	f7ff fafc 	bl	8000b04 <HAL_GetTick>
 800150c:	0003      	movs	r3, r0
 800150e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001510:	e009      	b.n	8001526 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001512:	f7ff faf7 	bl	8000b04 <HAL_GetTick>
 8001516:	0002      	movs	r2, r0
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	4a9b      	ldr	r2, [pc, #620]	; (800178c <HAL_RCC_OscConfig+0x624>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e12b      	b.n	800177e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001526:	4b98      	ldr	r3, [pc, #608]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	2202      	movs	r2, #2
 800152c:	4013      	ands	r3, r2
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x3aa>
 8001530:	e013      	b.n	800155a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001532:	f7ff fae7 	bl	8000b04 <HAL_GetTick>
 8001536:	0003      	movs	r3, r0
 8001538:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800153a:	e009      	b.n	8001550 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800153c:	f7ff fae2 	bl	8000b04 <HAL_GetTick>
 8001540:	0002      	movs	r2, r0
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	4a91      	ldr	r2, [pc, #580]	; (800178c <HAL_RCC_OscConfig+0x624>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e116      	b.n	800177e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001550:	4b8d      	ldr	r3, [pc, #564]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	2202      	movs	r2, #2
 8001556:	4013      	ands	r3, r2
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800155a:	231f      	movs	r3, #31
 800155c:	18fb      	adds	r3, r7, r3
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d105      	bne.n	8001570 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001564:	4b88      	ldr	r3, [pc, #544]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001566:	69da      	ldr	r2, [r3, #28]
 8001568:	4b87      	ldr	r3, [pc, #540]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 800156a:	4989      	ldr	r1, [pc, #548]	; (8001790 <HAL_RCC_OscConfig+0x628>)
 800156c:	400a      	ands	r2, r1
 800156e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2210      	movs	r2, #16
 8001576:	4013      	ands	r3, r2
 8001578:	d063      	beq.n	8001642 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d12a      	bne.n	80015d8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001582:	4b81      	ldr	r3, [pc, #516]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001586:	4b80      	ldr	r3, [pc, #512]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001588:	2104      	movs	r1, #4
 800158a:	430a      	orrs	r2, r1
 800158c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800158e:	4b7e      	ldr	r3, [pc, #504]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001592:	4b7d      	ldr	r3, [pc, #500]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001594:	2101      	movs	r1, #1
 8001596:	430a      	orrs	r2, r1
 8001598:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159a:	f7ff fab3 	bl	8000b04 <HAL_GetTick>
 800159e:	0003      	movs	r3, r0
 80015a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015a4:	f7ff faae 	bl	8000b04 <HAL_GetTick>
 80015a8:	0002      	movs	r2, r0
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e0e3      	b.n	800177e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015b6:	4b74      	ldr	r3, [pc, #464]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80015b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ba:	2202      	movs	r2, #2
 80015bc:	4013      	ands	r3, r2
 80015be:	d0f1      	beq.n	80015a4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015c0:	4b71      	ldr	r3, [pc, #452]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80015c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c4:	22f8      	movs	r2, #248	; 0xf8
 80015c6:	4393      	bics	r3, r2
 80015c8:	0019      	movs	r1, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	00da      	lsls	r2, r3, #3
 80015d0:	4b6d      	ldr	r3, [pc, #436]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80015d2:	430a      	orrs	r2, r1
 80015d4:	635a      	str	r2, [r3, #52]	; 0x34
 80015d6:	e034      	b.n	8001642 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	3305      	adds	r3, #5
 80015de:	d111      	bne.n	8001604 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80015e0:	4b69      	ldr	r3, [pc, #420]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80015e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015e4:	4b68      	ldr	r3, [pc, #416]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80015e6:	2104      	movs	r1, #4
 80015e8:	438a      	bics	r2, r1
 80015ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015ec:	4b66      	ldr	r3, [pc, #408]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80015ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f0:	22f8      	movs	r2, #248	; 0xf8
 80015f2:	4393      	bics	r3, r2
 80015f4:	0019      	movs	r1, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	00da      	lsls	r2, r3, #3
 80015fc:	4b62      	ldr	r3, [pc, #392]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80015fe:	430a      	orrs	r2, r1
 8001600:	635a      	str	r2, [r3, #52]	; 0x34
 8001602:	e01e      	b.n	8001642 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001604:	4b60      	ldr	r3, [pc, #384]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001608:	4b5f      	ldr	r3, [pc, #380]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 800160a:	2104      	movs	r1, #4
 800160c:	430a      	orrs	r2, r1
 800160e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001610:	4b5d      	ldr	r3, [pc, #372]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001614:	4b5c      	ldr	r3, [pc, #368]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001616:	2101      	movs	r1, #1
 8001618:	438a      	bics	r2, r1
 800161a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161c:	f7ff fa72 	bl	8000b04 <HAL_GetTick>
 8001620:	0003      	movs	r3, r0
 8001622:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001626:	f7ff fa6d 	bl	8000b04 <HAL_GetTick>
 800162a:	0002      	movs	r2, r0
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e0a2      	b.n	800177e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001638:	4b53      	ldr	r3, [pc, #332]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 800163a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800163c:	2202      	movs	r2, #2
 800163e:	4013      	ands	r3, r2
 8001640:	d1f1      	bne.n	8001626 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d100      	bne.n	800164c <HAL_RCC_OscConfig+0x4e4>
 800164a:	e097      	b.n	800177c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800164c:	4b4e      	ldr	r3, [pc, #312]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	220c      	movs	r2, #12
 8001652:	4013      	ands	r3, r2
 8001654:	2b08      	cmp	r3, #8
 8001656:	d100      	bne.n	800165a <HAL_RCC_OscConfig+0x4f2>
 8001658:	e06b      	b.n	8001732 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d14c      	bne.n	80016fc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001662:	4b49      	ldr	r3, [pc, #292]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	4b48      	ldr	r3, [pc, #288]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001668:	494a      	ldr	r1, [pc, #296]	; (8001794 <HAL_RCC_OscConfig+0x62c>)
 800166a:	400a      	ands	r2, r1
 800166c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166e:	f7ff fa49 	bl	8000b04 <HAL_GetTick>
 8001672:	0003      	movs	r3, r0
 8001674:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001678:	f7ff fa44 	bl	8000b04 <HAL_GetTick>
 800167c:	0002      	movs	r2, r0
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e079      	b.n	800177e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800168a:	4b3f      	ldr	r3, [pc, #252]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	049b      	lsls	r3, r3, #18
 8001692:	4013      	ands	r3, r2
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001696:	4b3c      	ldr	r3, [pc, #240]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169a:	220f      	movs	r2, #15
 800169c:	4393      	bics	r3, r2
 800169e:	0019      	movs	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016a4:	4b38      	ldr	r3, [pc, #224]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80016a6:	430a      	orrs	r2, r1
 80016a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80016aa:	4b37      	ldr	r3, [pc, #220]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	4a3a      	ldr	r2, [pc, #232]	; (8001798 <HAL_RCC_OscConfig+0x630>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	0019      	movs	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	431a      	orrs	r2, r3
 80016be:	4b32      	ldr	r3, [pc, #200]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80016c0:	430a      	orrs	r2, r1
 80016c2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c4:	4b30      	ldr	r3, [pc, #192]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b2f      	ldr	r3, [pc, #188]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80016ca:	2180      	movs	r1, #128	; 0x80
 80016cc:	0449      	lsls	r1, r1, #17
 80016ce:	430a      	orrs	r2, r1
 80016d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d2:	f7ff fa17 	bl	8000b04 <HAL_GetTick>
 80016d6:	0003      	movs	r3, r0
 80016d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016dc:	f7ff fa12 	bl	8000b04 <HAL_GetTick>
 80016e0:	0002      	movs	r2, r0
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e047      	b.n	800177e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016ee:	4b26      	ldr	r3, [pc, #152]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	049b      	lsls	r3, r3, #18
 80016f6:	4013      	ands	r3, r2
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x574>
 80016fa:	e03f      	b.n	800177c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fc:	4b22      	ldr	r3, [pc, #136]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b21      	ldr	r3, [pc, #132]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001702:	4924      	ldr	r1, [pc, #144]	; (8001794 <HAL_RCC_OscConfig+0x62c>)
 8001704:	400a      	ands	r2, r1
 8001706:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001708:	f7ff f9fc 	bl	8000b04 <HAL_GetTick>
 800170c:	0003      	movs	r3, r0
 800170e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001712:	f7ff f9f7 	bl	8000b04 <HAL_GetTick>
 8001716:	0002      	movs	r2, r0
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e02c      	b.n	800177e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001724:	4b18      	ldr	r3, [pc, #96]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	049b      	lsls	r3, r3, #18
 800172c:	4013      	ands	r3, r2
 800172e:	d1f0      	bne.n	8001712 <HAL_RCC_OscConfig+0x5aa>
 8001730:	e024      	b.n	800177c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d101      	bne.n	800173e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e01f      	b.n	800177e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800173e:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001744:	4b10      	ldr	r3, [pc, #64]	; (8001788 <HAL_RCC_OscConfig+0x620>)
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	025b      	lsls	r3, r3, #9
 8001750:	401a      	ands	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001756:	429a      	cmp	r2, r3
 8001758:	d10e      	bne.n	8001778 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	220f      	movs	r2, #15
 800175e:	401a      	ands	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001764:	429a      	cmp	r2, r3
 8001766:	d107      	bne.n	8001778 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	23f0      	movs	r3, #240	; 0xf0
 800176c:	039b      	lsls	r3, r3, #14
 800176e:	401a      	ands	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e000      	b.n	800177e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	0018      	movs	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	b008      	add	sp, #32
 8001784:	bd80      	pop	{r7, pc}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	40021000 	.word	0x40021000
 800178c:	00001388 	.word	0x00001388
 8001790:	efffffff 	.word	0xefffffff
 8001794:	feffffff 	.word	0xfeffffff
 8001798:	ffc2ffff 	.word	0xffc2ffff

0800179c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0b3      	b.n	8001918 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017b0:	4b5b      	ldr	r3, [pc, #364]	; (8001920 <HAL_RCC_ClockConfig+0x184>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2201      	movs	r2, #1
 80017b6:	4013      	ands	r3, r2
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d911      	bls.n	80017e2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017be:	4b58      	ldr	r3, [pc, #352]	; (8001920 <HAL_RCC_ClockConfig+0x184>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2201      	movs	r2, #1
 80017c4:	4393      	bics	r3, r2
 80017c6:	0019      	movs	r1, r3
 80017c8:	4b55      	ldr	r3, [pc, #340]	; (8001920 <HAL_RCC_ClockConfig+0x184>)
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d0:	4b53      	ldr	r3, [pc, #332]	; (8001920 <HAL_RCC_ClockConfig+0x184>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2201      	movs	r2, #1
 80017d6:	4013      	ands	r3, r2
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d001      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e09a      	b.n	8001918 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2202      	movs	r2, #2
 80017e8:	4013      	ands	r3, r2
 80017ea:	d015      	beq.n	8001818 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2204      	movs	r2, #4
 80017f2:	4013      	ands	r3, r2
 80017f4:	d006      	beq.n	8001804 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017f6:	4b4b      	ldr	r3, [pc, #300]	; (8001924 <HAL_RCC_ClockConfig+0x188>)
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	4b4a      	ldr	r3, [pc, #296]	; (8001924 <HAL_RCC_ClockConfig+0x188>)
 80017fc:	21e0      	movs	r1, #224	; 0xe0
 80017fe:	00c9      	lsls	r1, r1, #3
 8001800:	430a      	orrs	r2, r1
 8001802:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001804:	4b47      	ldr	r3, [pc, #284]	; (8001924 <HAL_RCC_ClockConfig+0x188>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	22f0      	movs	r2, #240	; 0xf0
 800180a:	4393      	bics	r3, r2
 800180c:	0019      	movs	r1, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	4b44      	ldr	r3, [pc, #272]	; (8001924 <HAL_RCC_ClockConfig+0x188>)
 8001814:	430a      	orrs	r2, r1
 8001816:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2201      	movs	r2, #1
 800181e:	4013      	ands	r3, r2
 8001820:	d040      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d107      	bne.n	800183a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	4b3e      	ldr	r3, [pc, #248]	; (8001924 <HAL_RCC_ClockConfig+0x188>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	029b      	lsls	r3, r3, #10
 8001832:	4013      	ands	r3, r2
 8001834:	d114      	bne.n	8001860 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e06e      	b.n	8001918 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d107      	bne.n	8001852 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001842:	4b38      	ldr	r3, [pc, #224]	; (8001924 <HAL_RCC_ClockConfig+0x188>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	2380      	movs	r3, #128	; 0x80
 8001848:	049b      	lsls	r3, r3, #18
 800184a:	4013      	ands	r3, r2
 800184c:	d108      	bne.n	8001860 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e062      	b.n	8001918 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001852:	4b34      	ldr	r3, [pc, #208]	; (8001924 <HAL_RCC_ClockConfig+0x188>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2202      	movs	r2, #2
 8001858:	4013      	ands	r3, r2
 800185a:	d101      	bne.n	8001860 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e05b      	b.n	8001918 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001860:	4b30      	ldr	r3, [pc, #192]	; (8001924 <HAL_RCC_ClockConfig+0x188>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2203      	movs	r2, #3
 8001866:	4393      	bics	r3, r2
 8001868:	0019      	movs	r1, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <HAL_RCC_ClockConfig+0x188>)
 8001870:	430a      	orrs	r2, r1
 8001872:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001874:	f7ff f946 	bl	8000b04 <HAL_GetTick>
 8001878:	0003      	movs	r3, r0
 800187a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187c:	e009      	b.n	8001892 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800187e:	f7ff f941 	bl	8000b04 <HAL_GetTick>
 8001882:	0002      	movs	r2, r0
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	4a27      	ldr	r2, [pc, #156]	; (8001928 <HAL_RCC_ClockConfig+0x18c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e042      	b.n	8001918 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001892:	4b24      	ldr	r3, [pc, #144]	; (8001924 <HAL_RCC_ClockConfig+0x188>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	220c      	movs	r2, #12
 8001898:	401a      	ands	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d1ec      	bne.n	800187e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018a4:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <HAL_RCC_ClockConfig+0x184>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2201      	movs	r2, #1
 80018aa:	4013      	ands	r3, r2
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d211      	bcs.n	80018d6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b2:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_RCC_ClockConfig+0x184>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2201      	movs	r2, #1
 80018b8:	4393      	bics	r3, r2
 80018ba:	0019      	movs	r1, r3
 80018bc:	4b18      	ldr	r3, [pc, #96]	; (8001920 <HAL_RCC_ClockConfig+0x184>)
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c4:	4b16      	ldr	r3, [pc, #88]	; (8001920 <HAL_RCC_ClockConfig+0x184>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2201      	movs	r2, #1
 80018ca:	4013      	ands	r3, r2
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d001      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e020      	b.n	8001918 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2204      	movs	r2, #4
 80018dc:	4013      	ands	r3, r2
 80018de:	d009      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018e0:	4b10      	ldr	r3, [pc, #64]	; (8001924 <HAL_RCC_ClockConfig+0x188>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	4a11      	ldr	r2, [pc, #68]	; (800192c <HAL_RCC_ClockConfig+0x190>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	0019      	movs	r1, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <HAL_RCC_ClockConfig+0x188>)
 80018f0:	430a      	orrs	r2, r1
 80018f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018f4:	f000 f820 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 80018f8:	0001      	movs	r1, r0
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <HAL_RCC_ClockConfig+0x188>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	091b      	lsrs	r3, r3, #4
 8001900:	220f      	movs	r2, #15
 8001902:	4013      	ands	r3, r2
 8001904:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <HAL_RCC_ClockConfig+0x194>)
 8001906:	5cd3      	ldrb	r3, [r2, r3]
 8001908:	000a      	movs	r2, r1
 800190a:	40da      	lsrs	r2, r3
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_RCC_ClockConfig+0x198>)
 800190e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001910:	2003      	movs	r0, #3
 8001912:	f7ff f8b1 	bl	8000a78 <HAL_InitTick>
  
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	b004      	add	sp, #16
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40022000 	.word	0x40022000
 8001924:	40021000 	.word	0x40021000
 8001928:	00001388 	.word	0x00001388
 800192c:	fffff8ff 	.word	0xfffff8ff
 8001930:	08003770 	.word	0x08003770
 8001934:	20000000 	.word	0x20000000

08001938 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	2300      	movs	r3, #0
 800194c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001952:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	220c      	movs	r2, #12
 800195c:	4013      	ands	r3, r2
 800195e:	2b04      	cmp	r3, #4
 8001960:	d002      	beq.n	8001968 <HAL_RCC_GetSysClockFreq+0x30>
 8001962:	2b08      	cmp	r3, #8
 8001964:	d003      	beq.n	800196e <HAL_RCC_GetSysClockFreq+0x36>
 8001966:	e02c      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001968:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800196a:	613b      	str	r3, [r7, #16]
      break;
 800196c:	e02c      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	0c9b      	lsrs	r3, r3, #18
 8001972:	220f      	movs	r2, #15
 8001974:	4013      	ands	r3, r2
 8001976:	4a19      	ldr	r2, [pc, #100]	; (80019dc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001978:	5cd3      	ldrb	r3, [r2, r3]
 800197a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800197c:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001980:	220f      	movs	r2, #15
 8001982:	4013      	ands	r3, r2
 8001984:	4a16      	ldr	r2, [pc, #88]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001986:	5cd3      	ldrb	r3, [r2, r3]
 8001988:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	025b      	lsls	r3, r3, #9
 8001990:	4013      	ands	r3, r2
 8001992:	d009      	beq.n	80019a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001994:	68b9      	ldr	r1, [r7, #8]
 8001996:	4810      	ldr	r0, [pc, #64]	; (80019d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001998:	f7fe fbc8 	bl	800012c <__udivsi3>
 800199c:	0003      	movs	r3, r0
 800199e:	001a      	movs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4353      	muls	r3, r2
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	e009      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	000a      	movs	r2, r1
 80019ac:	0152      	lsls	r2, r2, #5
 80019ae:	1a52      	subs	r2, r2, r1
 80019b0:	0193      	lsls	r3, r2, #6
 80019b2:	1a9b      	subs	r3, r3, r2
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	185b      	adds	r3, r3, r1
 80019b8:	021b      	lsls	r3, r3, #8
 80019ba:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	613b      	str	r3, [r7, #16]
      break;
 80019c0:	e002      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019c2:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019c4:	613b      	str	r3, [r7, #16]
      break;
 80019c6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019c8:	693b      	ldr	r3, [r7, #16]
}
 80019ca:	0018      	movs	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b006      	add	sp, #24
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	40021000 	.word	0x40021000
 80019d8:	007a1200 	.word	0x007a1200
 80019dc:	08003788 	.word	0x08003788
 80019e0:	08003798 	.word	0x08003798

080019e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019e8:	4b02      	ldr	r3, [pc, #8]	; (80019f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80019ea:	681b      	ldr	r3, [r3, #0]
}
 80019ec:	0018      	movs	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	20000000 	.word	0x20000000

080019f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80019fc:	f7ff fff2 	bl	80019e4 <HAL_RCC_GetHCLKFreq>
 8001a00:	0001      	movs	r1, r0
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	0a1b      	lsrs	r3, r3, #8
 8001a08:	2207      	movs	r2, #7
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a0e:	5cd3      	ldrb	r3, [r2, r3]
 8001a10:	40d9      	lsrs	r1, r3
 8001a12:	000b      	movs	r3, r1
}    
 8001a14:	0018      	movs	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	08003780 	.word	0x08003780

08001a24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	025b      	lsls	r3, r3, #9
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d100      	bne.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001a40:	e08e      	b.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001a42:	2017      	movs	r0, #23
 8001a44:	183b      	adds	r3, r7, r0
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a4a:	4b57      	ldr	r3, [pc, #348]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a4c:	69da      	ldr	r2, [r3, #28]
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	055b      	lsls	r3, r3, #21
 8001a52:	4013      	ands	r3, r2
 8001a54:	d110      	bne.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a56:	4b54      	ldr	r3, [pc, #336]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a58:	69da      	ldr	r2, [r3, #28]
 8001a5a:	4b53      	ldr	r3, [pc, #332]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a5c:	2180      	movs	r1, #128	; 0x80
 8001a5e:	0549      	lsls	r1, r1, #21
 8001a60:	430a      	orrs	r2, r1
 8001a62:	61da      	str	r2, [r3, #28]
 8001a64:	4b50      	ldr	r3, [pc, #320]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a66:	69da      	ldr	r2, [r3, #28]
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	055b      	lsls	r3, r3, #21
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a72:	183b      	adds	r3, r7, r0
 8001a74:	2201      	movs	r2, #1
 8001a76:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a78:	4b4c      	ldr	r3, [pc, #304]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4013      	ands	r3, r2
 8001a82:	d11a      	bne.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a84:	4b49      	ldr	r3, [pc, #292]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b48      	ldr	r3, [pc, #288]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001a8a:	2180      	movs	r1, #128	; 0x80
 8001a8c:	0049      	lsls	r1, r1, #1
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a92:	f7ff f837 	bl	8000b04 <HAL_GetTick>
 8001a96:	0003      	movs	r3, r0
 8001a98:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9a:	e008      	b.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a9c:	f7ff f832 	bl	8000b04 <HAL_GetTick>
 8001aa0:	0002      	movs	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b64      	cmp	r3, #100	; 0x64
 8001aa8:	d901      	bls.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e077      	b.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aae:	4b3f      	ldr	r3, [pc, #252]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001aba:	4b3b      	ldr	r3, [pc, #236]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001abc:	6a1a      	ldr	r2, [r3, #32]
 8001abe:	23c0      	movs	r3, #192	; 0xc0
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d034      	beq.n	8001b36 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	23c0      	movs	r3, #192	; 0xc0
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d02c      	beq.n	8001b36 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001adc:	4b32      	ldr	r3, [pc, #200]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	4a33      	ldr	r2, [pc, #204]	; (8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ae6:	4b30      	ldr	r3, [pc, #192]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ae8:	6a1a      	ldr	r2, [r3, #32]
 8001aea:	4b2f      	ldr	r3, [pc, #188]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001aec:	2180      	movs	r1, #128	; 0x80
 8001aee:	0249      	lsls	r1, r1, #9
 8001af0:	430a      	orrs	r2, r1
 8001af2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001af4:	4b2c      	ldr	r3, [pc, #176]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001af6:	6a1a      	ldr	r2, [r3, #32]
 8001af8:	4b2b      	ldr	r3, [pc, #172]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001afa:	492e      	ldr	r1, [pc, #184]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001afc:	400a      	ands	r2, r1
 8001afe:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b00:	4b29      	ldr	r3, [pc, #164]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d013      	beq.n	8001b36 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0e:	f7fe fff9 	bl	8000b04 <HAL_GetTick>
 8001b12:	0003      	movs	r3, r0
 8001b14:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b16:	e009      	b.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b18:	f7fe fff4 	bl	8000b04 <HAL_GetTick>
 8001b1c:	0002      	movs	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	4a25      	ldr	r2, [pc, #148]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e038      	b.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	2202      	movs	r2, #2
 8001b32:	4013      	ands	r3, r2
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b36:	4b1c      	ldr	r3, [pc, #112]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	4a1d      	ldr	r2, [pc, #116]	; (8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	0019      	movs	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	4b18      	ldr	r3, [pc, #96]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b46:	430a      	orrs	r2, r1
 8001b48:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b4a:	2317      	movs	r3, #23
 8001b4c:	18fb      	adds	r3, r7, r3
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d105      	bne.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b56:	69da      	ldr	r2, [r3, #28]
 8001b58:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b5a:	4918      	ldr	r1, [pc, #96]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001b5c:	400a      	ands	r2, r1
 8001b5e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2201      	movs	r2, #1
 8001b66:	4013      	ands	r3, r2
 8001b68:	d009      	beq.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	2203      	movs	r2, #3
 8001b70:	4393      	bics	r3, r2
 8001b72:	0019      	movs	r1, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2220      	movs	r2, #32
 8001b84:	4013      	ands	r3, r2
 8001b86:	d009      	beq.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b88:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	2210      	movs	r2, #16
 8001b8e:	4393      	bics	r3, r2
 8001b90:	0019      	movs	r1, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	b006      	add	sp, #24
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40007000 	.word	0x40007000
 8001bb0:	fffffcff 	.word	0xfffffcff
 8001bb4:	fffeffff 	.word	0xfffeffff
 8001bb8:	00001388 	.word	0x00001388
 8001bbc:	efffffff 	.word	0xefffffff

08001bc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e044      	b.n	8001c5c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d107      	bne.n	8001bea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2278      	movs	r2, #120	; 0x78
 8001bde:	2100      	movs	r1, #0
 8001be0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	0018      	movs	r0, r3
 8001be6:	f7fe fe53 	bl	8000890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2224      	movs	r2, #36	; 0x24
 8001bee:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	438a      	bics	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	0018      	movs	r0, r3
 8001c04:	f000 fc88 	bl	8002518 <UART_SetConfig>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d101      	bne.n	8001c12 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e024      	b.n	8001c5c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	f000 fda3 	bl	8002768 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	490d      	ldr	r1, [pc, #52]	; (8001c64 <HAL_UART_Init+0xa4>)
 8001c2e:	400a      	ands	r2, r1
 8001c30:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2108      	movs	r1, #8
 8001c3e:	438a      	bics	r2, r1
 8001c40:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	0018      	movs	r0, r3
 8001c56:	f000 fe3b 	bl	80028d0 <UART_CheckIdleState>
 8001c5a:	0003      	movs	r3, r0
}
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	b002      	add	sp, #8
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	fffff7ff 	.word	0xfffff7ff

08001c68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	; 0x28
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	1dbb      	adds	r3, r7, #6
 8001c76:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c7c:	2b20      	cmp	r3, #32
 8001c7e:	d000      	beq.n	8001c82 <HAL_UART_Transmit+0x1a>
 8001c80:	e08d      	b.n	8001d9e <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_UART_Transmit+0x28>
 8001c88:	1dbb      	adds	r3, r7, #6
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e085      	b.n	8001da0 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	015b      	lsls	r3, r3, #5
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d109      	bne.n	8001cb4 <HAL_UART_Transmit+0x4c>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d105      	bne.n	8001cb4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	2201      	movs	r2, #1
 8001cac:	4013      	ands	r3, r2
 8001cae:	d001      	beq.n	8001cb4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e075      	b.n	8001da0 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2284      	movs	r2, #132	; 0x84
 8001cb8:	2100      	movs	r1, #0
 8001cba:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2221      	movs	r2, #33	; 0x21
 8001cc0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001cc2:	f7fe ff1f 	bl	8000b04 <HAL_GetTick>
 8001cc6:	0003      	movs	r3, r0
 8001cc8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	1dba      	adds	r2, r7, #6
 8001cce:	2150      	movs	r1, #80	; 0x50
 8001cd0:	8812      	ldrh	r2, [r2, #0]
 8001cd2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	1dba      	adds	r2, r7, #6
 8001cd8:	2152      	movs	r1, #82	; 0x52
 8001cda:	8812      	ldrh	r2, [r2, #0]
 8001cdc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	2380      	movs	r3, #128	; 0x80
 8001ce4:	015b      	lsls	r3, r3, #5
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d108      	bne.n	8001cfc <HAL_UART_Transmit+0x94>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d104      	bne.n	8001cfc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	61bb      	str	r3, [r7, #24]
 8001cfa:	e003      	b.n	8001d04 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001d04:	e030      	b.n	8001d68 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	0013      	movs	r3, r2
 8001d10:	2200      	movs	r2, #0
 8001d12:	2180      	movs	r1, #128	; 0x80
 8001d14:	f000 fe84 	bl	8002a20 <UART_WaitOnFlagUntilTimeout>
 8001d18:	1e03      	subs	r3, r0, #0
 8001d1a:	d004      	beq.n	8001d26 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e03c      	b.n	8001da0 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10b      	bne.n	8001d44 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	881a      	ldrh	r2, [r3, #0]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	05d2      	lsls	r2, r2, #23
 8001d36:	0dd2      	lsrs	r2, r2, #23
 8001d38:	b292      	uxth	r2, r2
 8001d3a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	3302      	adds	r3, #2
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	e008      	b.n	8001d56 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	781a      	ldrb	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	b292      	uxth	r2, r2
 8001d4e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	3301      	adds	r3, #1
 8001d54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2252      	movs	r2, #82	; 0x52
 8001d5a:	5a9b      	ldrh	r3, [r3, r2]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	b299      	uxth	r1, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2252      	movs	r2, #82	; 0x52
 8001d66:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2252      	movs	r2, #82	; 0x52
 8001d6c:	5a9b      	ldrh	r3, [r3, r2]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1c8      	bne.n	8001d06 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	0013      	movs	r3, r2
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2140      	movs	r1, #64	; 0x40
 8001d82:	f000 fe4d 	bl	8002a20 <UART_WaitOnFlagUntilTimeout>
 8001d86:	1e03      	subs	r3, r0, #0
 8001d88:	d004      	beq.n	8001d94 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e005      	b.n	8001da0 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2220      	movs	r2, #32
 8001d98:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	e000      	b.n	8001da0 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8001d9e:	2302      	movs	r3, #2
  }
}
 8001da0:	0018      	movs	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b008      	add	sp, #32
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08a      	sub	sp, #40	; 0x28
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	1dbb      	adds	r3, r7, #6
 8001db6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2280      	movs	r2, #128	; 0x80
 8001dbc:	589b      	ldr	r3, [r3, r2]
 8001dbe:	2b20      	cmp	r3, #32
 8001dc0:	d000      	beq.n	8001dc4 <HAL_UART_Receive+0x1c>
 8001dc2:	e0bd      	b.n	8001f40 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_UART_Receive+0x2a>
 8001dca:	1dbb      	adds	r3, r7, #6
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e0b5      	b.n	8001f42 <HAL_UART_Receive+0x19a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	2380      	movs	r3, #128	; 0x80
 8001ddc:	015b      	lsls	r3, r3, #5
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d109      	bne.n	8001df6 <HAL_UART_Receive+0x4e>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d105      	bne.n	8001df6 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2201      	movs	r2, #1
 8001dee:	4013      	ands	r3, r2
 8001df0:	d001      	beq.n	8001df6 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e0a5      	b.n	8001f42 <HAL_UART_Receive+0x19a>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2284      	movs	r2, #132	; 0x84
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2280      	movs	r2, #128	; 0x80
 8001e02:	2122      	movs	r1, #34	; 0x22
 8001e04:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e0c:	f7fe fe7a 	bl	8000b04 <HAL_GetTick>
 8001e10:	0003      	movs	r3, r0
 8001e12:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	1dba      	adds	r2, r7, #6
 8001e18:	2158      	movs	r1, #88	; 0x58
 8001e1a:	8812      	ldrh	r2, [r2, #0]
 8001e1c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1dba      	adds	r2, r7, #6
 8001e22:	215a      	movs	r1, #90	; 0x5a
 8001e24:	8812      	ldrh	r2, [r2, #0]
 8001e26:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	015b      	lsls	r3, r3, #5
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d10d      	bne.n	8001e50 <HAL_UART_Receive+0xa8>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d104      	bne.n	8001e46 <HAL_UART_Receive+0x9e>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	225c      	movs	r2, #92	; 0x5c
 8001e40:	4942      	ldr	r1, [pc, #264]	; (8001f4c <HAL_UART_Receive+0x1a4>)
 8001e42:	5299      	strh	r1, [r3, r2]
 8001e44:	e01a      	b.n	8001e7c <HAL_UART_Receive+0xd4>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	225c      	movs	r2, #92	; 0x5c
 8001e4a:	21ff      	movs	r1, #255	; 0xff
 8001e4c:	5299      	strh	r1, [r3, r2]
 8001e4e:	e015      	b.n	8001e7c <HAL_UART_Receive+0xd4>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10d      	bne.n	8001e74 <HAL_UART_Receive+0xcc>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d104      	bne.n	8001e6a <HAL_UART_Receive+0xc2>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	225c      	movs	r2, #92	; 0x5c
 8001e64:	21ff      	movs	r1, #255	; 0xff
 8001e66:	5299      	strh	r1, [r3, r2]
 8001e68:	e008      	b.n	8001e7c <HAL_UART_Receive+0xd4>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	225c      	movs	r2, #92	; 0x5c
 8001e6e:	217f      	movs	r1, #127	; 0x7f
 8001e70:	5299      	strh	r1, [r3, r2]
 8001e72:	e003      	b.n	8001e7c <HAL_UART_Receive+0xd4>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	225c      	movs	r2, #92	; 0x5c
 8001e78:	2100      	movs	r1, #0
 8001e7a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8001e7c:	2312      	movs	r3, #18
 8001e7e:	18fb      	adds	r3, r7, r3
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	215c      	movs	r1, #92	; 0x5c
 8001e84:	5a52      	ldrh	r2, [r2, r1]
 8001e86:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	015b      	lsls	r3, r3, #5
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d108      	bne.n	8001ea6 <HAL_UART_Receive+0xfe>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d104      	bne.n	8001ea6 <HAL_UART_Receive+0xfe>
    {
      pdata8bits  = NULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	61bb      	str	r3, [r7, #24]
 8001ea4:	e003      	b.n	8001eae <HAL_UART_Receive+0x106>
    }
    else
    {
      pdata8bits  = pData;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8001eae:	e03b      	b.n	8001f28 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	0013      	movs	r3, r2
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2120      	movs	r1, #32
 8001ebe:	f000 fdaf 	bl	8002a20 <UART_WaitOnFlagUntilTimeout>
 8001ec2:	1e03      	subs	r3, r0, #0
 8001ec4:	d005      	beq.n	8001ed2 <HAL_UART_Receive+0x12a>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2280      	movs	r2, #128	; 0x80
 8001eca:	2120      	movs	r1, #32
 8001ecc:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e037      	b.n	8001f42 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10e      	bne.n	8001ef6 <HAL_UART_Receive+0x14e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	2212      	movs	r2, #18
 8001ee2:	18ba      	adds	r2, r7, r2
 8001ee4:	8812      	ldrh	r2, [r2, #0]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	61bb      	str	r3, [r7, #24]
 8001ef4:	e00f      	b.n	8001f16 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2212      	movs	r2, #18
 8001f02:	18ba      	adds	r2, r7, r2
 8001f04:	8812      	ldrh	r2, [r2, #0]
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	4013      	ands	r3, r2
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	3301      	adds	r3, #1
 8001f14:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	225a      	movs	r2, #90	; 0x5a
 8001f1a:	5a9b      	ldrh	r3, [r3, r2]
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	b299      	uxth	r1, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	225a      	movs	r2, #90	; 0x5a
 8001f26:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	225a      	movs	r2, #90	; 0x5a
 8001f2c:	5a9b      	ldrh	r3, [r3, r2]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1bd      	bne.n	8001eb0 <HAL_UART_Receive+0x108>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2280      	movs	r2, #128	; 0x80
 8001f38:	2120      	movs	r1, #32
 8001f3a:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	e000      	b.n	8001f42 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8001f40:	2302      	movs	r3, #2
  }
}
 8001f42:	0018      	movs	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	b008      	add	sp, #32
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	000001ff 	.word	0x000001ff

08001f50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f50:	b590      	push	{r4, r7, lr}
 8001f52:	b0ab      	sub	sp, #172	; 0xac
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	22a4      	movs	r2, #164	; 0xa4
 8001f60:	18b9      	adds	r1, r7, r2
 8001f62:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	20a0      	movs	r0, #160	; 0xa0
 8001f6c:	1839      	adds	r1, r7, r0
 8001f6e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	219c      	movs	r1, #156	; 0x9c
 8001f78:	1879      	adds	r1, r7, r1
 8001f7a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001f7c:	0011      	movs	r1, r2
 8001f7e:	18bb      	adds	r3, r7, r2
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a99      	ldr	r2, [pc, #612]	; (80021e8 <HAL_UART_IRQHandler+0x298>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	2298      	movs	r2, #152	; 0x98
 8001f88:	18bc      	adds	r4, r7, r2
 8001f8a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001f8c:	18bb      	adds	r3, r7, r2
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d114      	bne.n	8001fbe <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001f94:	187b      	adds	r3, r7, r1
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d00f      	beq.n	8001fbe <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001f9e:	183b      	adds	r3, r7, r0
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d00a      	beq.n	8001fbe <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d100      	bne.n	8001fb2 <HAL_UART_IRQHandler+0x62>
 8001fb0:	e286      	b.n	80024c0 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	0010      	movs	r0, r2
 8001fba:	4798      	blx	r3
      }
      return;
 8001fbc:	e280      	b.n	80024c0 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001fbe:	2398      	movs	r3, #152	; 0x98
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d100      	bne.n	8001fca <HAL_UART_IRQHandler+0x7a>
 8001fc8:	e114      	b.n	80021f4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001fca:	239c      	movs	r3, #156	; 0x9c
 8001fcc:	18fb      	adds	r3, r7, r3
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d106      	bne.n	8001fe4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001fd6:	23a0      	movs	r3, #160	; 0xa0
 8001fd8:	18fb      	adds	r3, r7, r3
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a83      	ldr	r2, [pc, #524]	; (80021ec <HAL_UART_IRQHandler+0x29c>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d100      	bne.n	8001fe4 <HAL_UART_IRQHandler+0x94>
 8001fe2:	e107      	b.n	80021f4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001fe4:	23a4      	movs	r3, #164	; 0xa4
 8001fe6:	18fb      	adds	r3, r7, r3
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2201      	movs	r2, #1
 8001fec:	4013      	ands	r3, r2
 8001fee:	d012      	beq.n	8002016 <HAL_UART_IRQHandler+0xc6>
 8001ff0:	23a0      	movs	r3, #160	; 0xa0
 8001ff2:	18fb      	adds	r3, r7, r3
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d00b      	beq.n	8002016 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2201      	movs	r2, #1
 8002004:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2284      	movs	r2, #132	; 0x84
 800200a:	589b      	ldr	r3, [r3, r2]
 800200c:	2201      	movs	r2, #1
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2184      	movs	r1, #132	; 0x84
 8002014:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002016:	23a4      	movs	r3, #164	; 0xa4
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2202      	movs	r2, #2
 800201e:	4013      	ands	r3, r2
 8002020:	d011      	beq.n	8002046 <HAL_UART_IRQHandler+0xf6>
 8002022:	239c      	movs	r3, #156	; 0x9c
 8002024:	18fb      	adds	r3, r7, r3
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2201      	movs	r2, #1
 800202a:	4013      	ands	r3, r2
 800202c:	d00b      	beq.n	8002046 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2202      	movs	r2, #2
 8002034:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2284      	movs	r2, #132	; 0x84
 800203a:	589b      	ldr	r3, [r3, r2]
 800203c:	2204      	movs	r2, #4
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2184      	movs	r1, #132	; 0x84
 8002044:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002046:	23a4      	movs	r3, #164	; 0xa4
 8002048:	18fb      	adds	r3, r7, r3
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2204      	movs	r2, #4
 800204e:	4013      	ands	r3, r2
 8002050:	d011      	beq.n	8002076 <HAL_UART_IRQHandler+0x126>
 8002052:	239c      	movs	r3, #156	; 0x9c
 8002054:	18fb      	adds	r3, r7, r3
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2201      	movs	r2, #1
 800205a:	4013      	ands	r3, r2
 800205c:	d00b      	beq.n	8002076 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2204      	movs	r2, #4
 8002064:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2284      	movs	r2, #132	; 0x84
 800206a:	589b      	ldr	r3, [r3, r2]
 800206c:	2202      	movs	r2, #2
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2184      	movs	r1, #132	; 0x84
 8002074:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002076:	23a4      	movs	r3, #164	; 0xa4
 8002078:	18fb      	adds	r3, r7, r3
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2208      	movs	r2, #8
 800207e:	4013      	ands	r3, r2
 8002080:	d017      	beq.n	80020b2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002082:	23a0      	movs	r3, #160	; 0xa0
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2220      	movs	r2, #32
 800208a:	4013      	ands	r3, r2
 800208c:	d105      	bne.n	800209a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800208e:	239c      	movs	r3, #156	; 0x9c
 8002090:	18fb      	adds	r3, r7, r3
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2201      	movs	r2, #1
 8002096:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002098:	d00b      	beq.n	80020b2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2208      	movs	r2, #8
 80020a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2284      	movs	r2, #132	; 0x84
 80020a6:	589b      	ldr	r3, [r3, r2]
 80020a8:	2208      	movs	r2, #8
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2184      	movs	r1, #132	; 0x84
 80020b0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80020b2:	23a4      	movs	r3, #164	; 0xa4
 80020b4:	18fb      	adds	r3, r7, r3
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	2380      	movs	r3, #128	; 0x80
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	4013      	ands	r3, r2
 80020be:	d013      	beq.n	80020e8 <HAL_UART_IRQHandler+0x198>
 80020c0:	23a0      	movs	r3, #160	; 0xa0
 80020c2:	18fb      	adds	r3, r7, r3
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	2380      	movs	r3, #128	; 0x80
 80020c8:	04db      	lsls	r3, r3, #19
 80020ca:	4013      	ands	r3, r2
 80020cc:	d00c      	beq.n	80020e8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2280      	movs	r2, #128	; 0x80
 80020d4:	0112      	lsls	r2, r2, #4
 80020d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2284      	movs	r2, #132	; 0x84
 80020dc:	589b      	ldr	r3, [r3, r2]
 80020de:	2220      	movs	r2, #32
 80020e0:	431a      	orrs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2184      	movs	r1, #132	; 0x84
 80020e6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2284      	movs	r2, #132	; 0x84
 80020ec:	589b      	ldr	r3, [r3, r2]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d100      	bne.n	80020f4 <HAL_UART_IRQHandler+0x1a4>
 80020f2:	e1e7      	b.n	80024c4 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80020f4:	23a4      	movs	r3, #164	; 0xa4
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2220      	movs	r2, #32
 80020fc:	4013      	ands	r3, r2
 80020fe:	d00e      	beq.n	800211e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002100:	23a0      	movs	r3, #160	; 0xa0
 8002102:	18fb      	adds	r3, r7, r3
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2220      	movs	r2, #32
 8002108:	4013      	ands	r3, r2
 800210a:	d008      	beq.n	800211e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002110:	2b00      	cmp	r3, #0
 8002112:	d004      	beq.n	800211e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	0010      	movs	r0, r2
 800211c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2284      	movs	r2, #132	; 0x84
 8002122:	589b      	ldr	r3, [r3, r2]
 8002124:	2194      	movs	r1, #148	; 0x94
 8002126:	187a      	adds	r2, r7, r1
 8002128:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2240      	movs	r2, #64	; 0x40
 8002132:	4013      	ands	r3, r2
 8002134:	2b40      	cmp	r3, #64	; 0x40
 8002136:	d004      	beq.n	8002142 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002138:	187b      	adds	r3, r7, r1
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2228      	movs	r2, #40	; 0x28
 800213e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002140:	d047      	beq.n	80021d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	0018      	movs	r0, r3
 8002146:	f000 fcd5 	bl	8002af4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2240      	movs	r2, #64	; 0x40
 8002152:	4013      	ands	r3, r2
 8002154:	2b40      	cmp	r3, #64	; 0x40
 8002156:	d137      	bne.n	80021c8 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002158:	f3ef 8310 	mrs	r3, PRIMASK
 800215c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800215e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002160:	2090      	movs	r0, #144	; 0x90
 8002162:	183a      	adds	r2, r7, r0
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	2301      	movs	r3, #1
 8002168:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800216a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800216c:	f383 8810 	msr	PRIMASK, r3
}
 8002170:	46c0      	nop			; (mov r8, r8)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2140      	movs	r1, #64	; 0x40
 800217e:	438a      	bics	r2, r1
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	183b      	adds	r3, r7, r0
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002188:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800218a:	f383 8810 	msr	PRIMASK, r3
}
 800218e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002194:	2b00      	cmp	r3, #0
 8002196:	d012      	beq.n	80021be <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800219c:	4a14      	ldr	r2, [pc, #80]	; (80021f0 <HAL_UART_IRQHandler+0x2a0>)
 800219e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021a4:	0018      	movs	r0, r3
 80021a6:	f7fe fdf1 	bl	8000d8c <HAL_DMA_Abort_IT>
 80021aa:	1e03      	subs	r3, r0, #0
 80021ac:	d01a      	beq.n	80021e4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021b8:	0018      	movs	r0, r3
 80021ba:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021bc:	e012      	b.n	80021e4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	0018      	movs	r0, r3
 80021c2:	f000 f995 	bl	80024f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021c6:	e00d      	b.n	80021e4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	0018      	movs	r0, r3
 80021cc:	f000 f990 	bl	80024f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021d0:	e008      	b.n	80021e4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	0018      	movs	r0, r3
 80021d6:	f000 f98b 	bl	80024f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2284      	movs	r2, #132	; 0x84
 80021de:	2100      	movs	r1, #0
 80021e0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80021e2:	e16f      	b.n	80024c4 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021e4:	46c0      	nop			; (mov r8, r8)
    return;
 80021e6:	e16d      	b.n	80024c4 <HAL_UART_IRQHandler+0x574>
 80021e8:	0000080f 	.word	0x0000080f
 80021ec:	04000120 	.word	0x04000120
 80021f0:	08002bbd 	.word	0x08002bbd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d000      	beq.n	80021fe <HAL_UART_IRQHandler+0x2ae>
 80021fc:	e139      	b.n	8002472 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80021fe:	23a4      	movs	r3, #164	; 0xa4
 8002200:	18fb      	adds	r3, r7, r3
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2210      	movs	r2, #16
 8002206:	4013      	ands	r3, r2
 8002208:	d100      	bne.n	800220c <HAL_UART_IRQHandler+0x2bc>
 800220a:	e132      	b.n	8002472 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800220c:	23a0      	movs	r3, #160	; 0xa0
 800220e:	18fb      	adds	r3, r7, r3
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2210      	movs	r2, #16
 8002214:	4013      	ands	r3, r2
 8002216:	d100      	bne.n	800221a <HAL_UART_IRQHandler+0x2ca>
 8002218:	e12b      	b.n	8002472 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2210      	movs	r2, #16
 8002220:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2240      	movs	r2, #64	; 0x40
 800222a:	4013      	ands	r3, r2
 800222c:	2b40      	cmp	r3, #64	; 0x40
 800222e:	d000      	beq.n	8002232 <HAL_UART_IRQHandler+0x2e2>
 8002230:	e09f      	b.n	8002372 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	217e      	movs	r1, #126	; 0x7e
 800223c:	187b      	adds	r3, r7, r1
 800223e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002240:	187b      	adds	r3, r7, r1
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d100      	bne.n	800224a <HAL_UART_IRQHandler+0x2fa>
 8002248:	e13e      	b.n	80024c8 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2258      	movs	r2, #88	; 0x58
 800224e:	5a9b      	ldrh	r3, [r3, r2]
 8002250:	187a      	adds	r2, r7, r1
 8002252:	8812      	ldrh	r2, [r2, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d300      	bcc.n	800225a <HAL_UART_IRQHandler+0x30a>
 8002258:	e136      	b.n	80024c8 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	187a      	adds	r2, r7, r1
 800225e:	215a      	movs	r1, #90	; 0x5a
 8002260:	8812      	ldrh	r2, [r2, #0]
 8002262:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	2b20      	cmp	r3, #32
 800226c:	d06f      	beq.n	800234e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800226e:	f3ef 8310 	mrs	r3, PRIMASK
 8002272:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002276:	67bb      	str	r3, [r7, #120]	; 0x78
 8002278:	2301      	movs	r3, #1
 800227a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800227c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800227e:	f383 8810 	msr	PRIMASK, r3
}
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4992      	ldr	r1, [pc, #584]	; (80024d8 <HAL_UART_IRQHandler+0x588>)
 8002290:	400a      	ands	r2, r1
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002296:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800229a:	f383 8810 	msr	PRIMASK, r3
}
 800229e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022a0:	f3ef 8310 	mrs	r3, PRIMASK
 80022a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80022a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022a8:	677b      	str	r3, [r7, #116]	; 0x74
 80022aa:	2301      	movs	r3, #1
 80022ac:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022b0:	f383 8810 	msr	PRIMASK, r3
}
 80022b4:	46c0      	nop			; (mov r8, r8)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2101      	movs	r1, #1
 80022c2:	438a      	bics	r2, r1
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022c8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022cc:	f383 8810 	msr	PRIMASK, r3
}
 80022d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022d2:	f3ef 8310 	mrs	r3, PRIMASK
 80022d6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80022d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022da:	673b      	str	r3, [r7, #112]	; 0x70
 80022dc:	2301      	movs	r3, #1
 80022de:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022e2:	f383 8810 	msr	PRIMASK, r3
}
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2140      	movs	r1, #64	; 0x40
 80022f4:	438a      	bics	r2, r1
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022fa:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022fe:	f383 8810 	msr	PRIMASK, r3
}
 8002302:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2280      	movs	r2, #128	; 0x80
 8002308:	2120      	movs	r1, #32
 800230a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002312:	f3ef 8310 	mrs	r3, PRIMASK
 8002316:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002318:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800231a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800231c:	2301      	movs	r3, #1
 800231e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002320:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002322:	f383 8810 	msr	PRIMASK, r3
}
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2110      	movs	r1, #16
 8002334:	438a      	bics	r2, r1
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800233a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800233c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800233e:	f383 8810 	msr	PRIMASK, r3
}
 8002342:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002348:	0018      	movs	r0, r3
 800234a:	f7fe fce7 	bl	8000d1c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2202      	movs	r2, #2
 8002352:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2258      	movs	r2, #88	; 0x58
 8002358:	5a9a      	ldrh	r2, [r3, r2]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	215a      	movs	r1, #90	; 0x5a
 800235e:	5a5b      	ldrh	r3, [r3, r1]
 8002360:	b29b      	uxth	r3, r3
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	b29a      	uxth	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	0011      	movs	r1, r2
 800236a:	0018      	movs	r0, r3
 800236c:	f000 f8c8 	bl	8002500 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002370:	e0aa      	b.n	80024c8 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2258      	movs	r2, #88	; 0x58
 8002376:	5a99      	ldrh	r1, [r3, r2]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	225a      	movs	r2, #90	; 0x5a
 800237c:	5a9b      	ldrh	r3, [r3, r2]
 800237e:	b29a      	uxth	r2, r3
 8002380:	208e      	movs	r0, #142	; 0x8e
 8002382:	183b      	adds	r3, r7, r0
 8002384:	1a8a      	subs	r2, r1, r2
 8002386:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	225a      	movs	r2, #90	; 0x5a
 800238c:	5a9b      	ldrh	r3, [r3, r2]
 800238e:	b29b      	uxth	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d100      	bne.n	8002396 <HAL_UART_IRQHandler+0x446>
 8002394:	e09a      	b.n	80024cc <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8002396:	183b      	adds	r3, r7, r0
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d100      	bne.n	80023a0 <HAL_UART_IRQHandler+0x450>
 800239e:	e095      	b.n	80024cc <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023a0:	f3ef 8310 	mrs	r3, PRIMASK
 80023a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80023a6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023a8:	2488      	movs	r4, #136	; 0x88
 80023aa:	193a      	adds	r2, r7, r4
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	2301      	movs	r3, #1
 80023b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f383 8810 	msr	PRIMASK, r3
}
 80023b8:	46c0      	nop			; (mov r8, r8)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4945      	ldr	r1, [pc, #276]	; (80024dc <HAL_UART_IRQHandler+0x58c>)
 80023c6:	400a      	ands	r2, r1
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	193b      	adds	r3, r7, r4
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f383 8810 	msr	PRIMASK, r3
}
 80023d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023d8:	f3ef 8310 	mrs	r3, PRIMASK
 80023dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80023de:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023e0:	2484      	movs	r4, #132	; 0x84
 80023e2:	193a      	adds	r2, r7, r4
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	2301      	movs	r3, #1
 80023e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f383 8810 	msr	PRIMASK, r3
}
 80023f0:	46c0      	nop			; (mov r8, r8)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2101      	movs	r1, #1
 80023fe:	438a      	bics	r2, r1
 8002400:	609a      	str	r2, [r3, #8]
 8002402:	193b      	adds	r3, r7, r4
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	f383 8810 	msr	PRIMASK, r3
}
 800240e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2280      	movs	r2, #128	; 0x80
 8002414:	2120      	movs	r1, #32
 8002416:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002424:	f3ef 8310 	mrs	r3, PRIMASK
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800242c:	2480      	movs	r4, #128	; 0x80
 800242e:	193a      	adds	r2, r7, r4
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	2301      	movs	r3, #1
 8002434:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002438:	f383 8810 	msr	PRIMASK, r3
}
 800243c:	46c0      	nop			; (mov r8, r8)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2110      	movs	r1, #16
 800244a:	438a      	bics	r2, r1
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	193b      	adds	r3, r7, r4
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002456:	f383 8810 	msr	PRIMASK, r3
}
 800245a:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002462:	183b      	adds	r3, r7, r0
 8002464:	881a      	ldrh	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	0011      	movs	r1, r2
 800246a:	0018      	movs	r0, r3
 800246c:	f000 f848 	bl	8002500 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002470:	e02c      	b.n	80024cc <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002472:	23a4      	movs	r3, #164	; 0xa4
 8002474:	18fb      	adds	r3, r7, r3
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2280      	movs	r2, #128	; 0x80
 800247a:	4013      	ands	r3, r2
 800247c:	d00f      	beq.n	800249e <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800247e:	23a0      	movs	r3, #160	; 0xa0
 8002480:	18fb      	adds	r3, r7, r3
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2280      	movs	r2, #128	; 0x80
 8002486:	4013      	ands	r3, r2
 8002488:	d009      	beq.n	800249e <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800248e:	2b00      	cmp	r3, #0
 8002490:	d01e      	beq.n	80024d0 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	0010      	movs	r0, r2
 800249a:	4798      	blx	r3
    }
    return;
 800249c:	e018      	b.n	80024d0 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800249e:	23a4      	movs	r3, #164	; 0xa4
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2240      	movs	r2, #64	; 0x40
 80024a6:	4013      	ands	r3, r2
 80024a8:	d013      	beq.n	80024d2 <HAL_UART_IRQHandler+0x582>
 80024aa:	23a0      	movs	r3, #160	; 0xa0
 80024ac:	18fb      	adds	r3, r7, r3
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2240      	movs	r2, #64	; 0x40
 80024b2:	4013      	ands	r3, r2
 80024b4:	d00d      	beq.n	80024d2 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	0018      	movs	r0, r3
 80024ba:	f000 fb96 	bl	8002bea <UART_EndTransmit_IT>
    return;
 80024be:	e008      	b.n	80024d2 <HAL_UART_IRQHandler+0x582>
      return;
 80024c0:	46c0      	nop			; (mov r8, r8)
 80024c2:	e006      	b.n	80024d2 <HAL_UART_IRQHandler+0x582>
    return;
 80024c4:	46c0      	nop			; (mov r8, r8)
 80024c6:	e004      	b.n	80024d2 <HAL_UART_IRQHandler+0x582>
      return;
 80024c8:	46c0      	nop			; (mov r8, r8)
 80024ca:	e002      	b.n	80024d2 <HAL_UART_IRQHandler+0x582>
      return;
 80024cc:	46c0      	nop			; (mov r8, r8)
 80024ce:	e000      	b.n	80024d2 <HAL_UART_IRQHandler+0x582>
    return;
 80024d0:	46c0      	nop			; (mov r8, r8)
  }

}
 80024d2:	46bd      	mov	sp, r7
 80024d4:	b02b      	add	sp, #172	; 0xac
 80024d6:	bd90      	pop	{r4, r7, pc}
 80024d8:	fffffeff 	.word	0xfffffeff
 80024dc:	fffffedf 	.word	0xfffffedf

080024e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80024e8:	46c0      	nop			; (mov r8, r8)
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b002      	add	sp, #8
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80024f8:	46c0      	nop			; (mov r8, r8)
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b002      	add	sp, #8
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	000a      	movs	r2, r1
 800250a:	1cbb      	adds	r3, r7, #2
 800250c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	46bd      	mov	sp, r7
 8002512:	b002      	add	sp, #8
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002520:	231e      	movs	r3, #30
 8002522:	18fb      	adds	r3, r7, r3
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	4313      	orrs	r3, r2
 800253e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a83      	ldr	r2, [pc, #524]	; (8002754 <UART_SetConfig+0x23c>)
 8002548:	4013      	ands	r3, r2
 800254a:	0019      	movs	r1, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	430a      	orrs	r2, r1
 8002554:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	4a7e      	ldr	r2, [pc, #504]	; (8002758 <UART_SetConfig+0x240>)
 800255e:	4013      	ands	r3, r2
 8002560:	0019      	movs	r1, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	4313      	orrs	r3, r2
 800257c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	4a75      	ldr	r2, [pc, #468]	; (800275c <UART_SetConfig+0x244>)
 8002586:	4013      	ands	r3, r2
 8002588:	0019      	movs	r1, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	430a      	orrs	r2, r1
 8002592:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002594:	4b72      	ldr	r3, [pc, #456]	; (8002760 <UART_SetConfig+0x248>)
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	2203      	movs	r2, #3
 800259a:	4013      	ands	r3, r2
 800259c:	2b03      	cmp	r3, #3
 800259e:	d00d      	beq.n	80025bc <UART_SetConfig+0xa4>
 80025a0:	d81b      	bhi.n	80025da <UART_SetConfig+0xc2>
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d014      	beq.n	80025d0 <UART_SetConfig+0xb8>
 80025a6:	d818      	bhi.n	80025da <UART_SetConfig+0xc2>
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <UART_SetConfig+0x9a>
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d00a      	beq.n	80025c6 <UART_SetConfig+0xae>
 80025b0:	e013      	b.n	80025da <UART_SetConfig+0xc2>
 80025b2:	231f      	movs	r3, #31
 80025b4:	18fb      	adds	r3, r7, r3
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
 80025ba:	e012      	b.n	80025e2 <UART_SetConfig+0xca>
 80025bc:	231f      	movs	r3, #31
 80025be:	18fb      	adds	r3, r7, r3
 80025c0:	2202      	movs	r2, #2
 80025c2:	701a      	strb	r2, [r3, #0]
 80025c4:	e00d      	b.n	80025e2 <UART_SetConfig+0xca>
 80025c6:	231f      	movs	r3, #31
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	2204      	movs	r2, #4
 80025cc:	701a      	strb	r2, [r3, #0]
 80025ce:	e008      	b.n	80025e2 <UART_SetConfig+0xca>
 80025d0:	231f      	movs	r3, #31
 80025d2:	18fb      	adds	r3, r7, r3
 80025d4:	2208      	movs	r2, #8
 80025d6:	701a      	strb	r2, [r3, #0]
 80025d8:	e003      	b.n	80025e2 <UART_SetConfig+0xca>
 80025da:	231f      	movs	r3, #31
 80025dc:	18fb      	adds	r3, r7, r3
 80025de:	2210      	movs	r2, #16
 80025e0:	701a      	strb	r2, [r3, #0]
 80025e2:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69da      	ldr	r2, [r3, #28]
 80025e8:	2380      	movs	r3, #128	; 0x80
 80025ea:	021b      	lsls	r3, r3, #8
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d15c      	bne.n	80026aa <UART_SetConfig+0x192>
  {
    switch (clocksource)
 80025f0:	231f      	movs	r3, #31
 80025f2:	18fb      	adds	r3, r7, r3
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d015      	beq.n	8002626 <UART_SetConfig+0x10e>
 80025fa:	dc18      	bgt.n	800262e <UART_SetConfig+0x116>
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d00d      	beq.n	800261c <UART_SetConfig+0x104>
 8002600:	dc15      	bgt.n	800262e <UART_SetConfig+0x116>
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <UART_SetConfig+0xf4>
 8002606:	2b02      	cmp	r3, #2
 8002608:	d005      	beq.n	8002616 <UART_SetConfig+0xfe>
 800260a:	e010      	b.n	800262e <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800260c:	f7ff f9f4 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
 8002610:	0003      	movs	r3, r0
 8002612:	61bb      	str	r3, [r7, #24]
        break;
 8002614:	e012      	b.n	800263c <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002616:	4b53      	ldr	r3, [pc, #332]	; (8002764 <UART_SetConfig+0x24c>)
 8002618:	61bb      	str	r3, [r7, #24]
        break;
 800261a:	e00f      	b.n	800263c <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800261c:	f7ff f98c 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 8002620:	0003      	movs	r3, r0
 8002622:	61bb      	str	r3, [r7, #24]
        break;
 8002624:	e00a      	b.n	800263c <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	021b      	lsls	r3, r3, #8
 800262a:	61bb      	str	r3, [r7, #24]
        break;
 800262c:	e006      	b.n	800263c <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 800262e:	2300      	movs	r3, #0
 8002630:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002632:	231e      	movs	r3, #30
 8002634:	18fb      	adds	r3, r7, r3
 8002636:	2201      	movs	r2, #1
 8002638:	701a      	strb	r2, [r3, #0]
        break;
 800263a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d100      	bne.n	8002644 <UART_SetConfig+0x12c>
 8002642:	e07a      	b.n	800273a <UART_SetConfig+0x222>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	005a      	lsls	r2, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	085b      	lsrs	r3, r3, #1
 800264e:	18d2      	adds	r2, r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	0019      	movs	r1, r3
 8002656:	0010      	movs	r0, r2
 8002658:	f7fd fd68 	bl	800012c <__udivsi3>
 800265c:	0003      	movs	r3, r0
 800265e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	2b0f      	cmp	r3, #15
 8002664:	d91c      	bls.n	80026a0 <UART_SetConfig+0x188>
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	2380      	movs	r3, #128	; 0x80
 800266a:	025b      	lsls	r3, r3, #9
 800266c:	429a      	cmp	r2, r3
 800266e:	d217      	bcs.n	80026a0 <UART_SetConfig+0x188>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	b29a      	uxth	r2, r3
 8002674:	200e      	movs	r0, #14
 8002676:	183b      	adds	r3, r7, r0
 8002678:	210f      	movs	r1, #15
 800267a:	438a      	bics	r2, r1
 800267c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	085b      	lsrs	r3, r3, #1
 8002682:	b29b      	uxth	r3, r3
 8002684:	2207      	movs	r2, #7
 8002686:	4013      	ands	r3, r2
 8002688:	b299      	uxth	r1, r3
 800268a:	183b      	adds	r3, r7, r0
 800268c:	183a      	adds	r2, r7, r0
 800268e:	8812      	ldrh	r2, [r2, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	183a      	adds	r2, r7, r0
 800269a:	8812      	ldrh	r2, [r2, #0]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	e04c      	b.n	800273a <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 80026a0:	231e      	movs	r3, #30
 80026a2:	18fb      	adds	r3, r7, r3
 80026a4:	2201      	movs	r2, #1
 80026a6:	701a      	strb	r2, [r3, #0]
 80026a8:	e047      	b.n	800273a <UART_SetConfig+0x222>
      }
    }
  }
  else
  {
    switch (clocksource)
 80026aa:	231f      	movs	r3, #31
 80026ac:	18fb      	adds	r3, r7, r3
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d015      	beq.n	80026e0 <UART_SetConfig+0x1c8>
 80026b4:	dc18      	bgt.n	80026e8 <UART_SetConfig+0x1d0>
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d00d      	beq.n	80026d6 <UART_SetConfig+0x1be>
 80026ba:	dc15      	bgt.n	80026e8 <UART_SetConfig+0x1d0>
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <UART_SetConfig+0x1ae>
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d005      	beq.n	80026d0 <UART_SetConfig+0x1b8>
 80026c4:	e010      	b.n	80026e8 <UART_SetConfig+0x1d0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026c6:	f7ff f997 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
 80026ca:	0003      	movs	r3, r0
 80026cc:	61bb      	str	r3, [r7, #24]
        break;
 80026ce:	e012      	b.n	80026f6 <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026d0:	4b24      	ldr	r3, [pc, #144]	; (8002764 <UART_SetConfig+0x24c>)
 80026d2:	61bb      	str	r3, [r7, #24]
        break;
 80026d4:	e00f      	b.n	80026f6 <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026d6:	f7ff f92f 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 80026da:	0003      	movs	r3, r0
 80026dc:	61bb      	str	r3, [r7, #24]
        break;
 80026de:	e00a      	b.n	80026f6 <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	021b      	lsls	r3, r3, #8
 80026e4:	61bb      	str	r3, [r7, #24]
        break;
 80026e6:	e006      	b.n	80026f6 <UART_SetConfig+0x1de>
      default:
        pclk = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80026ec:	231e      	movs	r3, #30
 80026ee:	18fb      	adds	r3, r7, r3
 80026f0:	2201      	movs	r2, #1
 80026f2:	701a      	strb	r2, [r3, #0]
        break;
 80026f4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d01e      	beq.n	800273a <UART_SetConfig+0x222>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	085a      	lsrs	r2, r3, #1
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	18d2      	adds	r2, r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	0019      	movs	r1, r3
 800270c:	0010      	movs	r0, r2
 800270e:	f7fd fd0d 	bl	800012c <__udivsi3>
 8002712:	0003      	movs	r3, r0
 8002714:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	2b0f      	cmp	r3, #15
 800271a:	d90a      	bls.n	8002732 <UART_SetConfig+0x21a>
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	025b      	lsls	r3, r3, #9
 8002722:	429a      	cmp	r2, r3
 8002724:	d205      	bcs.n	8002732 <UART_SetConfig+0x21a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	b29a      	uxth	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	60da      	str	r2, [r3, #12]
 8002730:	e003      	b.n	800273a <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 8002732:	231e      	movs	r3, #30
 8002734:	18fb      	adds	r3, r7, r3
 8002736:	2201      	movs	r2, #1
 8002738:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002746:	231e      	movs	r3, #30
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	781b      	ldrb	r3, [r3, #0]
}
 800274c:	0018      	movs	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	b008      	add	sp, #32
 8002752:	bd80      	pop	{r7, pc}
 8002754:	ffff69f3 	.word	0xffff69f3
 8002758:	ffffcfff 	.word	0xffffcfff
 800275c:	fffff4ff 	.word	0xfffff4ff
 8002760:	40021000 	.word	0x40021000
 8002764:	007a1200 	.word	0x007a1200

08002768 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	2201      	movs	r2, #1
 8002776:	4013      	ands	r3, r2
 8002778:	d00b      	beq.n	8002792 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4a4a      	ldr	r2, [pc, #296]	; (80028ac <UART_AdvFeatureConfig+0x144>)
 8002782:	4013      	ands	r3, r2
 8002784:	0019      	movs	r1, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	2202      	movs	r2, #2
 8002798:	4013      	ands	r3, r2
 800279a:	d00b      	beq.n	80027b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	4a43      	ldr	r2, [pc, #268]	; (80028b0 <UART_AdvFeatureConfig+0x148>)
 80027a4:	4013      	ands	r3, r2
 80027a6:	0019      	movs	r1, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	2204      	movs	r2, #4
 80027ba:	4013      	ands	r3, r2
 80027bc:	d00b      	beq.n	80027d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4a3b      	ldr	r2, [pc, #236]	; (80028b4 <UART_AdvFeatureConfig+0x14c>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	0019      	movs	r1, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	2208      	movs	r2, #8
 80027dc:	4013      	ands	r3, r2
 80027de:	d00b      	beq.n	80027f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	4a34      	ldr	r2, [pc, #208]	; (80028b8 <UART_AdvFeatureConfig+0x150>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	0019      	movs	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	2210      	movs	r2, #16
 80027fe:	4013      	ands	r3, r2
 8002800:	d00b      	beq.n	800281a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	4a2c      	ldr	r2, [pc, #176]	; (80028bc <UART_AdvFeatureConfig+0x154>)
 800280a:	4013      	ands	r3, r2
 800280c:	0019      	movs	r1, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	2220      	movs	r2, #32
 8002820:	4013      	ands	r3, r2
 8002822:	d00b      	beq.n	800283c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	4a25      	ldr	r2, [pc, #148]	; (80028c0 <UART_AdvFeatureConfig+0x158>)
 800282c:	4013      	ands	r3, r2
 800282e:	0019      	movs	r1, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	2240      	movs	r2, #64	; 0x40
 8002842:	4013      	ands	r3, r2
 8002844:	d01d      	beq.n	8002882 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	4a1d      	ldr	r2, [pc, #116]	; (80028c4 <UART_AdvFeatureConfig+0x15c>)
 800284e:	4013      	ands	r3, r2
 8002850:	0019      	movs	r1, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002862:	2380      	movs	r3, #128	; 0x80
 8002864:	035b      	lsls	r3, r3, #13
 8002866:	429a      	cmp	r2, r3
 8002868:	d10b      	bne.n	8002882 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4a15      	ldr	r2, [pc, #84]	; (80028c8 <UART_AdvFeatureConfig+0x160>)
 8002872:	4013      	ands	r3, r2
 8002874:	0019      	movs	r1, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	2280      	movs	r2, #128	; 0x80
 8002888:	4013      	ands	r3, r2
 800288a:	d00b      	beq.n	80028a4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	4a0e      	ldr	r2, [pc, #56]	; (80028cc <UART_AdvFeatureConfig+0x164>)
 8002894:	4013      	ands	r3, r2
 8002896:	0019      	movs	r1, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	605a      	str	r2, [r3, #4]
  }
}
 80028a4:	46c0      	nop			; (mov r8, r8)
 80028a6:	46bd      	mov	sp, r7
 80028a8:	b002      	add	sp, #8
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	fffdffff 	.word	0xfffdffff
 80028b0:	fffeffff 	.word	0xfffeffff
 80028b4:	fffbffff 	.word	0xfffbffff
 80028b8:	ffff7fff 	.word	0xffff7fff
 80028bc:	ffffefff 	.word	0xffffefff
 80028c0:	ffffdfff 	.word	0xffffdfff
 80028c4:	ffefffff 	.word	0xffefffff
 80028c8:	ff9fffff 	.word	0xff9fffff
 80028cc:	fff7ffff 	.word	0xfff7ffff

080028d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b092      	sub	sp, #72	; 0x48
 80028d4:	af02      	add	r7, sp, #8
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2284      	movs	r2, #132	; 0x84
 80028dc:	2100      	movs	r1, #0
 80028de:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80028e0:	f7fe f910 	bl	8000b04 <HAL_GetTick>
 80028e4:	0003      	movs	r3, r0
 80028e6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2208      	movs	r2, #8
 80028f0:	4013      	ands	r3, r2
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	d12c      	bne.n	8002950 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028f8:	2280      	movs	r2, #128	; 0x80
 80028fa:	0391      	lsls	r1, r2, #14
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	4a46      	ldr	r2, [pc, #280]	; (8002a18 <UART_CheckIdleState+0x148>)
 8002900:	9200      	str	r2, [sp, #0]
 8002902:	2200      	movs	r2, #0
 8002904:	f000 f88c 	bl	8002a20 <UART_WaitOnFlagUntilTimeout>
 8002908:	1e03      	subs	r3, r0, #0
 800290a:	d021      	beq.n	8002950 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800290c:	f3ef 8310 	mrs	r3, PRIMASK
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002914:	63bb      	str	r3, [r7, #56]	; 0x38
 8002916:	2301      	movs	r3, #1
 8002918:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800291a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291c:	f383 8810 	msr	PRIMASK, r3
}
 8002920:	46c0      	nop			; (mov r8, r8)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2180      	movs	r1, #128	; 0x80
 800292e:	438a      	bics	r2, r1
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002934:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002938:	f383 8810 	msr	PRIMASK, r3
}
 800293c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2220      	movs	r2, #32
 8002942:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2278      	movs	r2, #120	; 0x78
 8002948:	2100      	movs	r1, #0
 800294a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e05f      	b.n	8002a10 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2204      	movs	r2, #4
 8002958:	4013      	ands	r3, r2
 800295a:	2b04      	cmp	r3, #4
 800295c:	d146      	bne.n	80029ec <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800295e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002960:	2280      	movs	r2, #128	; 0x80
 8002962:	03d1      	lsls	r1, r2, #15
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	4a2c      	ldr	r2, [pc, #176]	; (8002a18 <UART_CheckIdleState+0x148>)
 8002968:	9200      	str	r2, [sp, #0]
 800296a:	2200      	movs	r2, #0
 800296c:	f000 f858 	bl	8002a20 <UART_WaitOnFlagUntilTimeout>
 8002970:	1e03      	subs	r3, r0, #0
 8002972:	d03b      	beq.n	80029ec <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002974:	f3ef 8310 	mrs	r3, PRIMASK
 8002978:	60fb      	str	r3, [r7, #12]
  return(result);
 800297a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800297c:	637b      	str	r3, [r7, #52]	; 0x34
 800297e:	2301      	movs	r3, #1
 8002980:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	f383 8810 	msr	PRIMASK, r3
}
 8002988:	46c0      	nop			; (mov r8, r8)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4921      	ldr	r1, [pc, #132]	; (8002a1c <UART_CheckIdleState+0x14c>)
 8002996:	400a      	ands	r2, r1
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800299c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f383 8810 	msr	PRIMASK, r3
}
 80029a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029a6:	f3ef 8310 	mrs	r3, PRIMASK
 80029aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80029ac:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ae:	633b      	str	r3, [r7, #48]	; 0x30
 80029b0:	2301      	movs	r3, #1
 80029b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f383 8810 	msr	PRIMASK, r3
}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2101      	movs	r1, #1
 80029c8:	438a      	bics	r2, r1
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	f383 8810 	msr	PRIMASK, r3
}
 80029d6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2280      	movs	r2, #128	; 0x80
 80029dc:	2120      	movs	r1, #32
 80029de:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2278      	movs	r2, #120	; 0x78
 80029e4:	2100      	movs	r1, #0
 80029e6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e011      	b.n	8002a10 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2220      	movs	r2, #32
 80029f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2280      	movs	r2, #128	; 0x80
 80029f6:	2120      	movs	r1, #32
 80029f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2278      	movs	r2, #120	; 0x78
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	0018      	movs	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b010      	add	sp, #64	; 0x40
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	01ffffff 	.word	0x01ffffff
 8002a1c:	fffffedf 	.word	0xfffffedf

08002a20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	1dfb      	adds	r3, r7, #7
 8002a2e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a30:	e04b      	b.n	8002aca <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	3301      	adds	r3, #1
 8002a36:	d048      	beq.n	8002aca <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a38:	f7fe f864 	bl	8000b04 <HAL_GetTick>
 8002a3c:	0002      	movs	r2, r0
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d302      	bcc.n	8002a4e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e04b      	b.n	8002aea <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2204      	movs	r2, #4
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d035      	beq.n	8002aca <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	2208      	movs	r2, #8
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d111      	bne.n	8002a90 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2208      	movs	r2, #8
 8002a72:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	0018      	movs	r0, r3
 8002a78:	f000 f83c 	bl	8002af4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2284      	movs	r2, #132	; 0x84
 8002a80:	2108      	movs	r1, #8
 8002a82:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2278      	movs	r2, #120	; 0x78
 8002a88:	2100      	movs	r1, #0
 8002a8a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e02c      	b.n	8002aea <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	69da      	ldr	r2, [r3, #28]
 8002a96:	2380      	movs	r3, #128	; 0x80
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	401a      	ands	r2, r3
 8002a9c:	2380      	movs	r3, #128	; 0x80
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d112      	bne.n	8002aca <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2280      	movs	r2, #128	; 0x80
 8002aaa:	0112      	lsls	r2, r2, #4
 8002aac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f000 f81f 	bl	8002af4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2284      	movs	r2, #132	; 0x84
 8002aba:	2120      	movs	r1, #32
 8002abc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2278      	movs	r2, #120	; 0x78
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e00f      	b.n	8002aea <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	425a      	negs	r2, r3
 8002ada:	4153      	adcs	r3, r2
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	001a      	movs	r2, r3
 8002ae0:	1dfb      	adds	r3, r7, #7
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d0a4      	beq.n	8002a32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	0018      	movs	r0, r3
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b004      	add	sp, #16
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08e      	sub	sp, #56	; 0x38
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002afc:	f3ef 8310 	mrs	r3, PRIMASK
 8002b00:	617b      	str	r3, [r7, #20]
  return(result);
 8002b02:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b04:	637b      	str	r3, [r7, #52]	; 0x34
 8002b06:	2301      	movs	r3, #1
 8002b08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	f383 8810 	msr	PRIMASK, r3
}
 8002b10:	46c0      	nop			; (mov r8, r8)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4926      	ldr	r1, [pc, #152]	; (8002bb8 <UART_EndRxTransfer+0xc4>)
 8002b1e:	400a      	ands	r2, r1
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	f383 8810 	msr	PRIMASK, r3
}
 8002b2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8002b32:	623b      	str	r3, [r7, #32]
  return(result);
 8002b34:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b36:	633b      	str	r3, [r7, #48]	; 0x30
 8002b38:	2301      	movs	r3, #1
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	f383 8810 	msr	PRIMASK, r3
}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2101      	movs	r1, #1
 8002b50:	438a      	bics	r2, r1
 8002b52:	609a      	str	r2, [r3, #8]
 8002b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b56:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5a:	f383 8810 	msr	PRIMASK, r3
}
 8002b5e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d118      	bne.n	8002b9a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b68:	f3ef 8310 	mrs	r3, PRIMASK
 8002b6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b6e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b72:	2301      	movs	r3, #1
 8002b74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f383 8810 	msr	PRIMASK, r3
}
 8002b7c:	46c0      	nop			; (mov r8, r8)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2110      	movs	r1, #16
 8002b8a:	438a      	bics	r2, r1
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f383 8810 	msr	PRIMASK, r3
}
 8002b98:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2280      	movs	r2, #128	; 0x80
 8002b9e:	2120      	movs	r1, #32
 8002ba0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	b00e      	add	sp, #56	; 0x38
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	fffffedf 	.word	0xfffffedf

08002bbc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	225a      	movs	r2, #90	; 0x5a
 8002bce:	2100      	movs	r1, #0
 8002bd0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2252      	movs	r2, #82	; 0x52
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f7ff fc87 	bl	80024f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	46bd      	mov	sp, r7
 8002be6:	b004      	add	sp, #16
 8002be8:	bd80      	pop	{r7, pc}

08002bea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b086      	sub	sp, #24
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8002bf6:	60bb      	str	r3, [r7, #8]
  return(result);
 8002bf8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f383 8810 	msr	PRIMASK, r3
}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2140      	movs	r1, #64	; 0x40
 8002c14:	438a      	bics	r2, r1
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	f383 8810 	msr	PRIMASK, r3
}
 8002c22:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2220      	movs	r2, #32
 8002c28:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	0018      	movs	r0, r3
 8002c34:	f7ff fc54 	bl	80024e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c38:	46c0      	nop			; (mov r8, r8)
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b006      	add	sp, #24
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <__errno>:
 8002c40:	4b01      	ldr	r3, [pc, #4]	; (8002c48 <__errno+0x8>)
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	4770      	bx	lr
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	2000000c 	.word	0x2000000c

08002c4c <__libc_init_array>:
 8002c4c:	b570      	push	{r4, r5, r6, lr}
 8002c4e:	2600      	movs	r6, #0
 8002c50:	4d0c      	ldr	r5, [pc, #48]	; (8002c84 <__libc_init_array+0x38>)
 8002c52:	4c0d      	ldr	r4, [pc, #52]	; (8002c88 <__libc_init_array+0x3c>)
 8002c54:	1b64      	subs	r4, r4, r5
 8002c56:	10a4      	asrs	r4, r4, #2
 8002c58:	42a6      	cmp	r6, r4
 8002c5a:	d109      	bne.n	8002c70 <__libc_init_array+0x24>
 8002c5c:	2600      	movs	r6, #0
 8002c5e:	f000 fc79 	bl	8003554 <_init>
 8002c62:	4d0a      	ldr	r5, [pc, #40]	; (8002c8c <__libc_init_array+0x40>)
 8002c64:	4c0a      	ldr	r4, [pc, #40]	; (8002c90 <__libc_init_array+0x44>)
 8002c66:	1b64      	subs	r4, r4, r5
 8002c68:	10a4      	asrs	r4, r4, #2
 8002c6a:	42a6      	cmp	r6, r4
 8002c6c:	d105      	bne.n	8002c7a <__libc_init_array+0x2e>
 8002c6e:	bd70      	pop	{r4, r5, r6, pc}
 8002c70:	00b3      	lsls	r3, r6, #2
 8002c72:	58eb      	ldr	r3, [r5, r3]
 8002c74:	4798      	blx	r3
 8002c76:	3601      	adds	r6, #1
 8002c78:	e7ee      	b.n	8002c58 <__libc_init_array+0xc>
 8002c7a:	00b3      	lsls	r3, r6, #2
 8002c7c:	58eb      	ldr	r3, [r5, r3]
 8002c7e:	4798      	blx	r3
 8002c80:	3601      	adds	r6, #1
 8002c82:	e7f2      	b.n	8002c6a <__libc_init_array+0x1e>
 8002c84:	080037dc 	.word	0x080037dc
 8002c88:	080037dc 	.word	0x080037dc
 8002c8c:	080037dc 	.word	0x080037dc
 8002c90:	080037e0 	.word	0x080037e0

08002c94 <memset>:
 8002c94:	0003      	movs	r3, r0
 8002c96:	1882      	adds	r2, r0, r2
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d100      	bne.n	8002c9e <memset+0xa>
 8002c9c:	4770      	bx	lr
 8002c9e:	7019      	strb	r1, [r3, #0]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	e7f9      	b.n	8002c98 <memset+0x4>

08002ca4 <siprintf>:
 8002ca4:	b40e      	push	{r1, r2, r3}
 8002ca6:	b500      	push	{lr}
 8002ca8:	490b      	ldr	r1, [pc, #44]	; (8002cd8 <siprintf+0x34>)
 8002caa:	b09c      	sub	sp, #112	; 0x70
 8002cac:	ab1d      	add	r3, sp, #116	; 0x74
 8002cae:	9002      	str	r0, [sp, #8]
 8002cb0:	9006      	str	r0, [sp, #24]
 8002cb2:	9107      	str	r1, [sp, #28]
 8002cb4:	9104      	str	r1, [sp, #16]
 8002cb6:	4809      	ldr	r0, [pc, #36]	; (8002cdc <siprintf+0x38>)
 8002cb8:	4909      	ldr	r1, [pc, #36]	; (8002ce0 <siprintf+0x3c>)
 8002cba:	cb04      	ldmia	r3!, {r2}
 8002cbc:	9105      	str	r1, [sp, #20]
 8002cbe:	6800      	ldr	r0, [r0, #0]
 8002cc0:	a902      	add	r1, sp, #8
 8002cc2:	9301      	str	r3, [sp, #4]
 8002cc4:	f000 f8a2 	bl	8002e0c <_svfiprintf_r>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	9a02      	ldr	r2, [sp, #8]
 8002ccc:	7013      	strb	r3, [r2, #0]
 8002cce:	b01c      	add	sp, #112	; 0x70
 8002cd0:	bc08      	pop	{r3}
 8002cd2:	b003      	add	sp, #12
 8002cd4:	4718      	bx	r3
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	7fffffff 	.word	0x7fffffff
 8002cdc:	2000000c 	.word	0x2000000c
 8002ce0:	ffff0208 	.word	0xffff0208

08002ce4 <strcpy>:
 8002ce4:	0003      	movs	r3, r0
 8002ce6:	780a      	ldrb	r2, [r1, #0]
 8002ce8:	3101      	adds	r1, #1
 8002cea:	701a      	strb	r2, [r3, #0]
 8002cec:	3301      	adds	r3, #1
 8002cee:	2a00      	cmp	r2, #0
 8002cf0:	d1f9      	bne.n	8002ce6 <strcpy+0x2>
 8002cf2:	4770      	bx	lr

08002cf4 <strncpy>:
 8002cf4:	0003      	movs	r3, r0
 8002cf6:	b530      	push	{r4, r5, lr}
 8002cf8:	001d      	movs	r5, r3
 8002cfa:	2a00      	cmp	r2, #0
 8002cfc:	d006      	beq.n	8002d0c <strncpy+0x18>
 8002cfe:	780c      	ldrb	r4, [r1, #0]
 8002d00:	3a01      	subs	r2, #1
 8002d02:	3301      	adds	r3, #1
 8002d04:	702c      	strb	r4, [r5, #0]
 8002d06:	3101      	adds	r1, #1
 8002d08:	2c00      	cmp	r4, #0
 8002d0a:	d1f5      	bne.n	8002cf8 <strncpy+0x4>
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	189a      	adds	r2, r3, r2
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d100      	bne.n	8002d16 <strncpy+0x22>
 8002d14:	bd30      	pop	{r4, r5, pc}
 8002d16:	7019      	strb	r1, [r3, #0]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	e7f9      	b.n	8002d10 <strncpy+0x1c>

08002d1c <strstr>:
 8002d1c:	780a      	ldrb	r2, [r1, #0]
 8002d1e:	b530      	push	{r4, r5, lr}
 8002d20:	2a00      	cmp	r2, #0
 8002d22:	d10c      	bne.n	8002d3e <strstr+0x22>
 8002d24:	bd30      	pop	{r4, r5, pc}
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d108      	bne.n	8002d3c <strstr+0x20>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	5ccc      	ldrb	r4, [r1, r3]
 8002d2e:	2c00      	cmp	r4, #0
 8002d30:	d0f8      	beq.n	8002d24 <strstr+0x8>
 8002d32:	5cc5      	ldrb	r5, [r0, r3]
 8002d34:	42a5      	cmp	r5, r4
 8002d36:	d101      	bne.n	8002d3c <strstr+0x20>
 8002d38:	3301      	adds	r3, #1
 8002d3a:	e7f7      	b.n	8002d2c <strstr+0x10>
 8002d3c:	3001      	adds	r0, #1
 8002d3e:	7803      	ldrb	r3, [r0, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1f0      	bne.n	8002d26 <strstr+0xa>
 8002d44:	0018      	movs	r0, r3
 8002d46:	e7ed      	b.n	8002d24 <strstr+0x8>

08002d48 <__ssputs_r>:
 8002d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d4a:	688e      	ldr	r6, [r1, #8]
 8002d4c:	b085      	sub	sp, #20
 8002d4e:	0007      	movs	r7, r0
 8002d50:	000c      	movs	r4, r1
 8002d52:	9203      	str	r2, [sp, #12]
 8002d54:	9301      	str	r3, [sp, #4]
 8002d56:	429e      	cmp	r6, r3
 8002d58:	d83c      	bhi.n	8002dd4 <__ssputs_r+0x8c>
 8002d5a:	2390      	movs	r3, #144	; 0x90
 8002d5c:	898a      	ldrh	r2, [r1, #12]
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	421a      	tst	r2, r3
 8002d62:	d034      	beq.n	8002dce <__ssputs_r+0x86>
 8002d64:	2503      	movs	r5, #3
 8002d66:	6909      	ldr	r1, [r1, #16]
 8002d68:	6823      	ldr	r3, [r4, #0]
 8002d6a:	1a5b      	subs	r3, r3, r1
 8002d6c:	9302      	str	r3, [sp, #8]
 8002d6e:	6963      	ldr	r3, [r4, #20]
 8002d70:	9802      	ldr	r0, [sp, #8]
 8002d72:	435d      	muls	r5, r3
 8002d74:	0feb      	lsrs	r3, r5, #31
 8002d76:	195d      	adds	r5, r3, r5
 8002d78:	9b01      	ldr	r3, [sp, #4]
 8002d7a:	106d      	asrs	r5, r5, #1
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	181b      	adds	r3, r3, r0
 8002d80:	42ab      	cmp	r3, r5
 8002d82:	d900      	bls.n	8002d86 <__ssputs_r+0x3e>
 8002d84:	001d      	movs	r5, r3
 8002d86:	0553      	lsls	r3, r2, #21
 8002d88:	d532      	bpl.n	8002df0 <__ssputs_r+0xa8>
 8002d8a:	0029      	movs	r1, r5
 8002d8c:	0038      	movs	r0, r7
 8002d8e:	f000 fb31 	bl	80033f4 <_malloc_r>
 8002d92:	1e06      	subs	r6, r0, #0
 8002d94:	d109      	bne.n	8002daa <__ssputs_r+0x62>
 8002d96:	230c      	movs	r3, #12
 8002d98:	603b      	str	r3, [r7, #0]
 8002d9a:	2340      	movs	r3, #64	; 0x40
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	89a2      	ldrh	r2, [r4, #12]
 8002da0:	4240      	negs	r0, r0
 8002da2:	4313      	orrs	r3, r2
 8002da4:	81a3      	strh	r3, [r4, #12]
 8002da6:	b005      	add	sp, #20
 8002da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002daa:	9a02      	ldr	r2, [sp, #8]
 8002dac:	6921      	ldr	r1, [r4, #16]
 8002dae:	f000 faba 	bl	8003326 <memcpy>
 8002db2:	89a3      	ldrh	r3, [r4, #12]
 8002db4:	4a14      	ldr	r2, [pc, #80]	; (8002e08 <__ssputs_r+0xc0>)
 8002db6:	401a      	ands	r2, r3
 8002db8:	2380      	movs	r3, #128	; 0x80
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	81a3      	strh	r3, [r4, #12]
 8002dbe:	9b02      	ldr	r3, [sp, #8]
 8002dc0:	6126      	str	r6, [r4, #16]
 8002dc2:	18f6      	adds	r6, r6, r3
 8002dc4:	6026      	str	r6, [r4, #0]
 8002dc6:	6165      	str	r5, [r4, #20]
 8002dc8:	9e01      	ldr	r6, [sp, #4]
 8002dca:	1aed      	subs	r5, r5, r3
 8002dcc:	60a5      	str	r5, [r4, #8]
 8002dce:	9b01      	ldr	r3, [sp, #4]
 8002dd0:	429e      	cmp	r6, r3
 8002dd2:	d900      	bls.n	8002dd6 <__ssputs_r+0x8e>
 8002dd4:	9e01      	ldr	r6, [sp, #4]
 8002dd6:	0032      	movs	r2, r6
 8002dd8:	9903      	ldr	r1, [sp, #12]
 8002dda:	6820      	ldr	r0, [r4, #0]
 8002ddc:	f000 faac 	bl	8003338 <memmove>
 8002de0:	68a3      	ldr	r3, [r4, #8]
 8002de2:	2000      	movs	r0, #0
 8002de4:	1b9b      	subs	r3, r3, r6
 8002de6:	60a3      	str	r3, [r4, #8]
 8002de8:	6823      	ldr	r3, [r4, #0]
 8002dea:	199e      	adds	r6, r3, r6
 8002dec:	6026      	str	r6, [r4, #0]
 8002dee:	e7da      	b.n	8002da6 <__ssputs_r+0x5e>
 8002df0:	002a      	movs	r2, r5
 8002df2:	0038      	movs	r0, r7
 8002df4:	f000 fb5c 	bl	80034b0 <_realloc_r>
 8002df8:	1e06      	subs	r6, r0, #0
 8002dfa:	d1e0      	bne.n	8002dbe <__ssputs_r+0x76>
 8002dfc:	0038      	movs	r0, r7
 8002dfe:	6921      	ldr	r1, [r4, #16]
 8002e00:	f000 faae 	bl	8003360 <_free_r>
 8002e04:	e7c7      	b.n	8002d96 <__ssputs_r+0x4e>
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	fffffb7f 	.word	0xfffffb7f

08002e0c <_svfiprintf_r>:
 8002e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e0e:	b0a1      	sub	sp, #132	; 0x84
 8002e10:	9003      	str	r0, [sp, #12]
 8002e12:	001d      	movs	r5, r3
 8002e14:	898b      	ldrh	r3, [r1, #12]
 8002e16:	000f      	movs	r7, r1
 8002e18:	0016      	movs	r6, r2
 8002e1a:	061b      	lsls	r3, r3, #24
 8002e1c:	d511      	bpl.n	8002e42 <_svfiprintf_r+0x36>
 8002e1e:	690b      	ldr	r3, [r1, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10e      	bne.n	8002e42 <_svfiprintf_r+0x36>
 8002e24:	2140      	movs	r1, #64	; 0x40
 8002e26:	f000 fae5 	bl	80033f4 <_malloc_r>
 8002e2a:	6038      	str	r0, [r7, #0]
 8002e2c:	6138      	str	r0, [r7, #16]
 8002e2e:	2800      	cmp	r0, #0
 8002e30:	d105      	bne.n	8002e3e <_svfiprintf_r+0x32>
 8002e32:	230c      	movs	r3, #12
 8002e34:	9a03      	ldr	r2, [sp, #12]
 8002e36:	3801      	subs	r0, #1
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	b021      	add	sp, #132	; 0x84
 8002e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e3e:	2340      	movs	r3, #64	; 0x40
 8002e40:	617b      	str	r3, [r7, #20]
 8002e42:	2300      	movs	r3, #0
 8002e44:	ac08      	add	r4, sp, #32
 8002e46:	6163      	str	r3, [r4, #20]
 8002e48:	3320      	adds	r3, #32
 8002e4a:	7663      	strb	r3, [r4, #25]
 8002e4c:	3310      	adds	r3, #16
 8002e4e:	76a3      	strb	r3, [r4, #26]
 8002e50:	9507      	str	r5, [sp, #28]
 8002e52:	0035      	movs	r5, r6
 8002e54:	782b      	ldrb	r3, [r5, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <_svfiprintf_r+0x52>
 8002e5a:	2b25      	cmp	r3, #37	; 0x25
 8002e5c:	d147      	bne.n	8002eee <_svfiprintf_r+0xe2>
 8002e5e:	1bab      	subs	r3, r5, r6
 8002e60:	9305      	str	r3, [sp, #20]
 8002e62:	42b5      	cmp	r5, r6
 8002e64:	d00c      	beq.n	8002e80 <_svfiprintf_r+0x74>
 8002e66:	0032      	movs	r2, r6
 8002e68:	0039      	movs	r1, r7
 8002e6a:	9803      	ldr	r0, [sp, #12]
 8002e6c:	f7ff ff6c 	bl	8002d48 <__ssputs_r>
 8002e70:	1c43      	adds	r3, r0, #1
 8002e72:	d100      	bne.n	8002e76 <_svfiprintf_r+0x6a>
 8002e74:	e0ae      	b.n	8002fd4 <_svfiprintf_r+0x1c8>
 8002e76:	6962      	ldr	r2, [r4, #20]
 8002e78:	9b05      	ldr	r3, [sp, #20]
 8002e7a:	4694      	mov	ip, r2
 8002e7c:	4463      	add	r3, ip
 8002e7e:	6163      	str	r3, [r4, #20]
 8002e80:	782b      	ldrb	r3, [r5, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d100      	bne.n	8002e88 <_svfiprintf_r+0x7c>
 8002e86:	e0a5      	b.n	8002fd4 <_svfiprintf_r+0x1c8>
 8002e88:	2201      	movs	r2, #1
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	4252      	negs	r2, r2
 8002e8e:	6062      	str	r2, [r4, #4]
 8002e90:	a904      	add	r1, sp, #16
 8002e92:	3254      	adds	r2, #84	; 0x54
 8002e94:	1852      	adds	r2, r2, r1
 8002e96:	1c6e      	adds	r6, r5, #1
 8002e98:	6023      	str	r3, [r4, #0]
 8002e9a:	60e3      	str	r3, [r4, #12]
 8002e9c:	60a3      	str	r3, [r4, #8]
 8002e9e:	7013      	strb	r3, [r2, #0]
 8002ea0:	65a3      	str	r3, [r4, #88]	; 0x58
 8002ea2:	2205      	movs	r2, #5
 8002ea4:	7831      	ldrb	r1, [r6, #0]
 8002ea6:	4854      	ldr	r0, [pc, #336]	; (8002ff8 <_svfiprintf_r+0x1ec>)
 8002ea8:	f000 fa32 	bl	8003310 <memchr>
 8002eac:	1c75      	adds	r5, r6, #1
 8002eae:	2800      	cmp	r0, #0
 8002eb0:	d11f      	bne.n	8002ef2 <_svfiprintf_r+0xe6>
 8002eb2:	6822      	ldr	r2, [r4, #0]
 8002eb4:	06d3      	lsls	r3, r2, #27
 8002eb6:	d504      	bpl.n	8002ec2 <_svfiprintf_r+0xb6>
 8002eb8:	2353      	movs	r3, #83	; 0x53
 8002eba:	a904      	add	r1, sp, #16
 8002ebc:	185b      	adds	r3, r3, r1
 8002ebe:	2120      	movs	r1, #32
 8002ec0:	7019      	strb	r1, [r3, #0]
 8002ec2:	0713      	lsls	r3, r2, #28
 8002ec4:	d504      	bpl.n	8002ed0 <_svfiprintf_r+0xc4>
 8002ec6:	2353      	movs	r3, #83	; 0x53
 8002ec8:	a904      	add	r1, sp, #16
 8002eca:	185b      	adds	r3, r3, r1
 8002ecc:	212b      	movs	r1, #43	; 0x2b
 8002ece:	7019      	strb	r1, [r3, #0]
 8002ed0:	7833      	ldrb	r3, [r6, #0]
 8002ed2:	2b2a      	cmp	r3, #42	; 0x2a
 8002ed4:	d016      	beq.n	8002f04 <_svfiprintf_r+0xf8>
 8002ed6:	0035      	movs	r5, r6
 8002ed8:	2100      	movs	r1, #0
 8002eda:	200a      	movs	r0, #10
 8002edc:	68e3      	ldr	r3, [r4, #12]
 8002ede:	782a      	ldrb	r2, [r5, #0]
 8002ee0:	1c6e      	adds	r6, r5, #1
 8002ee2:	3a30      	subs	r2, #48	; 0x30
 8002ee4:	2a09      	cmp	r2, #9
 8002ee6:	d94e      	bls.n	8002f86 <_svfiprintf_r+0x17a>
 8002ee8:	2900      	cmp	r1, #0
 8002eea:	d111      	bne.n	8002f10 <_svfiprintf_r+0x104>
 8002eec:	e017      	b.n	8002f1e <_svfiprintf_r+0x112>
 8002eee:	3501      	adds	r5, #1
 8002ef0:	e7b0      	b.n	8002e54 <_svfiprintf_r+0x48>
 8002ef2:	4b41      	ldr	r3, [pc, #260]	; (8002ff8 <_svfiprintf_r+0x1ec>)
 8002ef4:	6822      	ldr	r2, [r4, #0]
 8002ef6:	1ac0      	subs	r0, r0, r3
 8002ef8:	2301      	movs	r3, #1
 8002efa:	4083      	lsls	r3, r0
 8002efc:	4313      	orrs	r3, r2
 8002efe:	002e      	movs	r6, r5
 8002f00:	6023      	str	r3, [r4, #0]
 8002f02:	e7ce      	b.n	8002ea2 <_svfiprintf_r+0x96>
 8002f04:	9b07      	ldr	r3, [sp, #28]
 8002f06:	1d19      	adds	r1, r3, #4
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	9107      	str	r1, [sp, #28]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	db01      	blt.n	8002f14 <_svfiprintf_r+0x108>
 8002f10:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f12:	e004      	b.n	8002f1e <_svfiprintf_r+0x112>
 8002f14:	425b      	negs	r3, r3
 8002f16:	60e3      	str	r3, [r4, #12]
 8002f18:	2302      	movs	r3, #2
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	6023      	str	r3, [r4, #0]
 8002f1e:	782b      	ldrb	r3, [r5, #0]
 8002f20:	2b2e      	cmp	r3, #46	; 0x2e
 8002f22:	d10a      	bne.n	8002f3a <_svfiprintf_r+0x12e>
 8002f24:	786b      	ldrb	r3, [r5, #1]
 8002f26:	2b2a      	cmp	r3, #42	; 0x2a
 8002f28:	d135      	bne.n	8002f96 <_svfiprintf_r+0x18a>
 8002f2a:	9b07      	ldr	r3, [sp, #28]
 8002f2c:	3502      	adds	r5, #2
 8002f2e:	1d1a      	adds	r2, r3, #4
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	9207      	str	r2, [sp, #28]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	db2b      	blt.n	8002f90 <_svfiprintf_r+0x184>
 8002f38:	9309      	str	r3, [sp, #36]	; 0x24
 8002f3a:	4e30      	ldr	r6, [pc, #192]	; (8002ffc <_svfiprintf_r+0x1f0>)
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	0030      	movs	r0, r6
 8002f40:	7829      	ldrb	r1, [r5, #0]
 8002f42:	f000 f9e5 	bl	8003310 <memchr>
 8002f46:	2800      	cmp	r0, #0
 8002f48:	d006      	beq.n	8002f58 <_svfiprintf_r+0x14c>
 8002f4a:	2340      	movs	r3, #64	; 0x40
 8002f4c:	1b80      	subs	r0, r0, r6
 8002f4e:	4083      	lsls	r3, r0
 8002f50:	6822      	ldr	r2, [r4, #0]
 8002f52:	3501      	adds	r5, #1
 8002f54:	4313      	orrs	r3, r2
 8002f56:	6023      	str	r3, [r4, #0]
 8002f58:	7829      	ldrb	r1, [r5, #0]
 8002f5a:	2206      	movs	r2, #6
 8002f5c:	4828      	ldr	r0, [pc, #160]	; (8003000 <_svfiprintf_r+0x1f4>)
 8002f5e:	1c6e      	adds	r6, r5, #1
 8002f60:	7621      	strb	r1, [r4, #24]
 8002f62:	f000 f9d5 	bl	8003310 <memchr>
 8002f66:	2800      	cmp	r0, #0
 8002f68:	d03c      	beq.n	8002fe4 <_svfiprintf_r+0x1d8>
 8002f6a:	4b26      	ldr	r3, [pc, #152]	; (8003004 <_svfiprintf_r+0x1f8>)
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d125      	bne.n	8002fbc <_svfiprintf_r+0x1b0>
 8002f70:	2207      	movs	r2, #7
 8002f72:	9b07      	ldr	r3, [sp, #28]
 8002f74:	3307      	adds	r3, #7
 8002f76:	4393      	bics	r3, r2
 8002f78:	3308      	adds	r3, #8
 8002f7a:	9307      	str	r3, [sp, #28]
 8002f7c:	6963      	ldr	r3, [r4, #20]
 8002f7e:	9a04      	ldr	r2, [sp, #16]
 8002f80:	189b      	adds	r3, r3, r2
 8002f82:	6163      	str	r3, [r4, #20]
 8002f84:	e765      	b.n	8002e52 <_svfiprintf_r+0x46>
 8002f86:	4343      	muls	r3, r0
 8002f88:	0035      	movs	r5, r6
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	189b      	adds	r3, r3, r2
 8002f8e:	e7a6      	b.n	8002ede <_svfiprintf_r+0xd2>
 8002f90:	2301      	movs	r3, #1
 8002f92:	425b      	negs	r3, r3
 8002f94:	e7d0      	b.n	8002f38 <_svfiprintf_r+0x12c>
 8002f96:	2300      	movs	r3, #0
 8002f98:	200a      	movs	r0, #10
 8002f9a:	001a      	movs	r2, r3
 8002f9c:	3501      	adds	r5, #1
 8002f9e:	6063      	str	r3, [r4, #4]
 8002fa0:	7829      	ldrb	r1, [r5, #0]
 8002fa2:	1c6e      	adds	r6, r5, #1
 8002fa4:	3930      	subs	r1, #48	; 0x30
 8002fa6:	2909      	cmp	r1, #9
 8002fa8:	d903      	bls.n	8002fb2 <_svfiprintf_r+0x1a6>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0c5      	beq.n	8002f3a <_svfiprintf_r+0x12e>
 8002fae:	9209      	str	r2, [sp, #36]	; 0x24
 8002fb0:	e7c3      	b.n	8002f3a <_svfiprintf_r+0x12e>
 8002fb2:	4342      	muls	r2, r0
 8002fb4:	0035      	movs	r5, r6
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	1852      	adds	r2, r2, r1
 8002fba:	e7f1      	b.n	8002fa0 <_svfiprintf_r+0x194>
 8002fbc:	ab07      	add	r3, sp, #28
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	003a      	movs	r2, r7
 8002fc2:	0021      	movs	r1, r4
 8002fc4:	4b10      	ldr	r3, [pc, #64]	; (8003008 <_svfiprintf_r+0x1fc>)
 8002fc6:	9803      	ldr	r0, [sp, #12]
 8002fc8:	e000      	b.n	8002fcc <_svfiprintf_r+0x1c0>
 8002fca:	bf00      	nop
 8002fcc:	9004      	str	r0, [sp, #16]
 8002fce:	9b04      	ldr	r3, [sp, #16]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	d1d3      	bne.n	8002f7c <_svfiprintf_r+0x170>
 8002fd4:	89bb      	ldrh	r3, [r7, #12]
 8002fd6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002fd8:	065b      	lsls	r3, r3, #25
 8002fda:	d400      	bmi.n	8002fde <_svfiprintf_r+0x1d2>
 8002fdc:	e72d      	b.n	8002e3a <_svfiprintf_r+0x2e>
 8002fde:	2001      	movs	r0, #1
 8002fe0:	4240      	negs	r0, r0
 8002fe2:	e72a      	b.n	8002e3a <_svfiprintf_r+0x2e>
 8002fe4:	ab07      	add	r3, sp, #28
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	003a      	movs	r2, r7
 8002fea:	0021      	movs	r1, r4
 8002fec:	4b06      	ldr	r3, [pc, #24]	; (8003008 <_svfiprintf_r+0x1fc>)
 8002fee:	9803      	ldr	r0, [sp, #12]
 8002ff0:	f000 f87c 	bl	80030ec <_printf_i>
 8002ff4:	e7ea      	b.n	8002fcc <_svfiprintf_r+0x1c0>
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	080037a8 	.word	0x080037a8
 8002ffc:	080037ae 	.word	0x080037ae
 8003000:	080037b2 	.word	0x080037b2
 8003004:	00000000 	.word	0x00000000
 8003008:	08002d49 	.word	0x08002d49

0800300c <_printf_common>:
 800300c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800300e:	0015      	movs	r5, r2
 8003010:	9301      	str	r3, [sp, #4]
 8003012:	688a      	ldr	r2, [r1, #8]
 8003014:	690b      	ldr	r3, [r1, #16]
 8003016:	000c      	movs	r4, r1
 8003018:	9000      	str	r0, [sp, #0]
 800301a:	4293      	cmp	r3, r2
 800301c:	da00      	bge.n	8003020 <_printf_common+0x14>
 800301e:	0013      	movs	r3, r2
 8003020:	0022      	movs	r2, r4
 8003022:	602b      	str	r3, [r5, #0]
 8003024:	3243      	adds	r2, #67	; 0x43
 8003026:	7812      	ldrb	r2, [r2, #0]
 8003028:	2a00      	cmp	r2, #0
 800302a:	d001      	beq.n	8003030 <_printf_common+0x24>
 800302c:	3301      	adds	r3, #1
 800302e:	602b      	str	r3, [r5, #0]
 8003030:	6823      	ldr	r3, [r4, #0]
 8003032:	069b      	lsls	r3, r3, #26
 8003034:	d502      	bpl.n	800303c <_printf_common+0x30>
 8003036:	682b      	ldr	r3, [r5, #0]
 8003038:	3302      	adds	r3, #2
 800303a:	602b      	str	r3, [r5, #0]
 800303c:	6822      	ldr	r2, [r4, #0]
 800303e:	2306      	movs	r3, #6
 8003040:	0017      	movs	r7, r2
 8003042:	401f      	ands	r7, r3
 8003044:	421a      	tst	r2, r3
 8003046:	d027      	beq.n	8003098 <_printf_common+0x8c>
 8003048:	0023      	movs	r3, r4
 800304a:	3343      	adds	r3, #67	; 0x43
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	1e5a      	subs	r2, r3, #1
 8003050:	4193      	sbcs	r3, r2
 8003052:	6822      	ldr	r2, [r4, #0]
 8003054:	0692      	lsls	r2, r2, #26
 8003056:	d430      	bmi.n	80030ba <_printf_common+0xae>
 8003058:	0022      	movs	r2, r4
 800305a:	9901      	ldr	r1, [sp, #4]
 800305c:	9800      	ldr	r0, [sp, #0]
 800305e:	9e08      	ldr	r6, [sp, #32]
 8003060:	3243      	adds	r2, #67	; 0x43
 8003062:	47b0      	blx	r6
 8003064:	1c43      	adds	r3, r0, #1
 8003066:	d025      	beq.n	80030b4 <_printf_common+0xa8>
 8003068:	2306      	movs	r3, #6
 800306a:	6820      	ldr	r0, [r4, #0]
 800306c:	682a      	ldr	r2, [r5, #0]
 800306e:	68e1      	ldr	r1, [r4, #12]
 8003070:	2500      	movs	r5, #0
 8003072:	4003      	ands	r3, r0
 8003074:	2b04      	cmp	r3, #4
 8003076:	d103      	bne.n	8003080 <_printf_common+0x74>
 8003078:	1a8d      	subs	r5, r1, r2
 800307a:	43eb      	mvns	r3, r5
 800307c:	17db      	asrs	r3, r3, #31
 800307e:	401d      	ands	r5, r3
 8003080:	68a3      	ldr	r3, [r4, #8]
 8003082:	6922      	ldr	r2, [r4, #16]
 8003084:	4293      	cmp	r3, r2
 8003086:	dd01      	ble.n	800308c <_printf_common+0x80>
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	18ed      	adds	r5, r5, r3
 800308c:	2700      	movs	r7, #0
 800308e:	42bd      	cmp	r5, r7
 8003090:	d120      	bne.n	80030d4 <_printf_common+0xc8>
 8003092:	2000      	movs	r0, #0
 8003094:	e010      	b.n	80030b8 <_printf_common+0xac>
 8003096:	3701      	adds	r7, #1
 8003098:	68e3      	ldr	r3, [r4, #12]
 800309a:	682a      	ldr	r2, [r5, #0]
 800309c:	1a9b      	subs	r3, r3, r2
 800309e:	42bb      	cmp	r3, r7
 80030a0:	ddd2      	ble.n	8003048 <_printf_common+0x3c>
 80030a2:	0022      	movs	r2, r4
 80030a4:	2301      	movs	r3, #1
 80030a6:	9901      	ldr	r1, [sp, #4]
 80030a8:	9800      	ldr	r0, [sp, #0]
 80030aa:	9e08      	ldr	r6, [sp, #32]
 80030ac:	3219      	adds	r2, #25
 80030ae:	47b0      	blx	r6
 80030b0:	1c43      	adds	r3, r0, #1
 80030b2:	d1f0      	bne.n	8003096 <_printf_common+0x8a>
 80030b4:	2001      	movs	r0, #1
 80030b6:	4240      	negs	r0, r0
 80030b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80030ba:	2030      	movs	r0, #48	; 0x30
 80030bc:	18e1      	adds	r1, r4, r3
 80030be:	3143      	adds	r1, #67	; 0x43
 80030c0:	7008      	strb	r0, [r1, #0]
 80030c2:	0021      	movs	r1, r4
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	3145      	adds	r1, #69	; 0x45
 80030c8:	7809      	ldrb	r1, [r1, #0]
 80030ca:	18a2      	adds	r2, r4, r2
 80030cc:	3243      	adds	r2, #67	; 0x43
 80030ce:	3302      	adds	r3, #2
 80030d0:	7011      	strb	r1, [r2, #0]
 80030d2:	e7c1      	b.n	8003058 <_printf_common+0x4c>
 80030d4:	0022      	movs	r2, r4
 80030d6:	2301      	movs	r3, #1
 80030d8:	9901      	ldr	r1, [sp, #4]
 80030da:	9800      	ldr	r0, [sp, #0]
 80030dc:	9e08      	ldr	r6, [sp, #32]
 80030de:	321a      	adds	r2, #26
 80030e0:	47b0      	blx	r6
 80030e2:	1c43      	adds	r3, r0, #1
 80030e4:	d0e6      	beq.n	80030b4 <_printf_common+0xa8>
 80030e6:	3701      	adds	r7, #1
 80030e8:	e7d1      	b.n	800308e <_printf_common+0x82>
	...

080030ec <_printf_i>:
 80030ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ee:	b08b      	sub	sp, #44	; 0x2c
 80030f0:	9206      	str	r2, [sp, #24]
 80030f2:	000a      	movs	r2, r1
 80030f4:	3243      	adds	r2, #67	; 0x43
 80030f6:	9307      	str	r3, [sp, #28]
 80030f8:	9005      	str	r0, [sp, #20]
 80030fa:	9204      	str	r2, [sp, #16]
 80030fc:	7e0a      	ldrb	r2, [r1, #24]
 80030fe:	000c      	movs	r4, r1
 8003100:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003102:	2a78      	cmp	r2, #120	; 0x78
 8003104:	d806      	bhi.n	8003114 <_printf_i+0x28>
 8003106:	2a62      	cmp	r2, #98	; 0x62
 8003108:	d808      	bhi.n	800311c <_printf_i+0x30>
 800310a:	2a00      	cmp	r2, #0
 800310c:	d100      	bne.n	8003110 <_printf_i+0x24>
 800310e:	e0c0      	b.n	8003292 <_printf_i+0x1a6>
 8003110:	2a58      	cmp	r2, #88	; 0x58
 8003112:	d052      	beq.n	80031ba <_printf_i+0xce>
 8003114:	0026      	movs	r6, r4
 8003116:	3642      	adds	r6, #66	; 0x42
 8003118:	7032      	strb	r2, [r6, #0]
 800311a:	e022      	b.n	8003162 <_printf_i+0x76>
 800311c:	0010      	movs	r0, r2
 800311e:	3863      	subs	r0, #99	; 0x63
 8003120:	2815      	cmp	r0, #21
 8003122:	d8f7      	bhi.n	8003114 <_printf_i+0x28>
 8003124:	f7fc fff8 	bl	8000118 <__gnu_thumb1_case_shi>
 8003128:	001f0016 	.word	0x001f0016
 800312c:	fff6fff6 	.word	0xfff6fff6
 8003130:	fff6fff6 	.word	0xfff6fff6
 8003134:	fff6001f 	.word	0xfff6001f
 8003138:	fff6fff6 	.word	0xfff6fff6
 800313c:	00a8fff6 	.word	0x00a8fff6
 8003140:	009a0036 	.word	0x009a0036
 8003144:	fff6fff6 	.word	0xfff6fff6
 8003148:	fff600b9 	.word	0xfff600b9
 800314c:	fff60036 	.word	0xfff60036
 8003150:	009efff6 	.word	0x009efff6
 8003154:	0026      	movs	r6, r4
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	3642      	adds	r6, #66	; 0x42
 800315a:	1d11      	adds	r1, r2, #4
 800315c:	6019      	str	r1, [r3, #0]
 800315e:	6813      	ldr	r3, [r2, #0]
 8003160:	7033      	strb	r3, [r6, #0]
 8003162:	2301      	movs	r3, #1
 8003164:	e0a7      	b.n	80032b6 <_printf_i+0x1ca>
 8003166:	6808      	ldr	r0, [r1, #0]
 8003168:	6819      	ldr	r1, [r3, #0]
 800316a:	1d0a      	adds	r2, r1, #4
 800316c:	0605      	lsls	r5, r0, #24
 800316e:	d50b      	bpl.n	8003188 <_printf_i+0x9c>
 8003170:	680d      	ldr	r5, [r1, #0]
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	2d00      	cmp	r5, #0
 8003176:	da03      	bge.n	8003180 <_printf_i+0x94>
 8003178:	232d      	movs	r3, #45	; 0x2d
 800317a:	9a04      	ldr	r2, [sp, #16]
 800317c:	426d      	negs	r5, r5
 800317e:	7013      	strb	r3, [r2, #0]
 8003180:	4b61      	ldr	r3, [pc, #388]	; (8003308 <_printf_i+0x21c>)
 8003182:	270a      	movs	r7, #10
 8003184:	9303      	str	r3, [sp, #12]
 8003186:	e032      	b.n	80031ee <_printf_i+0x102>
 8003188:	680d      	ldr	r5, [r1, #0]
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	0641      	lsls	r1, r0, #25
 800318e:	d5f1      	bpl.n	8003174 <_printf_i+0x88>
 8003190:	b22d      	sxth	r5, r5
 8003192:	e7ef      	b.n	8003174 <_printf_i+0x88>
 8003194:	680d      	ldr	r5, [r1, #0]
 8003196:	6819      	ldr	r1, [r3, #0]
 8003198:	1d08      	adds	r0, r1, #4
 800319a:	6018      	str	r0, [r3, #0]
 800319c:	062e      	lsls	r6, r5, #24
 800319e:	d501      	bpl.n	80031a4 <_printf_i+0xb8>
 80031a0:	680d      	ldr	r5, [r1, #0]
 80031a2:	e003      	b.n	80031ac <_printf_i+0xc0>
 80031a4:	066d      	lsls	r5, r5, #25
 80031a6:	d5fb      	bpl.n	80031a0 <_printf_i+0xb4>
 80031a8:	680d      	ldr	r5, [r1, #0]
 80031aa:	b2ad      	uxth	r5, r5
 80031ac:	4b56      	ldr	r3, [pc, #344]	; (8003308 <_printf_i+0x21c>)
 80031ae:	270a      	movs	r7, #10
 80031b0:	9303      	str	r3, [sp, #12]
 80031b2:	2a6f      	cmp	r2, #111	; 0x6f
 80031b4:	d117      	bne.n	80031e6 <_printf_i+0xfa>
 80031b6:	2708      	movs	r7, #8
 80031b8:	e015      	b.n	80031e6 <_printf_i+0xfa>
 80031ba:	3145      	adds	r1, #69	; 0x45
 80031bc:	700a      	strb	r2, [r1, #0]
 80031be:	4a52      	ldr	r2, [pc, #328]	; (8003308 <_printf_i+0x21c>)
 80031c0:	9203      	str	r2, [sp, #12]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	6821      	ldr	r1, [r4, #0]
 80031c6:	ca20      	ldmia	r2!, {r5}
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	0608      	lsls	r0, r1, #24
 80031cc:	d550      	bpl.n	8003270 <_printf_i+0x184>
 80031ce:	07cb      	lsls	r3, r1, #31
 80031d0:	d502      	bpl.n	80031d8 <_printf_i+0xec>
 80031d2:	2320      	movs	r3, #32
 80031d4:	4319      	orrs	r1, r3
 80031d6:	6021      	str	r1, [r4, #0]
 80031d8:	2710      	movs	r7, #16
 80031da:	2d00      	cmp	r5, #0
 80031dc:	d103      	bne.n	80031e6 <_printf_i+0xfa>
 80031de:	2320      	movs	r3, #32
 80031e0:	6822      	ldr	r2, [r4, #0]
 80031e2:	439a      	bics	r2, r3
 80031e4:	6022      	str	r2, [r4, #0]
 80031e6:	0023      	movs	r3, r4
 80031e8:	2200      	movs	r2, #0
 80031ea:	3343      	adds	r3, #67	; 0x43
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	6863      	ldr	r3, [r4, #4]
 80031f0:	60a3      	str	r3, [r4, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	db03      	blt.n	80031fe <_printf_i+0x112>
 80031f6:	2204      	movs	r2, #4
 80031f8:	6821      	ldr	r1, [r4, #0]
 80031fa:	4391      	bics	r1, r2
 80031fc:	6021      	str	r1, [r4, #0]
 80031fe:	2d00      	cmp	r5, #0
 8003200:	d102      	bne.n	8003208 <_printf_i+0x11c>
 8003202:	9e04      	ldr	r6, [sp, #16]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00c      	beq.n	8003222 <_printf_i+0x136>
 8003208:	9e04      	ldr	r6, [sp, #16]
 800320a:	0028      	movs	r0, r5
 800320c:	0039      	movs	r1, r7
 800320e:	f7fd f813 	bl	8000238 <__aeabi_uidivmod>
 8003212:	9b03      	ldr	r3, [sp, #12]
 8003214:	3e01      	subs	r6, #1
 8003216:	5c5b      	ldrb	r3, [r3, r1]
 8003218:	7033      	strb	r3, [r6, #0]
 800321a:	002b      	movs	r3, r5
 800321c:	0005      	movs	r5, r0
 800321e:	429f      	cmp	r7, r3
 8003220:	d9f3      	bls.n	800320a <_printf_i+0x11e>
 8003222:	2f08      	cmp	r7, #8
 8003224:	d109      	bne.n	800323a <_printf_i+0x14e>
 8003226:	6823      	ldr	r3, [r4, #0]
 8003228:	07db      	lsls	r3, r3, #31
 800322a:	d506      	bpl.n	800323a <_printf_i+0x14e>
 800322c:	6863      	ldr	r3, [r4, #4]
 800322e:	6922      	ldr	r2, [r4, #16]
 8003230:	4293      	cmp	r3, r2
 8003232:	dc02      	bgt.n	800323a <_printf_i+0x14e>
 8003234:	2330      	movs	r3, #48	; 0x30
 8003236:	3e01      	subs	r6, #1
 8003238:	7033      	strb	r3, [r6, #0]
 800323a:	9b04      	ldr	r3, [sp, #16]
 800323c:	1b9b      	subs	r3, r3, r6
 800323e:	6123      	str	r3, [r4, #16]
 8003240:	9b07      	ldr	r3, [sp, #28]
 8003242:	0021      	movs	r1, r4
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	9805      	ldr	r0, [sp, #20]
 8003248:	9b06      	ldr	r3, [sp, #24]
 800324a:	aa09      	add	r2, sp, #36	; 0x24
 800324c:	f7ff fede 	bl	800300c <_printf_common>
 8003250:	1c43      	adds	r3, r0, #1
 8003252:	d135      	bne.n	80032c0 <_printf_i+0x1d4>
 8003254:	2001      	movs	r0, #1
 8003256:	4240      	negs	r0, r0
 8003258:	b00b      	add	sp, #44	; 0x2c
 800325a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800325c:	2220      	movs	r2, #32
 800325e:	6809      	ldr	r1, [r1, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	6022      	str	r2, [r4, #0]
 8003264:	0022      	movs	r2, r4
 8003266:	2178      	movs	r1, #120	; 0x78
 8003268:	3245      	adds	r2, #69	; 0x45
 800326a:	7011      	strb	r1, [r2, #0]
 800326c:	4a27      	ldr	r2, [pc, #156]	; (800330c <_printf_i+0x220>)
 800326e:	e7a7      	b.n	80031c0 <_printf_i+0xd4>
 8003270:	0648      	lsls	r0, r1, #25
 8003272:	d5ac      	bpl.n	80031ce <_printf_i+0xe2>
 8003274:	b2ad      	uxth	r5, r5
 8003276:	e7aa      	b.n	80031ce <_printf_i+0xe2>
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	680d      	ldr	r5, [r1, #0]
 800327c:	1d10      	adds	r0, r2, #4
 800327e:	6949      	ldr	r1, [r1, #20]
 8003280:	6018      	str	r0, [r3, #0]
 8003282:	6813      	ldr	r3, [r2, #0]
 8003284:	062e      	lsls	r6, r5, #24
 8003286:	d501      	bpl.n	800328c <_printf_i+0x1a0>
 8003288:	6019      	str	r1, [r3, #0]
 800328a:	e002      	b.n	8003292 <_printf_i+0x1a6>
 800328c:	066d      	lsls	r5, r5, #25
 800328e:	d5fb      	bpl.n	8003288 <_printf_i+0x19c>
 8003290:	8019      	strh	r1, [r3, #0]
 8003292:	2300      	movs	r3, #0
 8003294:	9e04      	ldr	r6, [sp, #16]
 8003296:	6123      	str	r3, [r4, #16]
 8003298:	e7d2      	b.n	8003240 <_printf_i+0x154>
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	1d11      	adds	r1, r2, #4
 800329e:	6019      	str	r1, [r3, #0]
 80032a0:	6816      	ldr	r6, [r2, #0]
 80032a2:	2100      	movs	r1, #0
 80032a4:	0030      	movs	r0, r6
 80032a6:	6862      	ldr	r2, [r4, #4]
 80032a8:	f000 f832 	bl	8003310 <memchr>
 80032ac:	2800      	cmp	r0, #0
 80032ae:	d001      	beq.n	80032b4 <_printf_i+0x1c8>
 80032b0:	1b80      	subs	r0, r0, r6
 80032b2:	6060      	str	r0, [r4, #4]
 80032b4:	6863      	ldr	r3, [r4, #4]
 80032b6:	6123      	str	r3, [r4, #16]
 80032b8:	2300      	movs	r3, #0
 80032ba:	9a04      	ldr	r2, [sp, #16]
 80032bc:	7013      	strb	r3, [r2, #0]
 80032be:	e7bf      	b.n	8003240 <_printf_i+0x154>
 80032c0:	6923      	ldr	r3, [r4, #16]
 80032c2:	0032      	movs	r2, r6
 80032c4:	9906      	ldr	r1, [sp, #24]
 80032c6:	9805      	ldr	r0, [sp, #20]
 80032c8:	9d07      	ldr	r5, [sp, #28]
 80032ca:	47a8      	blx	r5
 80032cc:	1c43      	adds	r3, r0, #1
 80032ce:	d0c1      	beq.n	8003254 <_printf_i+0x168>
 80032d0:	6823      	ldr	r3, [r4, #0]
 80032d2:	079b      	lsls	r3, r3, #30
 80032d4:	d415      	bmi.n	8003302 <_printf_i+0x216>
 80032d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032d8:	68e0      	ldr	r0, [r4, #12]
 80032da:	4298      	cmp	r0, r3
 80032dc:	dabc      	bge.n	8003258 <_printf_i+0x16c>
 80032de:	0018      	movs	r0, r3
 80032e0:	e7ba      	b.n	8003258 <_printf_i+0x16c>
 80032e2:	0022      	movs	r2, r4
 80032e4:	2301      	movs	r3, #1
 80032e6:	9906      	ldr	r1, [sp, #24]
 80032e8:	9805      	ldr	r0, [sp, #20]
 80032ea:	9e07      	ldr	r6, [sp, #28]
 80032ec:	3219      	adds	r2, #25
 80032ee:	47b0      	blx	r6
 80032f0:	1c43      	adds	r3, r0, #1
 80032f2:	d0af      	beq.n	8003254 <_printf_i+0x168>
 80032f4:	3501      	adds	r5, #1
 80032f6:	68e3      	ldr	r3, [r4, #12]
 80032f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032fa:	1a9b      	subs	r3, r3, r2
 80032fc:	42ab      	cmp	r3, r5
 80032fe:	dcf0      	bgt.n	80032e2 <_printf_i+0x1f6>
 8003300:	e7e9      	b.n	80032d6 <_printf_i+0x1ea>
 8003302:	2500      	movs	r5, #0
 8003304:	e7f7      	b.n	80032f6 <_printf_i+0x20a>
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	080037b9 	.word	0x080037b9
 800330c:	080037ca 	.word	0x080037ca

08003310 <memchr>:
 8003310:	b2c9      	uxtb	r1, r1
 8003312:	1882      	adds	r2, r0, r2
 8003314:	4290      	cmp	r0, r2
 8003316:	d101      	bne.n	800331c <memchr+0xc>
 8003318:	2000      	movs	r0, #0
 800331a:	4770      	bx	lr
 800331c:	7803      	ldrb	r3, [r0, #0]
 800331e:	428b      	cmp	r3, r1
 8003320:	d0fb      	beq.n	800331a <memchr+0xa>
 8003322:	3001      	adds	r0, #1
 8003324:	e7f6      	b.n	8003314 <memchr+0x4>

08003326 <memcpy>:
 8003326:	2300      	movs	r3, #0
 8003328:	b510      	push	{r4, lr}
 800332a:	429a      	cmp	r2, r3
 800332c:	d100      	bne.n	8003330 <memcpy+0xa>
 800332e:	bd10      	pop	{r4, pc}
 8003330:	5ccc      	ldrb	r4, [r1, r3]
 8003332:	54c4      	strb	r4, [r0, r3]
 8003334:	3301      	adds	r3, #1
 8003336:	e7f8      	b.n	800332a <memcpy+0x4>

08003338 <memmove>:
 8003338:	b510      	push	{r4, lr}
 800333a:	4288      	cmp	r0, r1
 800333c:	d902      	bls.n	8003344 <memmove+0xc>
 800333e:	188b      	adds	r3, r1, r2
 8003340:	4298      	cmp	r0, r3
 8003342:	d303      	bcc.n	800334c <memmove+0x14>
 8003344:	2300      	movs	r3, #0
 8003346:	e007      	b.n	8003358 <memmove+0x20>
 8003348:	5c8b      	ldrb	r3, [r1, r2]
 800334a:	5483      	strb	r3, [r0, r2]
 800334c:	3a01      	subs	r2, #1
 800334e:	d2fb      	bcs.n	8003348 <memmove+0x10>
 8003350:	bd10      	pop	{r4, pc}
 8003352:	5ccc      	ldrb	r4, [r1, r3]
 8003354:	54c4      	strb	r4, [r0, r3]
 8003356:	3301      	adds	r3, #1
 8003358:	429a      	cmp	r2, r3
 800335a:	d1fa      	bne.n	8003352 <memmove+0x1a>
 800335c:	e7f8      	b.n	8003350 <memmove+0x18>
	...

08003360 <_free_r>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	0005      	movs	r5, r0
 8003364:	2900      	cmp	r1, #0
 8003366:	d010      	beq.n	800338a <_free_r+0x2a>
 8003368:	1f0c      	subs	r4, r1, #4
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	da00      	bge.n	8003372 <_free_r+0x12>
 8003370:	18e4      	adds	r4, r4, r3
 8003372:	0028      	movs	r0, r5
 8003374:	f000 f8d4 	bl	8003520 <__malloc_lock>
 8003378:	4a1d      	ldr	r2, [pc, #116]	; (80033f0 <_free_r+0x90>)
 800337a:	6813      	ldr	r3, [r2, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d105      	bne.n	800338c <_free_r+0x2c>
 8003380:	6063      	str	r3, [r4, #4]
 8003382:	6014      	str	r4, [r2, #0]
 8003384:	0028      	movs	r0, r5
 8003386:	f000 f8d3 	bl	8003530 <__malloc_unlock>
 800338a:	bd70      	pop	{r4, r5, r6, pc}
 800338c:	42a3      	cmp	r3, r4
 800338e:	d908      	bls.n	80033a2 <_free_r+0x42>
 8003390:	6821      	ldr	r1, [r4, #0]
 8003392:	1860      	adds	r0, r4, r1
 8003394:	4283      	cmp	r3, r0
 8003396:	d1f3      	bne.n	8003380 <_free_r+0x20>
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	1841      	adds	r1, r0, r1
 800339e:	6021      	str	r1, [r4, #0]
 80033a0:	e7ee      	b.n	8003380 <_free_r+0x20>
 80033a2:	001a      	movs	r2, r3
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <_free_r+0x4e>
 80033aa:	42a3      	cmp	r3, r4
 80033ac:	d9f9      	bls.n	80033a2 <_free_r+0x42>
 80033ae:	6811      	ldr	r1, [r2, #0]
 80033b0:	1850      	adds	r0, r2, r1
 80033b2:	42a0      	cmp	r0, r4
 80033b4:	d10b      	bne.n	80033ce <_free_r+0x6e>
 80033b6:	6820      	ldr	r0, [r4, #0]
 80033b8:	1809      	adds	r1, r1, r0
 80033ba:	1850      	adds	r0, r2, r1
 80033bc:	6011      	str	r1, [r2, #0]
 80033be:	4283      	cmp	r3, r0
 80033c0:	d1e0      	bne.n	8003384 <_free_r+0x24>
 80033c2:	6818      	ldr	r0, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	1841      	adds	r1, r0, r1
 80033c8:	6011      	str	r1, [r2, #0]
 80033ca:	6053      	str	r3, [r2, #4]
 80033cc:	e7da      	b.n	8003384 <_free_r+0x24>
 80033ce:	42a0      	cmp	r0, r4
 80033d0:	d902      	bls.n	80033d8 <_free_r+0x78>
 80033d2:	230c      	movs	r3, #12
 80033d4:	602b      	str	r3, [r5, #0]
 80033d6:	e7d5      	b.n	8003384 <_free_r+0x24>
 80033d8:	6821      	ldr	r1, [r4, #0]
 80033da:	1860      	adds	r0, r4, r1
 80033dc:	4283      	cmp	r3, r0
 80033de:	d103      	bne.n	80033e8 <_free_r+0x88>
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	1841      	adds	r1, r0, r1
 80033e6:	6021      	str	r1, [r4, #0]
 80033e8:	6063      	str	r3, [r4, #4]
 80033ea:	6054      	str	r4, [r2, #4]
 80033ec:	e7ca      	b.n	8003384 <_free_r+0x24>
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	20000090 	.word	0x20000090

080033f4 <_malloc_r>:
 80033f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f6:	2303      	movs	r3, #3
 80033f8:	1ccd      	adds	r5, r1, #3
 80033fa:	439d      	bics	r5, r3
 80033fc:	3508      	adds	r5, #8
 80033fe:	0006      	movs	r6, r0
 8003400:	2d0c      	cmp	r5, #12
 8003402:	d21f      	bcs.n	8003444 <_malloc_r+0x50>
 8003404:	250c      	movs	r5, #12
 8003406:	42a9      	cmp	r1, r5
 8003408:	d81e      	bhi.n	8003448 <_malloc_r+0x54>
 800340a:	0030      	movs	r0, r6
 800340c:	f000 f888 	bl	8003520 <__malloc_lock>
 8003410:	4925      	ldr	r1, [pc, #148]	; (80034a8 <_malloc_r+0xb4>)
 8003412:	680a      	ldr	r2, [r1, #0]
 8003414:	0014      	movs	r4, r2
 8003416:	2c00      	cmp	r4, #0
 8003418:	d11a      	bne.n	8003450 <_malloc_r+0x5c>
 800341a:	4f24      	ldr	r7, [pc, #144]	; (80034ac <_malloc_r+0xb8>)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d104      	bne.n	800342c <_malloc_r+0x38>
 8003422:	0021      	movs	r1, r4
 8003424:	0030      	movs	r0, r6
 8003426:	f000 f869 	bl	80034fc <_sbrk_r>
 800342a:	6038      	str	r0, [r7, #0]
 800342c:	0029      	movs	r1, r5
 800342e:	0030      	movs	r0, r6
 8003430:	f000 f864 	bl	80034fc <_sbrk_r>
 8003434:	1c43      	adds	r3, r0, #1
 8003436:	d12b      	bne.n	8003490 <_malloc_r+0x9c>
 8003438:	230c      	movs	r3, #12
 800343a:	0030      	movs	r0, r6
 800343c:	6033      	str	r3, [r6, #0]
 800343e:	f000 f877 	bl	8003530 <__malloc_unlock>
 8003442:	e003      	b.n	800344c <_malloc_r+0x58>
 8003444:	2d00      	cmp	r5, #0
 8003446:	dade      	bge.n	8003406 <_malloc_r+0x12>
 8003448:	230c      	movs	r3, #12
 800344a:	6033      	str	r3, [r6, #0]
 800344c:	2000      	movs	r0, #0
 800344e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003450:	6823      	ldr	r3, [r4, #0]
 8003452:	1b5b      	subs	r3, r3, r5
 8003454:	d419      	bmi.n	800348a <_malloc_r+0x96>
 8003456:	2b0b      	cmp	r3, #11
 8003458:	d903      	bls.n	8003462 <_malloc_r+0x6e>
 800345a:	6023      	str	r3, [r4, #0]
 800345c:	18e4      	adds	r4, r4, r3
 800345e:	6025      	str	r5, [r4, #0]
 8003460:	e003      	b.n	800346a <_malloc_r+0x76>
 8003462:	6863      	ldr	r3, [r4, #4]
 8003464:	42a2      	cmp	r2, r4
 8003466:	d10e      	bne.n	8003486 <_malloc_r+0x92>
 8003468:	600b      	str	r3, [r1, #0]
 800346a:	0030      	movs	r0, r6
 800346c:	f000 f860 	bl	8003530 <__malloc_unlock>
 8003470:	0020      	movs	r0, r4
 8003472:	2207      	movs	r2, #7
 8003474:	300b      	adds	r0, #11
 8003476:	1d23      	adds	r3, r4, #4
 8003478:	4390      	bics	r0, r2
 800347a:	1ac2      	subs	r2, r0, r3
 800347c:	4298      	cmp	r0, r3
 800347e:	d0e6      	beq.n	800344e <_malloc_r+0x5a>
 8003480:	1a1b      	subs	r3, r3, r0
 8003482:	50a3      	str	r3, [r4, r2]
 8003484:	e7e3      	b.n	800344e <_malloc_r+0x5a>
 8003486:	6053      	str	r3, [r2, #4]
 8003488:	e7ef      	b.n	800346a <_malloc_r+0x76>
 800348a:	0022      	movs	r2, r4
 800348c:	6864      	ldr	r4, [r4, #4]
 800348e:	e7c2      	b.n	8003416 <_malloc_r+0x22>
 8003490:	2303      	movs	r3, #3
 8003492:	1cc4      	adds	r4, r0, #3
 8003494:	439c      	bics	r4, r3
 8003496:	42a0      	cmp	r0, r4
 8003498:	d0e1      	beq.n	800345e <_malloc_r+0x6a>
 800349a:	1a21      	subs	r1, r4, r0
 800349c:	0030      	movs	r0, r6
 800349e:	f000 f82d 	bl	80034fc <_sbrk_r>
 80034a2:	1c43      	adds	r3, r0, #1
 80034a4:	d1db      	bne.n	800345e <_malloc_r+0x6a>
 80034a6:	e7c7      	b.n	8003438 <_malloc_r+0x44>
 80034a8:	20000090 	.word	0x20000090
 80034ac:	20000094 	.word	0x20000094

080034b0 <_realloc_r>:
 80034b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b2:	0007      	movs	r7, r0
 80034b4:	000d      	movs	r5, r1
 80034b6:	0016      	movs	r6, r2
 80034b8:	2900      	cmp	r1, #0
 80034ba:	d105      	bne.n	80034c8 <_realloc_r+0x18>
 80034bc:	0011      	movs	r1, r2
 80034be:	f7ff ff99 	bl	80033f4 <_malloc_r>
 80034c2:	0004      	movs	r4, r0
 80034c4:	0020      	movs	r0, r4
 80034c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034c8:	2a00      	cmp	r2, #0
 80034ca:	d103      	bne.n	80034d4 <_realloc_r+0x24>
 80034cc:	f7ff ff48 	bl	8003360 <_free_r>
 80034d0:	0034      	movs	r4, r6
 80034d2:	e7f7      	b.n	80034c4 <_realloc_r+0x14>
 80034d4:	f000 f834 	bl	8003540 <_malloc_usable_size_r>
 80034d8:	002c      	movs	r4, r5
 80034da:	42b0      	cmp	r0, r6
 80034dc:	d2f2      	bcs.n	80034c4 <_realloc_r+0x14>
 80034de:	0031      	movs	r1, r6
 80034e0:	0038      	movs	r0, r7
 80034e2:	f7ff ff87 	bl	80033f4 <_malloc_r>
 80034e6:	1e04      	subs	r4, r0, #0
 80034e8:	d0ec      	beq.n	80034c4 <_realloc_r+0x14>
 80034ea:	0029      	movs	r1, r5
 80034ec:	0032      	movs	r2, r6
 80034ee:	f7ff ff1a 	bl	8003326 <memcpy>
 80034f2:	0029      	movs	r1, r5
 80034f4:	0038      	movs	r0, r7
 80034f6:	f7ff ff33 	bl	8003360 <_free_r>
 80034fa:	e7e3      	b.n	80034c4 <_realloc_r+0x14>

080034fc <_sbrk_r>:
 80034fc:	2300      	movs	r3, #0
 80034fe:	b570      	push	{r4, r5, r6, lr}
 8003500:	4d06      	ldr	r5, [pc, #24]	; (800351c <_sbrk_r+0x20>)
 8003502:	0004      	movs	r4, r0
 8003504:	0008      	movs	r0, r1
 8003506:	602b      	str	r3, [r5, #0]
 8003508:	f7fd fa3c 	bl	8000984 <_sbrk>
 800350c:	1c43      	adds	r3, r0, #1
 800350e:	d103      	bne.n	8003518 <_sbrk_r+0x1c>
 8003510:	682b      	ldr	r3, [r5, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d000      	beq.n	8003518 <_sbrk_r+0x1c>
 8003516:	6023      	str	r3, [r4, #0]
 8003518:	bd70      	pop	{r4, r5, r6, pc}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	20000124 	.word	0x20000124

08003520 <__malloc_lock>:
 8003520:	b510      	push	{r4, lr}
 8003522:	4802      	ldr	r0, [pc, #8]	; (800352c <__malloc_lock+0xc>)
 8003524:	f000 f814 	bl	8003550 <__retarget_lock_acquire_recursive>
 8003528:	bd10      	pop	{r4, pc}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	2000012c 	.word	0x2000012c

08003530 <__malloc_unlock>:
 8003530:	b510      	push	{r4, lr}
 8003532:	4802      	ldr	r0, [pc, #8]	; (800353c <__malloc_unlock+0xc>)
 8003534:	f000 f80d 	bl	8003552 <__retarget_lock_release_recursive>
 8003538:	bd10      	pop	{r4, pc}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	2000012c 	.word	0x2000012c

08003540 <_malloc_usable_size_r>:
 8003540:	1f0b      	subs	r3, r1, #4
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	1f18      	subs	r0, r3, #4
 8003546:	2b00      	cmp	r3, #0
 8003548:	da01      	bge.n	800354e <_malloc_usable_size_r+0xe>
 800354a:	580b      	ldr	r3, [r1, r0]
 800354c:	18c0      	adds	r0, r0, r3
 800354e:	4770      	bx	lr

08003550 <__retarget_lock_acquire_recursive>:
 8003550:	4770      	bx	lr

08003552 <__retarget_lock_release_recursive>:
 8003552:	4770      	bx	lr

08003554 <_init>:
 8003554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800355a:	bc08      	pop	{r3}
 800355c:	469e      	mov	lr, r3
 800355e:	4770      	bx	lr

08003560 <_fini>:
 8003560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003566:	bc08      	pop	{r3}
 8003568:	469e      	mov	lr, r3
 800356a:	4770      	bx	lr
